// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common/configtx.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common {

  /// <summary>Holder for reflection information generated from common/configtx.proto</summary>
  public static partial class ConfigtxReflection {

    #region Descriptor
    /// <summary>File descriptor for common/configtx.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigtxReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVjb21tb24vY29uZmlndHgucHJvdG8SBmNvbW1vbhoTY29tbW9uL2NvbW1v",
            "bi5wcm90bxoVY29tbW9uL3BvbGljaWVzLnByb3RvIlcKDkNvbmZpZ0VudmVs",
            "b3BlEh4KBmNvbmZpZxgBIAEoCzIOLmNvbW1vbi5Db25maWcSJQoLbGFzdF91",
            "cGRhdGUYAiABKAsyEC5jb21tb24uRW52ZWxvcGUinQMKEUNvbmZpZ0dyb3Vw",
            "U2NoZW1hEjUKBmdyb3VwcxgBIAMoCzIlLmNvbW1vbi5Db25maWdHcm91cFNj",
            "aGVtYS5Hcm91cHNFbnRyeRI1CgZ2YWx1ZXMYAiADKAsyJS5jb21tb24uQ29u",
            "ZmlnR3JvdXBTY2hlbWEuVmFsdWVzRW50cnkSOQoIcG9saWNpZXMYAyADKAsy",
            "Jy5jb21tb24uQ29uZmlnR3JvdXBTY2hlbWEuUG9saWNpZXNFbnRyeRpICgtH",
            "cm91cHNFbnRyeRILCgNrZXkYASABKAkSKAoFdmFsdWUYAiABKAsyGS5jb21t",
            "b24uQ29uZmlnR3JvdXBTY2hlbWE6AjgBGkgKC1ZhbHVlc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRIoCgV2YWx1ZRgCIAEoCzIZLmNvbW1vbi5Db25maWdWYWx1ZVNj",
            "aGVtYToCOAEaSwoNUG9saWNpZXNFbnRyeRILCgNrZXkYASABKAkSKQoFdmFs",
            "dWUYAiABKAsyGi5jb21tb24uQ29uZmlnUG9saWN5U2NoZW1hOgI4ASITChFD",
            "b25maWdWYWx1ZVNjaGVtYSIUChJDb25maWdQb2xpY3lTY2hlbWEiUgoGQ29u",
            "ZmlnEhAKCHNlcXVlbmNlGAEgASgEEioKDWNoYW5uZWxfZ3JvdXAYAiABKAsy",
            "Ey5jb21tb24uQ29uZmlnR3JvdXBKBAgDEARSBHR5cGUiWgoUQ29uZmlnVXBk",
            "YXRlRW52ZWxvcGUSFQoNY29uZmlnX3VwZGF0ZRgBIAEoDBIrCgpzaWduYXR1",
            "cmVzGAIgAygLMhcuY29tbW9uLkNvbmZpZ1NpZ25hdHVyZSLxAQoMQ29uZmln",
            "VXBkYXRlEhIKCmNoYW5uZWxfaWQYASABKAkSJQoIcmVhZF9zZXQYAiABKAsy",
            "Ey5jb21tb24uQ29uZmlnR3JvdXASJgoJd3JpdGVfc2V0GAMgASgLMhMuY29t",
            "bW9uLkNvbmZpZ0dyb3VwEj0KDWlzb2xhdGVkX2RhdGEYBSADKAsyJi5jb21t",
            "b24uQ29uZmlnVXBkYXRlLklzb2xhdGVkRGF0YUVudHJ5GjMKEUlzb2xhdGVk",
            "RGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoCOAFKBAgE",
            "EAVSBHR5cGUimAMKC0NvbmZpZ0dyb3VwEg8KB3ZlcnNpb24YASABKAQSLwoG",
            "Z3JvdXBzGAIgAygLMh8uY29tbW9uLkNvbmZpZ0dyb3VwLkdyb3Vwc0VudHJ5",
            "Ei8KBnZhbHVlcxgDIAMoCzIfLmNvbW1vbi5Db25maWdHcm91cC5WYWx1ZXNF",
            "bnRyeRIzCghwb2xpY2llcxgEIAMoCzIhLmNvbW1vbi5Db25maWdHcm91cC5Q",
            "b2xpY2llc0VudHJ5EhIKCm1vZF9wb2xpY3kYBSABKAkaQgoLR3JvdXBzRW50",
            "cnkSCwoDa2V5GAEgASgJEiIKBXZhbHVlGAIgASgLMhMuY29tbW9uLkNvbmZp",
            "Z0dyb3VwOgI4ARpCCgtWYWx1ZXNFbnRyeRILCgNrZXkYASABKAkSIgoFdmFs",
            "dWUYAiABKAsyEy5jb21tb24uQ29uZmlnVmFsdWU6AjgBGkUKDVBvbGljaWVz",
            "RW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuY29tbW9uLkNv",
            "bmZpZ1BvbGljeToCOAEiQQoLQ29uZmlnVmFsdWUSDwoHdmVyc2lvbhgBIAEo",
            "BBINCgV2YWx1ZRgCIAEoDBISCgptb2RfcG9saWN5GAMgASgJIlMKDENvbmZp",
            "Z1BvbGljeRIPCgd2ZXJzaW9uGAEgASgEEh4KBnBvbGljeRgCIAEoCzIOLmNv",
            "bW1vbi5Qb2xpY3kSEgoKbW9kX3BvbGljeRgDIAEoCSI+Cg9Db25maWdTaWdu",
            "YXR1cmUSGAoQc2lnbmF0dXJlX2hlYWRlchgBIAEoDBIRCglzaWduYXR1cmUY",
            "AiABKAxCUwokb3JnLmh5cGVybGVkZ2VyLmZhYnJpYy5wcm90b3MuY29tbW9u",
            "WitnaXRodWIuY29tL2h5cGVybGVkZ2VyL2ZhYnJpYy9wcm90b3MvY29tbW9u",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, global::Common.PoliciesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigEnvelope), global::Common.ConfigEnvelope.Parser, new[]{ "Config", "LastUpdate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigGroupSchema), global::Common.ConfigGroupSchema.Parser, new[]{ "Groups", "Values", "Policies" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigValueSchema), global::Common.ConfigValueSchema.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigPolicySchema), global::Common.ConfigPolicySchema.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Config), global::Common.Config.Parser, new[]{ "Sequence", "ChannelGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigUpdateEnvelope), global::Common.ConfigUpdateEnvelope.Parser, new[]{ "ConfigUpdate", "Signatures" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigUpdate), global::Common.ConfigUpdate.Parser, new[]{ "ChannelId", "ReadSet", "WriteSet", "IsolatedData" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigGroup), global::Common.ConfigGroup.Parser, new[]{ "Version", "Groups", "Values", "Policies", "ModPolicy" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigValue), global::Common.ConfigValue.Parser, new[]{ "Version", "Value", "ModPolicy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigPolicy), global::Common.ConfigPolicy.Parser, new[]{ "Version", "Policy", "ModPolicy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.ConfigSignature), global::Common.ConfigSignature.Parser, new[]{ "SignatureHeader", "Signature" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ConfigEnvelope is designed to contain _all_ configuration for a chain with no dependency
  /// on previous configuration transactions.
  ///
  /// It is generated with the following scheme:
  ///   1. Retrieve the existing configuration
  ///   2. Note the config properties (ConfigValue, ConfigPolicy, ConfigGroup) to be modified
  ///   3. Add any intermediate ConfigGroups to the ConfigUpdate.read_set (sparsely)
  ///   4. Add any additional desired dependencies to ConfigUpdate.read_set (sparsely)
  ///   5. Modify the config properties, incrementing each version by 1, set them in the ConfigUpdate.write_set
  ///      Note: any element not modified but specified should already be in the read_set, so may be specified sparsely
  ///   6. Create ConfigUpdate message and marshal it into ConfigUpdateEnvelope.update and encode the required signatures
  ///     a) Each signature is of type ConfigSignature
  ///     b) The ConfigSignature signature is over the concatenation of signature_header and the ConfigUpdate bytes (which includes a ChainHeader)
  ///   5. Submit new Config for ordering in Envelope signed by submitter
  ///     a) The Envelope Payload has data set to the marshaled ConfigEnvelope
  ///     b) The Envelope Payload has a header of type Header.Type.CONFIG_UPDATE
  ///
  /// The configuration manager will verify:
  ///   1. All items in the read_set exist at the read versions
  ///   2. All items in the write_set at a different version than, or not in, the read_set have been appropriately signed according to their mod_policy
  ///   3. The new configuration satisfies the ConfigSchema
  /// </summary>
  public sealed partial class ConfigEnvelope : pb::IMessage<ConfigEnvelope> {
    private static readonly pb::MessageParser<ConfigEnvelope> _parser = new pb::MessageParser<ConfigEnvelope>(() => new ConfigEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigEnvelope(ConfigEnvelope other) : this() {
      config_ = other.config_ != null ? other.config_.Clone() : null;
      lastUpdate_ = other.lastUpdate_ != null ? other.lastUpdate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigEnvelope Clone() {
      return new ConfigEnvelope(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Common.Config config_;
    /// <summary>
    /// A marshaled Config structure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Config Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 2;
    private global::Common.Envelope lastUpdate_;
    /// <summary>
    /// The last CONFIG_UPDATE message which generated this current configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Envelope LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(LastUpdate, other.LastUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (lastUpdate_ != null) hash ^= LastUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (lastUpdate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LastUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (lastUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Common.Config();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.lastUpdate_ != null) {
        if (lastUpdate_ == null) {
          lastUpdate_ = new global::Common.Envelope();
        }
        LastUpdate.MergeFrom(other.LastUpdate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Common.Config();
            }
            input.ReadMessage(config_);
            break;
          }
          case 18: {
            if (lastUpdate_ == null) {
              lastUpdate_ = new global::Common.Envelope();
            }
            input.ReadMessage(lastUpdate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigGroupSchema : pb::IMessage<ConfigGroupSchema> {
    private static readonly pb::MessageParser<ConfigGroupSchema> _parser = new pb::MessageParser<ConfigGroupSchema>(() => new ConfigGroupSchema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigGroupSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigGroupSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigGroupSchema(ConfigGroupSchema other) : this() {
      groups_ = other.groups_.Clone();
      values_ = other.values_.Clone();
      policies_ = other.policies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigGroupSchema Clone() {
      return new ConfigGroupSchema(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Common.ConfigGroupSchema>.Codec _map_groups_codec
        = new pbc::MapField<string, global::Common.ConfigGroupSchema>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Common.ConfigGroupSchema.Parser), 10);
    private readonly pbc::MapField<string, global::Common.ConfigGroupSchema> groups_ = new pbc::MapField<string, global::Common.ConfigGroupSchema>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.ConfigGroupSchema> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Common.ConfigValueSchema>.Codec _map_values_codec
        = new pbc::MapField<string, global::Common.ConfigValueSchema>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Common.ConfigValueSchema.Parser), 18);
    private readonly pbc::MapField<string, global::Common.ConfigValueSchema> values_ = new pbc::MapField<string, global::Common.ConfigValueSchema>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.ConfigValueSchema> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "policies" field.</summary>
    public const int PoliciesFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Common.ConfigPolicySchema>.Codec _map_policies_codec
        = new pbc::MapField<string, global::Common.ConfigPolicySchema>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Common.ConfigPolicySchema.Parser), 26);
    private readonly pbc::MapField<string, global::Common.ConfigPolicySchema> policies_ = new pbc::MapField<string, global::Common.ConfigPolicySchema>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.ConfigPolicySchema> Policies {
      get { return policies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigGroupSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigGroupSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Groups.Equals(other.Groups)) return false;
      if (!Values.Equals(other.Values)) return false;
      if (!Policies.Equals(other.Policies)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Groups.GetHashCode();
      hash ^= Values.GetHashCode();
      hash ^= Policies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _map_groups_codec);
      values_.WriteTo(output, _map_values_codec);
      policies_.WriteTo(output, _map_policies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_map_groups_codec);
      size += values_.CalculateSize(_map_values_codec);
      size += policies_.CalculateSize(_map_policies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigGroupSchema other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
      values_.Add(other.values_);
      policies_.Add(other.policies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _map_groups_codec);
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
          case 26: {
            policies_.AddEntriesFrom(input, _map_policies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigValueSchema : pb::IMessage<ConfigValueSchema> {
    private static readonly pb::MessageParser<ConfigValueSchema> _parser = new pb::MessageParser<ConfigValueSchema>(() => new ConfigValueSchema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigValueSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValueSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValueSchema(ConfigValueSchema other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValueSchema Clone() {
      return new ConfigValueSchema(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigValueSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigValueSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigValueSchema other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ConfigPolicySchema : pb::IMessage<ConfigPolicySchema> {
    private static readonly pb::MessageParser<ConfigPolicySchema> _parser = new pb::MessageParser<ConfigPolicySchema>(() => new ConfigPolicySchema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigPolicySchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPolicySchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPolicySchema(ConfigPolicySchema other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPolicySchema Clone() {
      return new ConfigPolicySchema(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigPolicySchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigPolicySchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigPolicySchema other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Config represents the config for a particular channel
  /// </summary>
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      sequence_ = other.sequence_;
      channelGroup_ = other.channelGroup_ != null ? other.channelGroup_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private ulong sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "channel_group" field.</summary>
    public const int ChannelGroupFieldNumber = 2;
    private global::Common.ConfigGroup channelGroup_;
    /// <summary>
    /// channel_group is a bad name for this, it should be changed to root when API breakage is allowed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ConfigGroup ChannelGroup {
      get { return channelGroup_; }
      set {
        channelGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (!object.Equals(ChannelGroup, other.ChannelGroup)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0UL) hash ^= Sequence.GetHashCode();
      if (channelGroup_ != null) hash ^= ChannelGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Sequence);
      }
      if (channelGroup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChannelGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sequence);
      }
      if (channelGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelGroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0UL) {
        Sequence = other.Sequence;
      }
      if (other.channelGroup_ != null) {
        if (channelGroup_ == null) {
          channelGroup_ = new global::Common.ConfigGroup();
        }
        ChannelGroup.MergeFrom(other.ChannelGroup);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadUInt64();
            break;
          }
          case 18: {
            if (channelGroup_ == null) {
              channelGroup_ = new global::Common.ConfigGroup();
            }
            input.ReadMessage(channelGroup_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigUpdateEnvelope : pb::IMessage<ConfigUpdateEnvelope> {
    private static readonly pb::MessageParser<ConfigUpdateEnvelope> _parser = new pb::MessageParser<ConfigUpdateEnvelope>(() => new ConfigUpdateEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigUpdateEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigUpdateEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigUpdateEnvelope(ConfigUpdateEnvelope other) : this() {
      configUpdate_ = other.configUpdate_;
      signatures_ = other.signatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigUpdateEnvelope Clone() {
      return new ConfigUpdateEnvelope(this);
    }

    /// <summary>Field number for the "config_update" field.</summary>
    public const int ConfigUpdateFieldNumber = 1;
    private pb::ByteString configUpdate_ = pb::ByteString.Empty;
    /// <summary>
    /// A marshaled ConfigUpdate structure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigUpdate {
      get { return configUpdate_; }
      set {
        configUpdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signatures" field.</summary>
    public const int SignaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.ConfigSignature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(18, global::Common.ConfigSignature.Parser);
    private readonly pbc::RepeatedField<global::Common.ConfigSignature> signatures_ = new pbc::RepeatedField<global::Common.ConfigSignature>();
    /// <summary>
    /// Signatures over the config_update
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ConfigSignature> Signatures {
      get { return signatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigUpdateEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigUpdateEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigUpdate != other.ConfigUpdate) return false;
      if(!signatures_.Equals(other.signatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigUpdate.Length != 0) hash ^= ConfigUpdate.GetHashCode();
      hash ^= signatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigUpdate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ConfigUpdate);
      }
      signatures_.WriteTo(output, _repeated_signatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigUpdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigUpdate);
      }
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigUpdateEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.ConfigUpdate.Length != 0) {
        ConfigUpdate = other.ConfigUpdate;
      }
      signatures_.Add(other.signatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConfigUpdate = input.ReadBytes();
            break;
          }
          case 18: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConfigUpdate is used to submit a subset of config and to have the orderer apply to Config
  /// it is always submitted inside a ConfigUpdateEnvelope which allows the addition of signatures
  /// resulting in a new total configuration.  The update is applied as follows:
  /// 1. The versions from all of the elements in the read_set is verified against the versions in the existing config.
  ///    If there is a mismatch in the read versions, then the config update fails and is rejected.
  /// 2. Any elements in the write_set with the same version as the read_set are ignored.
  /// 3. The corresponding mod_policy for every remaining element in the write_set is collected.
  /// 4. Each policy is checked against the signatures from the ConfigUpdateEnvelope, any failing to verify are rejected
  /// 5. The write_set is applied to the Config and the ConfigGroupSchema verifies that the updates were legal
  /// </summary>
  public sealed partial class ConfigUpdate : pb::IMessage<ConfigUpdate> {
    private static readonly pb::MessageParser<ConfigUpdate> _parser = new pb::MessageParser<ConfigUpdate>(() => new ConfigUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigUpdate(ConfigUpdate other) : this() {
      channelId_ = other.channelId_;
      readSet_ = other.readSet_ != null ? other.readSet_.Clone() : null;
      writeSet_ = other.writeSet_ != null ? other.writeSet_.Clone() : null;
      isolatedData_ = other.isolatedData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigUpdate Clone() {
      return new ConfigUpdate(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// Which channel this config update is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_set" field.</summary>
    public const int ReadSetFieldNumber = 2;
    private global::Common.ConfigGroup readSet_;
    /// <summary>
    /// ReadSet explicitly lists the portion of the config which was read, this should be sparse with only Version set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ConfigGroup ReadSet {
      get { return readSet_; }
      set {
        readSet_ = value;
      }
    }

    /// <summary>Field number for the "write_set" field.</summary>
    public const int WriteSetFieldNumber = 3;
    private global::Common.ConfigGroup writeSet_;
    /// <summary>
    /// WriteSet lists the portion of the config which was written, this should included updated Versions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ConfigGroup WriteSet {
      get { return writeSet_; }
      set {
        writeSet_ = value;
      }
    }

    /// <summary>Field number for the "isolated_data" field.</summary>
    public const int IsolatedDataFieldNumber = 5;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_isolatedData_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 42);
    private readonly pbc::MapField<string, pb::ByteString> isolatedData_ = new pbc::MapField<string, pb::ByteString>();
    /// <summary>
    /// Data which is not to be reflected in the resulting Config, but is still needed for some other purpose.  For instance, rscc_seed_data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> IsolatedData {
      get { return isolatedData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (!object.Equals(ReadSet, other.ReadSet)) return false;
      if (!object.Equals(WriteSet, other.WriteSet)) return false;
      if (!IsolatedData.Equals(other.IsolatedData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (readSet_ != null) hash ^= ReadSet.GetHashCode();
      if (writeSet_ != null) hash ^= WriteSet.GetHashCode();
      hash ^= IsolatedData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (readSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReadSet);
      }
      if (writeSet_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WriteSet);
      }
      isolatedData_.WriteTo(output, _map_isolatedData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (readSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadSet);
      }
      if (writeSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WriteSet);
      }
      size += isolatedData_.CalculateSize(_map_isolatedData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.readSet_ != null) {
        if (readSet_ == null) {
          readSet_ = new global::Common.ConfigGroup();
        }
        ReadSet.MergeFrom(other.ReadSet);
      }
      if (other.writeSet_ != null) {
        if (writeSet_ == null) {
          writeSet_ = new global::Common.ConfigGroup();
        }
        WriteSet.MergeFrom(other.WriteSet);
      }
      isolatedData_.Add(other.isolatedData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            if (readSet_ == null) {
              readSet_ = new global::Common.ConfigGroup();
            }
            input.ReadMessage(readSet_);
            break;
          }
          case 26: {
            if (writeSet_ == null) {
              writeSet_ = new global::Common.ConfigGroup();
            }
            input.ReadMessage(writeSet_);
            break;
          }
          case 42: {
            isolatedData_.AddEntriesFrom(input, _map_isolatedData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConfigGroup is the hierarchical data structure for holding config
  /// </summary>
  public sealed partial class ConfigGroup : pb::IMessage<ConfigGroup> {
    private static readonly pb::MessageParser<ConfigGroup> _parser = new pb::MessageParser<ConfigGroup>(() => new ConfigGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigGroup(ConfigGroup other) : this() {
      version_ = other.version_;
      groups_ = other.groups_.Clone();
      values_ = other.values_.Clone();
      policies_ = other.policies_.Clone();
      modPolicy_ = other.modPolicy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigGroup Clone() {
      return new ConfigGroup(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Common.ConfigGroup>.Codec _map_groups_codec
        = new pbc::MapField<string, global::Common.ConfigGroup>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Common.ConfigGroup.Parser), 18);
    private readonly pbc::MapField<string, global::Common.ConfigGroup> groups_ = new pbc::MapField<string, global::Common.ConfigGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.ConfigGroup> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Common.ConfigValue>.Codec _map_values_codec
        = new pbc::MapField<string, global::Common.ConfigValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Common.ConfigValue.Parser), 26);
    private readonly pbc::MapField<string, global::Common.ConfigValue> values_ = new pbc::MapField<string, global::Common.ConfigValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.ConfigValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "policies" field.</summary>
    public const int PoliciesFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Common.ConfigPolicy>.Codec _map_policies_codec
        = new pbc::MapField<string, global::Common.ConfigPolicy>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Common.ConfigPolicy.Parser), 34);
    private readonly pbc::MapField<string, global::Common.ConfigPolicy> policies_ = new pbc::MapField<string, global::Common.ConfigPolicy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.ConfigPolicy> Policies {
      get { return policies_; }
    }

    /// <summary>Field number for the "mod_policy" field.</summary>
    public const int ModPolicyFieldNumber = 5;
    private string modPolicy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModPolicy {
      get { return modPolicy_; }
      set {
        modPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!Groups.Equals(other.Groups)) return false;
      if (!Values.Equals(other.Values)) return false;
      if (!Policies.Equals(other.Policies)) return false;
      if (ModPolicy != other.ModPolicy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0UL) hash ^= Version.GetHashCode();
      hash ^= Groups.GetHashCode();
      hash ^= Values.GetHashCode();
      hash ^= Policies.GetHashCode();
      if (ModPolicy.Length != 0) hash ^= ModPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Version);
      }
      groups_.WriteTo(output, _map_groups_codec);
      values_.WriteTo(output, _map_values_codec);
      policies_.WriteTo(output, _map_policies_codec);
      if (ModPolicy.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ModPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      size += groups_.CalculateSize(_map_groups_codec);
      size += values_.CalculateSize(_map_values_codec);
      size += policies_.CalculateSize(_map_policies_codec);
      if (ModPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigGroup other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      groups_.Add(other.groups_);
      values_.Add(other.values_);
      policies_.Add(other.policies_);
      if (other.ModPolicy.Length != 0) {
        ModPolicy = other.ModPolicy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt64();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _map_groups_codec);
            break;
          }
          case 26: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
          case 34: {
            policies_.AddEntriesFrom(input, _map_policies_codec);
            break;
          }
          case 42: {
            ModPolicy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConfigValue represents an individual piece of config data
  /// </summary>
  public sealed partial class ConfigValue : pb::IMessage<ConfigValue> {
    private static readonly pb::MessageParser<ConfigValue> _parser = new pb::MessageParser<ConfigValue>(() => new ConfigValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValue(ConfigValue other) : this() {
      version_ = other.version_;
      value_ = other.value_;
      modPolicy_ = other.modPolicy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValue Clone() {
      return new ConfigValue(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mod_policy" field.</summary>
    public const int ModPolicyFieldNumber = 3;
    private string modPolicy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModPolicy {
      get { return modPolicy_; }
      set {
        modPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Value != other.Value) return false;
      if (ModPolicy != other.ModPolicy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (ModPolicy.Length != 0) hash ^= ModPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Version);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (ModPolicy.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (ModPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigValue other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.ModPolicy.Length != 0) {
        ModPolicy = other.ModPolicy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt64();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
          case 26: {
            ModPolicy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigPolicy : pb::IMessage<ConfigPolicy> {
    private static readonly pb::MessageParser<ConfigPolicy> _parser = new pb::MessageParser<ConfigPolicy>(() => new ConfigPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPolicy(ConfigPolicy other) : this() {
      version_ = other.version_;
      policy_ = other.policy_ != null ? other.policy_.Clone() : null;
      modPolicy_ = other.modPolicy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPolicy Clone() {
      return new ConfigPolicy(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "policy" field.</summary>
    public const int PolicyFieldNumber = 2;
    private global::Common.Policy policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Policy Policy {
      get { return policy_; }
      set {
        policy_ = value;
      }
    }

    /// <summary>Field number for the "mod_policy" field.</summary>
    public const int ModPolicyFieldNumber = 3;
    private string modPolicy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModPolicy {
      get { return modPolicy_; }
      set {
        modPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Policy, other.Policy)) return false;
      if (ModPolicy != other.ModPolicy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (policy_ != null) hash ^= Policy.GetHashCode();
      if (ModPolicy.Length != 0) hash ^= ModPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Version);
      }
      if (policy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Policy);
      }
      if (ModPolicy.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Policy);
      }
      if (ModPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigPolicy other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.policy_ != null) {
        if (policy_ == null) {
          policy_ = new global::Common.Policy();
        }
        Policy.MergeFrom(other.Policy);
      }
      if (other.ModPolicy.Length != 0) {
        ModPolicy = other.ModPolicy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt64();
            break;
          }
          case 18: {
            if (policy_ == null) {
              policy_ = new global::Common.Policy();
            }
            input.ReadMessage(policy_);
            break;
          }
          case 26: {
            ModPolicy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigSignature : pb::IMessage<ConfigSignature> {
    private static readonly pb::MessageParser<ConfigSignature> _parser = new pb::MessageParser<ConfigSignature>(() => new ConfigSignature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSignature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.ConfigtxReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSignature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSignature(ConfigSignature other) : this() {
      signatureHeader_ = other.signatureHeader_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSignature Clone() {
      return new ConfigSignature(this);
    }

    /// <summary>Field number for the "signature_header" field.</summary>
    public const int SignatureHeaderFieldNumber = 1;
    private pb::ByteString signatureHeader_ = pb::ByteString.Empty;
    /// <summary>
    /// A marshaled SignatureHeader
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignatureHeader {
      get { return signatureHeader_; }
      set {
        signatureHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature over the concatenation signatureHeader bytes and config bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSignature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSignature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignatureHeader != other.SignatureHeader) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignatureHeader.Length != 0) hash ^= SignatureHeader.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignatureHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignatureHeader);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignatureHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignatureHeader);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSignature other) {
      if (other == null) {
        return;
      }
      if (other.SignatureHeader.Length != 0) {
        SignatureHeader = other.SignatureHeader;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SignatureHeader = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
