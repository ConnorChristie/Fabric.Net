// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common/ledger.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common {

  /// <summary>Holder for reflection information generated from common/ledger.proto</summary>
  public static partial class LedgerReflection {

    #region Descriptor
    /// <summary>File descriptor for common/ledger.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LedgerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNjb21tb24vbGVkZ2VyLnByb3RvEgZjb21tb24iVQoOQmxvY2tjaGFpbklu",
            "Zm8SDgoGaGVpZ2h0GAEgASgEEhgKEGN1cnJlbnRCbG9ja0hhc2gYAiABKAwS",
            "GQoRcHJldmlvdXNCbG9ja0hhc2gYAyABKAxCUwokb3JnLmh5cGVybGVkZ2Vy",
            "LmZhYnJpYy5wcm90b3MuY29tbW9uWitnaXRodWIuY29tL2h5cGVybGVkZ2Vy",
            "L2ZhYnJpYy9wcm90b3MvY29tbW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.BlockchainInfo), global::Common.BlockchainInfo.Parser, new[]{ "Height", "CurrentBlockHash", "PreviousBlockHash" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Contains information about the blockchain ledger such as height, current
  /// block hash, and previous block hash.
  /// </summary>
  public sealed partial class BlockchainInfo : pb::IMessage<BlockchainInfo> {
    private static readonly pb::MessageParser<BlockchainInfo> _parser = new pb::MessageParser<BlockchainInfo>(() => new BlockchainInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockchainInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.LedgerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockchainInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockchainInfo(BlockchainInfo other) : this() {
      height_ = other.height_;
      currentBlockHash_ = other.currentBlockHash_;
      previousBlockHash_ = other.previousBlockHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockchainInfo Clone() {
      return new BlockchainInfo(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "currentBlockHash" field.</summary>
    public const int CurrentBlockHashFieldNumber = 2;
    private pb::ByteString currentBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CurrentBlockHash {
      get { return currentBlockHash_; }
      set {
        currentBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previousBlockHash" field.</summary>
    public const int PreviousBlockHashFieldNumber = 3;
    private pb::ByteString previousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousBlockHash {
      get { return previousBlockHash_; }
      set {
        previousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockchainInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockchainInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Height != other.Height) return false;
      if (CurrentBlockHash != other.CurrentBlockHash) return false;
      if (PreviousBlockHash != other.PreviousBlockHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Height != 0UL) hash ^= Height.GetHashCode();
      if (CurrentBlockHash.Length != 0) hash ^= CurrentBlockHash.GetHashCode();
      if (PreviousBlockHash.Length != 0) hash ^= PreviousBlockHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Height != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Height);
      }
      if (CurrentBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CurrentBlockHash);
      }
      if (PreviousBlockHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PreviousBlockHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      if (CurrentBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CurrentBlockHash);
      }
      if (PreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousBlockHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockchainInfo other) {
      if (other == null) {
        return;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
      if (other.CurrentBlockHash.Length != 0) {
        CurrentBlockHash = other.CurrentBlockHash;
      }
      if (other.PreviousBlockHash.Length != 0) {
        PreviousBlockHash = other.PreviousBlockHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Height = input.ReadUInt64();
            break;
          }
          case 18: {
            CurrentBlockHash = input.ReadBytes();
            break;
          }
          case 26: {
            PreviousBlockHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
