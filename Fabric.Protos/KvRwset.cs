// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ledger/rwset/kvrwset/kv_rwset.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kvrwset {

  /// <summary>Holder for reflection information generated from ledger/rwset/kvrwset/kv_rwset.proto</summary>
  public static partial class KvRwsetReflection {

    #region Descriptor
    /// <summary>File descriptor for ledger/rwset/kvrwset/kv_rwset.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KvRwsetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNsZWRnZXIvcndzZXQva3Zyd3NldC9rdl9yd3NldC5wcm90bxIHa3Zyd3Nl",
            "dCKzAQoHS1ZSV1NldBIeCgVyZWFkcxgBIAMoCzIPLmt2cndzZXQuS1ZSZWFk",
            "EjMKEnJhbmdlX3F1ZXJpZXNfaW5mbxgCIAMoCzIXLmt2cndzZXQuUmFuZ2VR",
            "dWVyeUluZm8SIAoGd3JpdGVzGAMgAygLMhAua3Zyd3NldC5LVldyaXRlEjEK",
            "D21ldGFkYXRhX3dyaXRlcxgEIAMoCzIYLmt2cndzZXQuS1ZNZXRhZGF0YVdy",
            "aXRlIpwBCgtIYXNoZWRSV1NldBIpCgxoYXNoZWRfcmVhZHMYASADKAsyEy5r",
            "dnJ3c2V0LktWUmVhZEhhc2gSKwoNaGFzaGVkX3dyaXRlcxgCIAMoCzIULmt2",
            "cndzZXQuS1ZXcml0ZUhhc2gSNQoPbWV0YWRhdGFfd3JpdGVzGAMgAygLMhwu",
            "a3Zyd3NldC5LVk1ldGFkYXRhV3JpdGVIYXNoIjgKBktWUmVhZBILCgNrZXkY",
            "ASABKAkSIQoHdmVyc2lvbhgCIAEoCzIQLmt2cndzZXQuVmVyc2lvbiI4CgdL",
            "VldyaXRlEgsKA2tleRgBIAEoCRIRCglpc19kZWxldGUYAiABKAgSDQoFdmFs",
            "dWUYAyABKAwiSQoPS1ZNZXRhZGF0YVdyaXRlEgsKA2tleRgBIAEoCRIpCgdl",
            "bnRyaWVzGAIgAygLMhgua3Zyd3NldC5LVk1ldGFkYXRhRW50cnkiQQoKS1ZS",
            "ZWFkSGFzaBIQCghrZXlfaGFzaBgBIAEoDBIhCgd2ZXJzaW9uGAIgASgLMhAu",
            "a3Zyd3NldC5WZXJzaW9uIkYKC0tWV3JpdGVIYXNoEhAKCGtleV9oYXNoGAEg",
            "ASgMEhEKCWlzX2RlbGV0ZRgCIAEoCBISCgp2YWx1ZV9oYXNoGAMgASgMIlIK",
            "E0tWTWV0YWRhdGFXcml0ZUhhc2gSEAoIa2V5X2hhc2gYASABKAwSKQoHZW50",
            "cmllcxgCIAMoCzIYLmt2cndzZXQuS1ZNZXRhZGF0YUVudHJ5Ii4KD0tWTWV0",
            "YWRhdGFFbnRyeRIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgMIiwKB1Zl",
            "cnNpb24SEQoJYmxvY2tfbnVtGAEgASgEEg4KBnR4X251bRgCIAEoBCLEAQoO",
            "UmFuZ2VRdWVyeUluZm8SEQoJc3RhcnRfa2V5GAEgASgJEg8KB2VuZF9rZXkY",
            "AiABKAkSFQoNaXRyX2V4aGF1c3RlZBgDIAEoCBIoCglyYXdfcmVhZHMYBCAB",
            "KAsyEy5rdnJ3c2V0LlF1ZXJ5UmVhZHNIABI/ChNyZWFkc19tZXJrbGVfaGFz",
            "aGVzGAUgASgLMiAua3Zyd3NldC5RdWVyeVJlYWRzTWVya2xlU3VtbWFyeUgA",
            "QgwKCnJlYWRzX2luZm8iLwoKUXVlcnlSZWFkcxIhCghrdl9yZWFkcxgBIAMo",
            "CzIPLmt2cndzZXQuS1ZSZWFkIloKF1F1ZXJ5UmVhZHNNZXJrbGVTdW1tYXJ5",
            "EhIKCm1heF9kZWdyZWUYASABKA0SEQoJbWF4X2xldmVsGAIgASgNEhgKEG1h",
            "eF9sZXZlbF9oYXNoZXMYAyADKAxCbwoyb3JnLmh5cGVybGVkZ2VyLmZhYnJp",
            "Yy5wcm90b3MubGVkZ2VyLnJ3c2V0Lmt2cndzZXRaOWdpdGh1Yi5jb20vaHlw",
            "ZXJsZWRnZXIvZmFicmljL3Byb3Rvcy9sZWRnZXIvcndzZXQva3Zyd3NldGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVRWSet), global::Kvrwset.KVRWSet.Parser, new[]{ "Reads", "RangeQueriesInfo", "Writes", "MetadataWrites" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.HashedRWSet), global::Kvrwset.HashedRWSet.Parser, new[]{ "HashedReads", "HashedWrites", "MetadataWrites" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVRead), global::Kvrwset.KVRead.Parser, new[]{ "Key", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVWrite), global::Kvrwset.KVWrite.Parser, new[]{ "Key", "IsDelete", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVMetadataWrite), global::Kvrwset.KVMetadataWrite.Parser, new[]{ "Key", "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVReadHash), global::Kvrwset.KVReadHash.Parser, new[]{ "KeyHash", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVWriteHash), global::Kvrwset.KVWriteHash.Parser, new[]{ "KeyHash", "IsDelete", "ValueHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVMetadataWriteHash), global::Kvrwset.KVMetadataWriteHash.Parser, new[]{ "KeyHash", "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.KVMetadataEntry), global::Kvrwset.KVMetadataEntry.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.Version), global::Kvrwset.Version.Parser, new[]{ "BlockNum", "TxNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.RangeQueryInfo), global::Kvrwset.RangeQueryInfo.Parser, new[]{ "StartKey", "EndKey", "ItrExhausted", "RawReads", "ReadsMerkleHashes" }, new[]{ "ReadsInfo" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.QueryReads), global::Kvrwset.QueryReads.Parser, new[]{ "KvReads" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kvrwset.QueryReadsMerkleSummary), global::Kvrwset.QueryReadsMerkleSummary.Parser, new[]{ "MaxDegree", "MaxLevel", "MaxLevelHashes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// KVRWSet encapsulates the read-write set for a chaincode that operates upon a KV or Document data model
  /// This structure is used for both the public data and the private data
  /// </summary>
  public sealed partial class KVRWSet : pb::IMessage<KVRWSet> {
    private static readonly pb::MessageParser<KVRWSet> _parser = new pb::MessageParser<KVRWSet>(() => new KVRWSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVRWSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVRWSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVRWSet(KVRWSet other) : this() {
      reads_ = other.reads_.Clone();
      rangeQueriesInfo_ = other.rangeQueriesInfo_.Clone();
      writes_ = other.writes_.Clone();
      metadataWrites_ = other.metadataWrites_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVRWSet Clone() {
      return new KVRWSet(this);
    }

    /// <summary>Field number for the "reads" field.</summary>
    public const int ReadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kvrwset.KVRead> _repeated_reads_codec
        = pb::FieldCodec.ForMessage(10, global::Kvrwset.KVRead.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVRead> reads_ = new pbc::RepeatedField<global::Kvrwset.KVRead>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVRead> Reads {
      get { return reads_; }
    }

    /// <summary>Field number for the "range_queries_info" field.</summary>
    public const int RangeQueriesInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kvrwset.RangeQueryInfo> _repeated_rangeQueriesInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Kvrwset.RangeQueryInfo.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.RangeQueryInfo> rangeQueriesInfo_ = new pbc::RepeatedField<global::Kvrwset.RangeQueryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.RangeQueryInfo> RangeQueriesInfo {
      get { return rangeQueriesInfo_; }
    }

    /// <summary>Field number for the "writes" field.</summary>
    public const int WritesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Kvrwset.KVWrite> _repeated_writes_codec
        = pb::FieldCodec.ForMessage(26, global::Kvrwset.KVWrite.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVWrite> writes_ = new pbc::RepeatedField<global::Kvrwset.KVWrite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVWrite> Writes {
      get { return writes_; }
    }

    /// <summary>Field number for the "metadata_writes" field.</summary>
    public const int MetadataWritesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Kvrwset.KVMetadataWrite> _repeated_metadataWrites_codec
        = pb::FieldCodec.ForMessage(34, global::Kvrwset.KVMetadataWrite.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVMetadataWrite> metadataWrites_ = new pbc::RepeatedField<global::Kvrwset.KVMetadataWrite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVMetadataWrite> MetadataWrites {
      get { return metadataWrites_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVRWSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVRWSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reads_.Equals(other.reads_)) return false;
      if(!rangeQueriesInfo_.Equals(other.rangeQueriesInfo_)) return false;
      if(!writes_.Equals(other.writes_)) return false;
      if(!metadataWrites_.Equals(other.metadataWrites_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reads_.GetHashCode();
      hash ^= rangeQueriesInfo_.GetHashCode();
      hash ^= writes_.GetHashCode();
      hash ^= metadataWrites_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reads_.WriteTo(output, _repeated_reads_codec);
      rangeQueriesInfo_.WriteTo(output, _repeated_rangeQueriesInfo_codec);
      writes_.WriteTo(output, _repeated_writes_codec);
      metadataWrites_.WriteTo(output, _repeated_metadataWrites_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reads_.CalculateSize(_repeated_reads_codec);
      size += rangeQueriesInfo_.CalculateSize(_repeated_rangeQueriesInfo_codec);
      size += writes_.CalculateSize(_repeated_writes_codec);
      size += metadataWrites_.CalculateSize(_repeated_metadataWrites_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVRWSet other) {
      if (other == null) {
        return;
      }
      reads_.Add(other.reads_);
      rangeQueriesInfo_.Add(other.rangeQueriesInfo_);
      writes_.Add(other.writes_);
      metadataWrites_.Add(other.metadataWrites_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reads_.AddEntriesFrom(input, _repeated_reads_codec);
            break;
          }
          case 18: {
            rangeQueriesInfo_.AddEntriesFrom(input, _repeated_rangeQueriesInfo_codec);
            break;
          }
          case 26: {
            writes_.AddEntriesFrom(input, _repeated_writes_codec);
            break;
          }
          case 34: {
            metadataWrites_.AddEntriesFrom(input, _repeated_metadataWrites_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HashedRWSet encapsulates hashed representation of a private read-write set for KV or Document data model
  /// </summary>
  public sealed partial class HashedRWSet : pb::IMessage<HashedRWSet> {
    private static readonly pb::MessageParser<HashedRWSet> _parser = new pb::MessageParser<HashedRWSet>(() => new HashedRWSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashedRWSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashedRWSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashedRWSet(HashedRWSet other) : this() {
      hashedReads_ = other.hashedReads_.Clone();
      hashedWrites_ = other.hashedWrites_.Clone();
      metadataWrites_ = other.metadataWrites_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashedRWSet Clone() {
      return new HashedRWSet(this);
    }

    /// <summary>Field number for the "hashed_reads" field.</summary>
    public const int HashedReadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kvrwset.KVReadHash> _repeated_hashedReads_codec
        = pb::FieldCodec.ForMessage(10, global::Kvrwset.KVReadHash.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVReadHash> hashedReads_ = new pbc::RepeatedField<global::Kvrwset.KVReadHash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVReadHash> HashedReads {
      get { return hashedReads_; }
    }

    /// <summary>Field number for the "hashed_writes" field.</summary>
    public const int HashedWritesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kvrwset.KVWriteHash> _repeated_hashedWrites_codec
        = pb::FieldCodec.ForMessage(18, global::Kvrwset.KVWriteHash.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVWriteHash> hashedWrites_ = new pbc::RepeatedField<global::Kvrwset.KVWriteHash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVWriteHash> HashedWrites {
      get { return hashedWrites_; }
    }

    /// <summary>Field number for the "metadata_writes" field.</summary>
    public const int MetadataWritesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Kvrwset.KVMetadataWriteHash> _repeated_metadataWrites_codec
        = pb::FieldCodec.ForMessage(26, global::Kvrwset.KVMetadataWriteHash.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVMetadataWriteHash> metadataWrites_ = new pbc::RepeatedField<global::Kvrwset.KVMetadataWriteHash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVMetadataWriteHash> MetadataWrites {
      get { return metadataWrites_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashedRWSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashedRWSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hashedReads_.Equals(other.hashedReads_)) return false;
      if(!hashedWrites_.Equals(other.hashedWrites_)) return false;
      if(!metadataWrites_.Equals(other.metadataWrites_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hashedReads_.GetHashCode();
      hash ^= hashedWrites_.GetHashCode();
      hash ^= metadataWrites_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hashedReads_.WriteTo(output, _repeated_hashedReads_codec);
      hashedWrites_.WriteTo(output, _repeated_hashedWrites_codec);
      metadataWrites_.WriteTo(output, _repeated_metadataWrites_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hashedReads_.CalculateSize(_repeated_hashedReads_codec);
      size += hashedWrites_.CalculateSize(_repeated_hashedWrites_codec);
      size += metadataWrites_.CalculateSize(_repeated_metadataWrites_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashedRWSet other) {
      if (other == null) {
        return;
      }
      hashedReads_.Add(other.hashedReads_);
      hashedWrites_.Add(other.hashedWrites_);
      metadataWrites_.Add(other.metadataWrites_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hashedReads_.AddEntriesFrom(input, _repeated_hashedReads_codec);
            break;
          }
          case 18: {
            hashedWrites_.AddEntriesFrom(input, _repeated_hashedWrites_codec);
            break;
          }
          case 26: {
            metadataWrites_.AddEntriesFrom(input, _repeated_metadataWrites_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVRead captures a read operation performed during transaction simulation
  /// A 'nil' version indicates a non-existing key read by the transaction
  /// </summary>
  public sealed partial class KVRead : pb::IMessage<KVRead> {
    private static readonly pb::MessageParser<KVRead> _parser = new pb::MessageParser<KVRead>(() => new KVRead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVRead(KVRead other) : this() {
      key_ = other.key_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVRead Clone() {
      return new KVRead(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private global::Kvrwset.Version version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kvrwset.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Version, other.Version)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (version_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVRead other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          version_ = new global::Kvrwset.Version();
        }
        Version.MergeFrom(other.Version);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (version_ == null) {
              version_ = new global::Kvrwset.Version();
            }
            input.ReadMessage(version_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVWrite captures a write (update/delete) operation performed during transaction simulation
  /// </summary>
  public sealed partial class KVWrite : pb::IMessage<KVWrite> {
    private static readonly pb::MessageParser<KVWrite> _parser = new pb::MessageParser<KVWrite>(() => new KVWrite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVWrite(KVWrite other) : this() {
      key_ = other.key_;
      isDelete_ = other.isDelete_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVWrite Clone() {
      return new KVWrite(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_delete" field.</summary>
    public const int IsDeleteFieldNumber = 2;
    private bool isDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDelete {
      get { return isDelete_; }
      set {
        isDelete_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (IsDelete != other.IsDelete) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (IsDelete != false) hash ^= IsDelete.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (IsDelete != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDelete);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (IsDelete != false) {
        size += 1 + 1;
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVWrite other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.IsDelete != false) {
        IsDelete = other.IsDelete;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            IsDelete = input.ReadBool();
            break;
          }
          case 26: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVMetadataWrite captures all the entries in the metadata associated with a key
  /// </summary>
  public sealed partial class KVMetadataWrite : pb::IMessage<KVMetadataWrite> {
    private static readonly pb::MessageParser<KVMetadataWrite> _parser = new pb::MessageParser<KVMetadataWrite>(() => new KVMetadataWrite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVMetadataWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataWrite(KVMetadataWrite other) : this() {
      key_ = other.key_;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataWrite Clone() {
      return new KVMetadataWrite(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kvrwset.KVMetadataEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Kvrwset.KVMetadataEntry.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVMetadataEntry> entries_ = new pbc::RepeatedField<global::Kvrwset.KVMetadataEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVMetadataEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVMetadataWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVMetadataWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVMetadataWrite other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVReadHash is similar to the KVRead in spirit. However, it captures the hash of the key instead of the key itself
  /// version is kept as is for now. However, if the version also needs to be privacy-protected, it would need to be the
  /// hash of the version and hence of 'bytes' type
  /// </summary>
  public sealed partial class KVReadHash : pb::IMessage<KVReadHash> {
    private static readonly pb::MessageParser<KVReadHash> _parser = new pb::MessageParser<KVReadHash>(() => new KVReadHash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVReadHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVReadHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVReadHash(KVReadHash other) : this() {
      keyHash_ = other.keyHash_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVReadHash Clone() {
      return new KVReadHash(this);
    }

    /// <summary>Field number for the "key_hash" field.</summary>
    public const int KeyHashFieldNumber = 1;
    private pb::ByteString keyHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeyHash {
      get { return keyHash_; }
      set {
        keyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private global::Kvrwset.Version version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kvrwset.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVReadHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVReadHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyHash != other.KeyHash) return false;
      if (!object.Equals(Version, other.Version)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyHash.Length != 0) hash ^= KeyHash.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(KeyHash);
      }
      if (version_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyHash);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVReadHash other) {
      if (other == null) {
        return;
      }
      if (other.KeyHash.Length != 0) {
        KeyHash = other.KeyHash;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          version_ = new global::Kvrwset.Version();
        }
        Version.MergeFrom(other.Version);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyHash = input.ReadBytes();
            break;
          }
          case 18: {
            if (version_ == null) {
              version_ = new global::Kvrwset.Version();
            }
            input.ReadMessage(version_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVWriteHash is similar to the KVWrite. It captures a write (update/delete) operation performed during transaction simulation
  /// </summary>
  public sealed partial class KVWriteHash : pb::IMessage<KVWriteHash> {
    private static readonly pb::MessageParser<KVWriteHash> _parser = new pb::MessageParser<KVWriteHash>(() => new KVWriteHash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVWriteHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVWriteHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVWriteHash(KVWriteHash other) : this() {
      keyHash_ = other.keyHash_;
      isDelete_ = other.isDelete_;
      valueHash_ = other.valueHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVWriteHash Clone() {
      return new KVWriteHash(this);
    }

    /// <summary>Field number for the "key_hash" field.</summary>
    public const int KeyHashFieldNumber = 1;
    private pb::ByteString keyHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeyHash {
      get { return keyHash_; }
      set {
        keyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_delete" field.</summary>
    public const int IsDeleteFieldNumber = 2;
    private bool isDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDelete {
      get { return isDelete_; }
      set {
        isDelete_ = value;
      }
    }

    /// <summary>Field number for the "value_hash" field.</summary>
    public const int ValueHashFieldNumber = 3;
    private pb::ByteString valueHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValueHash {
      get { return valueHash_; }
      set {
        valueHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVWriteHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVWriteHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyHash != other.KeyHash) return false;
      if (IsDelete != other.IsDelete) return false;
      if (ValueHash != other.ValueHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyHash.Length != 0) hash ^= KeyHash.GetHashCode();
      if (IsDelete != false) hash ^= IsDelete.GetHashCode();
      if (ValueHash.Length != 0) hash ^= ValueHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(KeyHash);
      }
      if (IsDelete != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDelete);
      }
      if (ValueHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ValueHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyHash);
      }
      if (IsDelete != false) {
        size += 1 + 1;
      }
      if (ValueHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValueHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVWriteHash other) {
      if (other == null) {
        return;
      }
      if (other.KeyHash.Length != 0) {
        KeyHash = other.KeyHash;
      }
      if (other.IsDelete != false) {
        IsDelete = other.IsDelete;
      }
      if (other.ValueHash.Length != 0) {
        ValueHash = other.ValueHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyHash = input.ReadBytes();
            break;
          }
          case 16: {
            IsDelete = input.ReadBool();
            break;
          }
          case 26: {
            ValueHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVMetadataWriteHash captures all the upserts to the metadata associated with a key hash
  /// </summary>
  public sealed partial class KVMetadataWriteHash : pb::IMessage<KVMetadataWriteHash> {
    private static readonly pb::MessageParser<KVMetadataWriteHash> _parser = new pb::MessageParser<KVMetadataWriteHash>(() => new KVMetadataWriteHash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVMetadataWriteHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataWriteHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataWriteHash(KVMetadataWriteHash other) : this() {
      keyHash_ = other.keyHash_;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataWriteHash Clone() {
      return new KVMetadataWriteHash(this);
    }

    /// <summary>Field number for the "key_hash" field.</summary>
    public const int KeyHashFieldNumber = 1;
    private pb::ByteString keyHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeyHash {
      get { return keyHash_; }
      set {
        keyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kvrwset.KVMetadataEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Kvrwset.KVMetadataEntry.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVMetadataEntry> entries_ = new pbc::RepeatedField<global::Kvrwset.KVMetadataEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVMetadataEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVMetadataWriteHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVMetadataWriteHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyHash != other.KeyHash) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyHash.Length != 0) hash ^= KeyHash.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(KeyHash);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyHash);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVMetadataWriteHash other) {
      if (other == null) {
        return;
      }
      if (other.KeyHash.Length != 0) {
        KeyHash = other.KeyHash;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyHash = input.ReadBytes();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KVMetadataEntry captures a 'name'ed entry in the metadata of a key/key-hash.
  /// </summary>
  public sealed partial class KVMetadataEntry : pb::IMessage<KVMetadataEntry> {
    private static readonly pb::MessageParser<KVMetadataEntry> _parser = new pb::MessageParser<KVMetadataEntry>(() => new KVMetadataEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVMetadataEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataEntry(KVMetadataEntry other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVMetadataEntry Clone() {
      return new KVMetadataEntry(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVMetadataEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVMetadataEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVMetadataEntry other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Version encapsulates the version of a Key
  /// A version of a committed key is maintained as the height of the transaction that committed the key.
  /// The height is represenetd as a tuple &lt;blockNum, txNum> where the txNum is the position of the transaction
  /// (starting with 0) within block
  /// </summary>
  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      blockNum_ = other.blockNum_;
      txNum_ = other.txNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "block_num" field.</summary>
    public const int BlockNumFieldNumber = 1;
    private ulong blockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockNum {
      get { return blockNum_; }
      set {
        blockNum_ = value;
      }
    }

    /// <summary>Field number for the "tx_num" field.</summary>
    public const int TxNumFieldNumber = 2;
    private ulong txNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxNum {
      get { return txNum_; }
      set {
        txNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockNum != other.BlockNum) return false;
      if (TxNum != other.TxNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockNum != 0UL) hash ^= BlockNum.GetHashCode();
      if (TxNum != 0UL) hash ^= TxNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BlockNum);
      }
      if (TxNum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockNum);
      }
      if (TxNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.BlockNum != 0UL) {
        BlockNum = other.BlockNum;
      }
      if (other.TxNum != 0UL) {
        TxNum = other.TxNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockNum = input.ReadUInt64();
            break;
          }
          case 16: {
            TxNum = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RangeQueryInfo encapsulates the details of a range query performed by a transaction during simulation.
  /// This helps protect transactions from phantom reads by varifying during validation whether any new items
  /// got committed within the given range between transaction simuation and validation
  /// (in addition to regular checks for updates/deletes of the existing items).
  /// readInfo field contains either the KVReads (for the items read by the range query) or a merkle-tree hash
  /// if the KVReads exceeds a pre-configured numbers
  /// </summary>
  public sealed partial class RangeQueryInfo : pb::IMessage<RangeQueryInfo> {
    private static readonly pb::MessageParser<RangeQueryInfo> _parser = new pb::MessageParser<RangeQueryInfo>(() => new RangeQueryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeQueryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeQueryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeQueryInfo(RangeQueryInfo other) : this() {
      startKey_ = other.startKey_;
      endKey_ = other.endKey_;
      itrExhausted_ = other.itrExhausted_;
      switch (other.ReadsInfoCase) {
        case ReadsInfoOneofCase.RawReads:
          RawReads = other.RawReads.Clone();
          break;
        case ReadsInfoOneofCase.ReadsMerkleHashes:
          ReadsMerkleHashes = other.ReadsMerkleHashes.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeQueryInfo Clone() {
      return new RangeQueryInfo(this);
    }

    /// <summary>Field number for the "start_key" field.</summary>
    public const int StartKeyFieldNumber = 1;
    private string startKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartKey {
      get { return startKey_; }
      set {
        startKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_key" field.</summary>
    public const int EndKeyFieldNumber = 2;
    private string endKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndKey {
      get { return endKey_; }
      set {
        endKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itr_exhausted" field.</summary>
    public const int ItrExhaustedFieldNumber = 3;
    private bool itrExhausted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ItrExhausted {
      get { return itrExhausted_; }
      set {
        itrExhausted_ = value;
      }
    }

    /// <summary>Field number for the "raw_reads" field.</summary>
    public const int RawReadsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kvrwset.QueryReads RawReads {
      get { return readsInfoCase_ == ReadsInfoOneofCase.RawReads ? (global::Kvrwset.QueryReads) readsInfo_ : null; }
      set {
        readsInfo_ = value;
        readsInfoCase_ = value == null ? ReadsInfoOneofCase.None : ReadsInfoOneofCase.RawReads;
      }
    }

    /// <summary>Field number for the "reads_merkle_hashes" field.</summary>
    public const int ReadsMerkleHashesFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kvrwset.QueryReadsMerkleSummary ReadsMerkleHashes {
      get { return readsInfoCase_ == ReadsInfoOneofCase.ReadsMerkleHashes ? (global::Kvrwset.QueryReadsMerkleSummary) readsInfo_ : null; }
      set {
        readsInfo_ = value;
        readsInfoCase_ = value == null ? ReadsInfoOneofCase.None : ReadsInfoOneofCase.ReadsMerkleHashes;
      }
    }

    private object readsInfo_;
    /// <summary>Enum of possible cases for the "reads_info" oneof.</summary>
    public enum ReadsInfoOneofCase {
      None = 0,
      RawReads = 4,
      ReadsMerkleHashes = 5,
    }
    private ReadsInfoOneofCase readsInfoCase_ = ReadsInfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadsInfoOneofCase ReadsInfoCase {
      get { return readsInfoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReadsInfo() {
      readsInfoCase_ = ReadsInfoOneofCase.None;
      readsInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeQueryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeQueryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartKey != other.StartKey) return false;
      if (EndKey != other.EndKey) return false;
      if (ItrExhausted != other.ItrExhausted) return false;
      if (!object.Equals(RawReads, other.RawReads)) return false;
      if (!object.Equals(ReadsMerkleHashes, other.ReadsMerkleHashes)) return false;
      if (ReadsInfoCase != other.ReadsInfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartKey.Length != 0) hash ^= StartKey.GetHashCode();
      if (EndKey.Length != 0) hash ^= EndKey.GetHashCode();
      if (ItrExhausted != false) hash ^= ItrExhausted.GetHashCode();
      if (readsInfoCase_ == ReadsInfoOneofCase.RawReads) hash ^= RawReads.GetHashCode();
      if (readsInfoCase_ == ReadsInfoOneofCase.ReadsMerkleHashes) hash ^= ReadsMerkleHashes.GetHashCode();
      hash ^= (int) readsInfoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartKey);
      }
      if (EndKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndKey);
      }
      if (ItrExhausted != false) {
        output.WriteRawTag(24);
        output.WriteBool(ItrExhausted);
      }
      if (readsInfoCase_ == ReadsInfoOneofCase.RawReads) {
        output.WriteRawTag(34);
        output.WriteMessage(RawReads);
      }
      if (readsInfoCase_ == ReadsInfoOneofCase.ReadsMerkleHashes) {
        output.WriteRawTag(42);
        output.WriteMessage(ReadsMerkleHashes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartKey);
      }
      if (EndKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndKey);
      }
      if (ItrExhausted != false) {
        size += 1 + 1;
      }
      if (readsInfoCase_ == ReadsInfoOneofCase.RawReads) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawReads);
      }
      if (readsInfoCase_ == ReadsInfoOneofCase.ReadsMerkleHashes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadsMerkleHashes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeQueryInfo other) {
      if (other == null) {
        return;
      }
      if (other.StartKey.Length != 0) {
        StartKey = other.StartKey;
      }
      if (other.EndKey.Length != 0) {
        EndKey = other.EndKey;
      }
      if (other.ItrExhausted != false) {
        ItrExhausted = other.ItrExhausted;
      }
      switch (other.ReadsInfoCase) {
        case ReadsInfoOneofCase.RawReads:
          if (RawReads == null) {
            RawReads = new global::Kvrwset.QueryReads();
          }
          RawReads.MergeFrom(other.RawReads);
          break;
        case ReadsInfoOneofCase.ReadsMerkleHashes:
          if (ReadsMerkleHashes == null) {
            ReadsMerkleHashes = new global::Kvrwset.QueryReadsMerkleSummary();
          }
          ReadsMerkleHashes.MergeFrom(other.ReadsMerkleHashes);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StartKey = input.ReadString();
            break;
          }
          case 18: {
            EndKey = input.ReadString();
            break;
          }
          case 24: {
            ItrExhausted = input.ReadBool();
            break;
          }
          case 34: {
            global::Kvrwset.QueryReads subBuilder = new global::Kvrwset.QueryReads();
            if (readsInfoCase_ == ReadsInfoOneofCase.RawReads) {
              subBuilder.MergeFrom(RawReads);
            }
            input.ReadMessage(subBuilder);
            RawReads = subBuilder;
            break;
          }
          case 42: {
            global::Kvrwset.QueryReadsMerkleSummary subBuilder = new global::Kvrwset.QueryReadsMerkleSummary();
            if (readsInfoCase_ == ReadsInfoOneofCase.ReadsMerkleHashes) {
              subBuilder.MergeFrom(ReadsMerkleHashes);
            }
            input.ReadMessage(subBuilder);
            ReadsMerkleHashes = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// QueryReads encapsulates the KVReads for the items read by a transaction as a result of a query execution
  /// </summary>
  public sealed partial class QueryReads : pb::IMessage<QueryReads> {
    private static readonly pb::MessageParser<QueryReads> _parser = new pb::MessageParser<QueryReads>(() => new QueryReads());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryReads> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryReads() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryReads(QueryReads other) : this() {
      kvReads_ = other.kvReads_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryReads Clone() {
      return new QueryReads(this);
    }

    /// <summary>Field number for the "kv_reads" field.</summary>
    public const int KvReadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kvrwset.KVRead> _repeated_kvReads_codec
        = pb::FieldCodec.ForMessage(10, global::Kvrwset.KVRead.Parser);
    private readonly pbc::RepeatedField<global::Kvrwset.KVRead> kvReads_ = new pbc::RepeatedField<global::Kvrwset.KVRead>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kvrwset.KVRead> KvReads {
      get { return kvReads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryReads);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryReads other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!kvReads_.Equals(other.kvReads_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= kvReads_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      kvReads_.WriteTo(output, _repeated_kvReads_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += kvReads_.CalculateSize(_repeated_kvReads_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryReads other) {
      if (other == null) {
        return;
      }
      kvReads_.Add(other.kvReads_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            kvReads_.AddEntriesFrom(input, _repeated_kvReads_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// QueryReadsMerkleSummary encapsulates the Merkle-tree hashes for the QueryReads
  /// This allows to reduce the size of RWSet in the presence of query results
  /// by storing certain hashes instead of actual results.
  /// maxDegree field refers to the maximum number of children in the tree at any level
  /// maxLevel field contains the lowest level which has lesser nodes than maxDegree (starting from leaf level)
  /// </summary>
  public sealed partial class QueryReadsMerkleSummary : pb::IMessage<QueryReadsMerkleSummary> {
    private static readonly pb::MessageParser<QueryReadsMerkleSummary> _parser = new pb::MessageParser<QueryReadsMerkleSummary>(() => new QueryReadsMerkleSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryReadsMerkleSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kvrwset.KvRwsetReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryReadsMerkleSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryReadsMerkleSummary(QueryReadsMerkleSummary other) : this() {
      maxDegree_ = other.maxDegree_;
      maxLevel_ = other.maxLevel_;
      maxLevelHashes_ = other.maxLevelHashes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryReadsMerkleSummary Clone() {
      return new QueryReadsMerkleSummary(this);
    }

    /// <summary>Field number for the "max_degree" field.</summary>
    public const int MaxDegreeFieldNumber = 1;
    private uint maxDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDegree {
      get { return maxDegree_; }
      set {
        maxDegree_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 2;
    private uint maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_level_hashes" field.</summary>
    public const int MaxLevelHashesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_maxLevelHashes_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> maxLevelHashes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> MaxLevelHashes {
      get { return maxLevelHashes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryReadsMerkleSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryReadsMerkleSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxDegree != other.MaxDegree) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if(!maxLevelHashes_.Equals(other.maxLevelHashes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxDegree != 0) hash ^= MaxDegree.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      hash ^= maxLevelHashes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxDegree != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxDegree);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxLevel);
      }
      maxLevelHashes_.WriteTo(output, _repeated_maxLevelHashes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDegree);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      size += maxLevelHashes_.CalculateSize(_repeated_maxLevelHashes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryReadsMerkleSummary other) {
      if (other == null) {
        return;
      }
      if (other.MaxDegree != 0) {
        MaxDegree = other.MaxDegree;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      maxLevelHashes_.Add(other.maxLevelHashes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxDegree = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 26: {
            maxLevelHashes_.AddEntriesFrom(input, _repeated_maxLevelHashes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
