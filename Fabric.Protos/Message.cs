// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gossip/message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gossip {

  /// <summary>Holder for reflection information generated from gossip/message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for gossip/message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRnb3NzaXAvbWVzc2FnZS5wcm90bxIGZ29zc2lwGhdjb21tb24vY29sbGVj",
            "dGlvbi5wcm90byJfCghFbnZlbG9wZRIPCgdwYXlsb2FkGAEgASgMEhEKCXNp",
            "Z25hdHVyZRgCIAEoDBIvCg9zZWNyZXRfZW52ZWxvcGUYAyABKAsyFi5nb3Nz",
            "aXAuU2VjcmV0RW52ZWxvcGUiNAoOU2VjcmV0RW52ZWxvcGUSDwoHcGF5bG9h",
            "ZBgBIAEoDBIRCglzaWduYXR1cmUYAiABKAwiLwoGU2VjcmV0EhoKEGludGVy",
            "bmFsRW5kcG9pbnQYASABKAlIAEIJCgdjb250ZW50Io0JCg1Hb3NzaXBNZXNz",
            "YWdlEg0KBW5vbmNlGAEgASgEEg8KB2NoYW5uZWwYAiABKAwSJgoDdGFnGAMg",
            "ASgOMhkuZ29zc2lwLkdvc3NpcE1lc3NhZ2UuVGFnEikKCWFsaXZlX21zZxgF",
            "IAEoCzIULmdvc3NpcC5BbGl2ZU1lc3NhZ2VIABIsCgdtZW1fcmVxGAYgASgL",
            "MhkuZ29zc2lwLk1lbWJlcnNoaXBSZXF1ZXN0SAASLQoHbWVtX3JlcxgHIAEo",
            "CzIaLmdvc3NpcC5NZW1iZXJzaGlwUmVzcG9uc2VIABInCghkYXRhX21zZxgI",
            "IAEoCzITLmdvc3NpcC5EYXRhTWVzc2FnZUgAEiQKBWhlbGxvGAkgASgLMhMu",
            "Z29zc2lwLkdvc3NpcEhlbGxvSAASJgoIZGF0YV9kaWcYCiABKAsyEi5nb3Nz",
            "aXAuRGF0YURpZ2VzdEgAEicKCGRhdGFfcmVxGAsgASgLMhMuZ29zc2lwLkRh",
            "dGFSZXF1ZXN0SAASKQoLZGF0YV91cGRhdGUYDCABKAsyEi5nb3NzaXAuRGF0",
            "YVVwZGF0ZUgAEh4KBWVtcHR5GA0gASgLMg0uZ29zc2lwLkVtcHR5SAASJQoE",
            "Y29ubhgOIAEoCzIVLmdvc3NpcC5Db25uRXN0YWJsaXNoSAASJwoKc3RhdGVf",
            "aW5mbxgPIAEoCzIRLmdvc3NpcC5TdGF0ZUluZm9IABIzCg5zdGF0ZV9zbmFw",
            "c2hvdBgQIAEoCzIZLmdvc3NpcC5TdGF0ZUluZm9TbmFwc2hvdEgAEjsKE3N0",
            "YXRlX2luZm9fcHVsbF9yZXEYESABKAsyHC5nb3NzaXAuU3RhdGVJbmZvUHVs",
            "bFJlcXVlc3RIABIzCg1zdGF0ZV9yZXF1ZXN0GBIgASgLMhouZ29zc2lwLlJl",
            "bW90ZVN0YXRlUmVxdWVzdEgAEjUKDnN0YXRlX3Jlc3BvbnNlGBMgASgLMhsu",
            "Z29zc2lwLlJlbW90ZVN0YXRlUmVzcG9uc2VIABIzCg5sZWFkZXJzaGlwX21z",
            "ZxgUIAEoCzIZLmdvc3NpcC5MZWFkZXJzaGlwTWVzc2FnZUgAEi0KDXBlZXJf",
            "aWRlbnRpdHkYFSABKAsyFC5nb3NzaXAuUGVlcklkZW50aXR5SAASJgoDYWNr",
            "GBYgASgLMhcuZ29zc2lwLkFja25vd2xlZGdlbWVudEgAEjIKCnByaXZhdGVS",
            "ZXEYFyABKAsyHC5nb3NzaXAuUmVtb3RlUHZ0RGF0YVJlcXVlc3RIABIzCgpw",
            "cml2YXRlUmVzGBggASgLMh0uZ29zc2lwLlJlbW90ZVB2dERhdGFSZXNwb25z",
            "ZUgAEjIKDHByaXZhdGVfZGF0YRgZIAEoCzIaLmdvc3NpcC5Qcml2YXRlRGF0",
            "YU1lc3NhZ2VIACJfCgNUYWcSDQoJVU5ERUZJTkVEEAASCQoFRU1QVFkQARIM",
            "CghPUkdfT05MWRACEg0KCUNIQU5fT05MWRADEhAKDENIQU5fQU5EX09SRxAE",
            "Eg8KC0NIQU5fT1JfT1JHEAVCCQoHY29udGVudCJ9CglTdGF0ZUluZm8SIwoJ",
            "dGltZXN0YW1wGAIgASgLMhAuZ29zc2lwLlBlZXJUaW1lEg4KBnBraV9pZBgD",
            "IAEoDBITCgtjaGFubmVsX01BQxgEIAEoDBImCgpwcm9wZXJ0aWVzGAUgASgL",
            "MhIuZ29zc2lwLlByb3BlcnRpZXMiYAoKUHJvcGVydGllcxIVCg1sZWRnZXJf",
            "aGVpZ2h0GAEgASgEEhQKDGxlZnRfY2hhbm5lbBgCIAEoCBIlCgpjaGFpbmNv",
            "ZGVzGAMgAygLMhEuZ29zc2lwLkNoYWluY29kZSI3ChFTdGF0ZUluZm9TbmFw",
            "c2hvdBIiCghlbGVtZW50cxgBIAMoCzIQLmdvc3NpcC5FbnZlbG9wZSIrChRT",
            "dGF0ZUluZm9QdWxsUmVxdWVzdBITCgtjaGFubmVsX01BQxgBIAEoDCJICg1D",
            "b25uRXN0YWJsaXNoEg4KBnBraV9pZBgBIAEoDBIQCghpZGVudGl0eRgCIAEo",
            "DBIVCg10bHNfY2VydF9oYXNoGAMgASgMIj4KDFBlZXJJZGVudGl0eRIOCgZw",
            "a2lfaWQYASABKAwSDAoEY2VydBgCIAEoDBIQCghtZXRhZGF0YRgDIAEoDCJU",
            "CgtEYXRhUmVxdWVzdBINCgVub25jZRgBIAEoBBIPCgdkaWdlc3RzGAIgAygM",
            "EiUKCG1zZ190eXBlGAMgASgOMhMuZ29zc2lwLlB1bGxNc2dUeXBlIlUKC0dv",
            "c3NpcEhlbGxvEg0KBW5vbmNlGAEgASgEEhAKCG1ldGFkYXRhGAIgASgMEiUK",
            "CG1zZ190eXBlGAMgASgOMhMuZ29zc2lwLlB1bGxNc2dUeXBlImIKCkRhdGFV",
            "cGRhdGUSDQoFbm9uY2UYASABKAQSHgoEZGF0YRgCIAMoCzIQLmdvc3NpcC5F",
            "bnZlbG9wZRIlCghtc2dfdHlwZRgDIAEoDjITLmdvc3NpcC5QdWxsTXNnVHlw",
            "ZSJTCgpEYXRhRGlnZXN0Eg0KBW5vbmNlGAEgASgEEg8KB2RpZ2VzdHMYAiAD",
            "KAwSJQoIbXNnX3R5cGUYAyABKA4yEy5nb3NzaXAuUHVsbE1zZ1R5cGUiLwoL",
            "RGF0YU1lc3NhZ2USIAoHcGF5bG9hZBgBIAEoCzIPLmdvc3NpcC5QYXlsb2Fk",
            "Ij0KElByaXZhdGVEYXRhTWVzc2FnZRInCgdwYXlsb2FkGAEgASgLMhYuZ29z",
            "c2lwLlByaXZhdGVQYXlsb2FkIj4KB1BheWxvYWQSDwoHc2VxX251bRgBIAEo",
            "BBIMCgRkYXRhGAIgASgMEhQKDHByaXZhdGVfZGF0YRgDIAMoDCK7AQoOUHJp",
            "dmF0ZVBheWxvYWQSFwoPY29sbGVjdGlvbl9uYW1lGAEgASgJEhEKCW5hbWVz",
            "cGFjZRgCIAEoCRINCgV0eF9pZBgDIAEoCRIVCg1wcml2YXRlX3J3c2V0GAQg",
            "ASgMEhoKEnByaXZhdGVfc2ltX2hlaWdodBgFIAEoBBI7ChJjb2xsZWN0aW9u",
            "X2NvbmZpZ3MYBiABKAsyHy5jb21tb24uQ29sbGVjdGlvbkNvbmZpZ1BhY2th",
            "Z2UiaQoMQWxpdmVNZXNzYWdlEiIKCm1lbWJlcnNoaXAYASABKAsyDi5nb3Nz",
            "aXAuTWVtYmVyEiMKCXRpbWVzdGFtcBgCIAEoCzIQLmdvc3NpcC5QZWVyVGlt",
            "ZRIQCghpZGVudGl0eRgEIAEoDCJgChFMZWFkZXJzaGlwTWVzc2FnZRIOCgZw",
            "a2lfaWQYASABKAwSIwoJdGltZXN0YW1wGAIgASgLMhAuZ29zc2lwLlBlZXJU",
            "aW1lEhYKDmlzX2RlY2xhcmF0aW9uGAMgASgIIiwKCFBlZXJUaW1lEg8KB2lu",
            "Y19udW0YASABKAQSDwoHc2VxX251bRgCIAEoBCJOChFNZW1iZXJzaGlwUmVx",
            "dWVzdBIqChBzZWxmX2luZm9ybWF0aW9uGAEgASgLMhAuZ29zc2lwLkVudmVs",
            "b3BlEg0KBWtub3duGAIgAygMIlUKEk1lbWJlcnNoaXBSZXNwb25zZRIfCgVh",
            "bGl2ZRgBIAMoCzIQLmdvc3NpcC5FbnZlbG9wZRIeCgRkZWFkGAIgAygLMhAu",
            "Z29zc2lwLkVudmVsb3BlIjwKBk1lbWJlchIQCghlbmRwb2ludBgBIAEoCRIQ",
            "CghtZXRhZGF0YRgCIAEoDBIOCgZwa2lfaWQYAyABKAwiBwoFRW1wdHkiQAoS",
            "UmVtb3RlU3RhdGVSZXF1ZXN0EhUKDXN0YXJ0X3NlcV9udW0YASABKAQSEwoL",
            "ZW5kX3NlcV9udW0YAiABKAQiOAoTUmVtb3RlU3RhdGVSZXNwb25zZRIhCghw",
            "YXlsb2FkcxgBIAMoCzIPLmdvc3NpcC5QYXlsb2FkIj4KFFJlbW90ZVB2dERh",
            "dGFSZXF1ZXN0EiYKB2RpZ2VzdHMYASADKAsyFS5nb3NzaXAuUHZ0RGF0YURp",
            "Z2VzdCJuCg1QdnREYXRhRGlnZXN0Eg0KBXR4X2lkGAEgASgJEhEKCW5hbWVz",
            "cGFjZRgCIAEoCRISCgpjb2xsZWN0aW9uGAMgASgJEhEKCWJsb2NrX3NlcRgE",
            "IAEoBBIUCgxzZXFfaW5fYmxvY2sYBSABKAQiQQoVUmVtb3RlUHZ0RGF0YVJl",
            "c3BvbnNlEigKCGVsZW1lbnRzGAEgAygLMhYuZ29zc2lwLlB2dERhdGFFbGVt",
            "ZW50IkgKDlB2dERhdGFFbGVtZW50EiUKBmRpZ2VzdBgBIAEoCzIVLmdvc3Np",
            "cC5QdnREYXRhRGlnZXN0Eg8KB3BheWxvYWQYAiADKAwiOgoOUHZ0RGF0YVBh",
            "eWxvYWQSFwoPdHhfc2VxX2luX2Jsb2NrGAEgASgEEg8KB3BheWxvYWQYAiAB",
            "KAwiIAoPQWNrbm93bGVkZ2VtZW50Eg0KBWVycm9yGAEgASgJIjwKCUNoYWlu",
            "Y29kZRIMCgRuYW1lGAEgASgJEg8KB3ZlcnNpb24YAiABKAkSEAoIbWV0YWRh",
            "dGEYAyABKAwqPQoLUHVsbE1zZ1R5cGUSDQoJVU5ERUZJTkVEEAASDQoJQkxP",
            "Q0tfTVNHEAESEAoMSURFTlRJVFlfTVNHEAIyagoGR29zc2lwEjgKDEdvc3Np",
            "cFN0cmVhbRIQLmdvc3NpcC5FbnZlbG9wZRoQLmdvc3NpcC5FbnZlbG9wZSIA",
            "KAEwARImCgRQaW5nEg0uZ29zc2lwLkVtcHR5Gg0uZ29zc2lwLkVtcHR5IgBC",
            "LVorZ2l0aHViLmNvbS9oeXBlcmxlZGdlci9mYWJyaWMvcHJvdG9zL2dvc3Np",
            "cGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CollectionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Gossip.PullMsgType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Envelope), global::Gossip.Envelope.Parser, new[]{ "Payload", "Signature", "SecretEnvelope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.SecretEnvelope), global::Gossip.SecretEnvelope.Parser, new[]{ "Payload", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Secret), global::Gossip.Secret.Parser, new[]{ "InternalEndpoint" }, new[]{ "Content" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.GossipMessage), global::Gossip.GossipMessage.Parser, new[]{ "Nonce", "Channel", "Tag", "AliveMsg", "MemReq", "MemRes", "DataMsg", "Hello", "DataDig", "DataReq", "DataUpdate", "Empty", "Conn", "StateInfo", "StateSnapshot", "StateInfoPullReq", "StateRequest", "StateResponse", "LeadershipMsg", "PeerIdentity", "Ack", "PrivateReq", "PrivateRes", "PrivateData" }, new[]{ "Content" }, new[]{ typeof(global::Gossip.GossipMessage.Types.Tag) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.StateInfo), global::Gossip.StateInfo.Parser, new[]{ "Timestamp", "PkiId", "ChannelMAC", "Properties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Properties), global::Gossip.Properties.Parser, new[]{ "LedgerHeight", "LeftChannel", "Chaincodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.StateInfoSnapshot), global::Gossip.StateInfoSnapshot.Parser, new[]{ "Elements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.StateInfoPullRequest), global::Gossip.StateInfoPullRequest.Parser, new[]{ "ChannelMAC" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.ConnEstablish), global::Gossip.ConnEstablish.Parser, new[]{ "PkiId", "Identity", "TlsCertHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PeerIdentity), global::Gossip.PeerIdentity.Parser, new[]{ "PkiId", "Cert", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.DataRequest), global::Gossip.DataRequest.Parser, new[]{ "Nonce", "Digests", "MsgType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.GossipHello), global::Gossip.GossipHello.Parser, new[]{ "Nonce", "Metadata", "MsgType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.DataUpdate), global::Gossip.DataUpdate.Parser, new[]{ "Nonce", "Data", "MsgType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.DataDigest), global::Gossip.DataDigest.Parser, new[]{ "Nonce", "Digests", "MsgType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.DataMessage), global::Gossip.DataMessage.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PrivateDataMessage), global::Gossip.PrivateDataMessage.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Payload), global::Gossip.Payload.Parser, new[]{ "SeqNum", "Data", "PrivateData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PrivatePayload), global::Gossip.PrivatePayload.Parser, new[]{ "CollectionName", "Namespace", "TxId", "PrivateRwset", "PrivateSimHeight", "CollectionConfigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.AliveMessage), global::Gossip.AliveMessage.Parser, new[]{ "Membership", "Timestamp", "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.LeadershipMessage), global::Gossip.LeadershipMessage.Parser, new[]{ "PkiId", "Timestamp", "IsDeclaration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PeerTime), global::Gossip.PeerTime.Parser, new[]{ "IncNum", "SeqNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.MembershipRequest), global::Gossip.MembershipRequest.Parser, new[]{ "SelfInformation", "Known" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.MembershipResponse), global::Gossip.MembershipResponse.Parser, new[]{ "Alive", "Dead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Member), global::Gossip.Member.Parser, new[]{ "Endpoint", "Metadata", "PkiId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Empty), global::Gossip.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.RemoteStateRequest), global::Gossip.RemoteStateRequest.Parser, new[]{ "StartSeqNum", "EndSeqNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.RemoteStateResponse), global::Gossip.RemoteStateResponse.Parser, new[]{ "Payloads" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.RemotePvtDataRequest), global::Gossip.RemotePvtDataRequest.Parser, new[]{ "Digests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PvtDataDigest), global::Gossip.PvtDataDigest.Parser, new[]{ "TxId", "Namespace", "Collection", "BlockSeq", "SeqInBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.RemotePvtDataResponse), global::Gossip.RemotePvtDataResponse.Parser, new[]{ "Elements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PvtDataElement), global::Gossip.PvtDataElement.Parser, new[]{ "Digest", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.PvtDataPayload), global::Gossip.PvtDataPayload.Parser, new[]{ "TxSeqInBlock", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Acknowledgement), global::Gossip.Acknowledgement.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gossip.Chaincode), global::Gossip.Chaincode.Parser, new[]{ "Name", "Version", "Metadata" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PullMsgType {
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("BLOCK_MSG")] BlockMsg = 1,
    [pbr::OriginalName("IDENTITY_MSG")] IdentityMsg = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Envelope contains a marshalled
  /// GossipMessage and a signature over it.
  /// It may also contain a SecretEnvelope
  /// which is a marshalled Secret
  /// </summary>
  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      payload_ = other.payload_;
      signature_ = other.signature_;
      secretEnvelope_ = other.secretEnvelope_ != null ? other.secretEnvelope_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret_envelope" field.</summary>
    public const int SecretEnvelopeFieldNumber = 3;
    private global::Gossip.SecretEnvelope secretEnvelope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.SecretEnvelope SecretEnvelope {
      get { return secretEnvelope_; }
      set {
        secretEnvelope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Signature != other.Signature) return false;
      if (!object.Equals(SecretEnvelope, other.SecretEnvelope)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (secretEnvelope_ != null) hash ^= SecretEnvelope.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (secretEnvelope_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SecretEnvelope);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (secretEnvelope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecretEnvelope);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.secretEnvelope_ != null) {
        if (secretEnvelope_ == null) {
          secretEnvelope_ = new global::Gossip.SecretEnvelope();
        }
        SecretEnvelope.MergeFrom(other.SecretEnvelope);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
          case 26: {
            if (secretEnvelope_ == null) {
              secretEnvelope_ = new global::Gossip.SecretEnvelope();
            }
            input.ReadMessage(secretEnvelope_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SecretEnvelope is a marshalled Secret
  /// and a signature over it.
  /// The signature should be validated by the peer
  /// that signed the Envelope the SecretEnvelope
  /// came with
  /// </summary>
  public sealed partial class SecretEnvelope : pb::IMessage<SecretEnvelope> {
    private static readonly pb::MessageParser<SecretEnvelope> _parser = new pb::MessageParser<SecretEnvelope>(() => new SecretEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecretEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecretEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecretEnvelope(SecretEnvelope other) : this() {
      payload_ = other.payload_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecretEnvelope Clone() {
      return new SecretEnvelope(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecretEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecretEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecretEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Secret is an entity that might be omitted
  /// from an Envelope when the remote peer that is receiving
  /// the Envelope shouldn't know the secret's content.
  /// </summary>
  public sealed partial class Secret : pb::IMessage<Secret> {
    private static readonly pb::MessageParser<Secret> _parser = new pb::MessageParser<Secret>(() => new Secret());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Secret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Secret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Secret(Secret other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.InternalEndpoint:
          InternalEndpoint = other.InternalEndpoint;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Secret Clone() {
      return new Secret(this);
    }

    /// <summary>Field number for the "internalEndpoint" field.</summary>
    public const int InternalEndpointFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalEndpoint {
      get { return contentCase_ == ContentOneofCase.InternalEndpoint ? (string) content_ : ""; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        contentCase_ = ContentOneofCase.InternalEndpoint;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      InternalEndpoint = 1,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Secret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Secret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InternalEndpoint != other.InternalEndpoint) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.InternalEndpoint) hash ^= InternalEndpoint.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contentCase_ == ContentOneofCase.InternalEndpoint) {
        output.WriteRawTag(10);
        output.WriteString(InternalEndpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.InternalEndpoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalEndpoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Secret other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.InternalEndpoint:
          InternalEndpoint = other.InternalEndpoint;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InternalEndpoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GossipMessage defines the message sent in a gossip network
  /// </summary>
  public sealed partial class GossipMessage : pb::IMessage<GossipMessage> {
    private static readonly pb::MessageParser<GossipMessage> _parser = new pb::MessageParser<GossipMessage>(() => new GossipMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GossipMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipMessage(GossipMessage other) : this() {
      nonce_ = other.nonce_;
      channel_ = other.channel_;
      tag_ = other.tag_;
      switch (other.ContentCase) {
        case ContentOneofCase.AliveMsg:
          AliveMsg = other.AliveMsg.Clone();
          break;
        case ContentOneofCase.MemReq:
          MemReq = other.MemReq.Clone();
          break;
        case ContentOneofCase.MemRes:
          MemRes = other.MemRes.Clone();
          break;
        case ContentOneofCase.DataMsg:
          DataMsg = other.DataMsg.Clone();
          break;
        case ContentOneofCase.Hello:
          Hello = other.Hello.Clone();
          break;
        case ContentOneofCase.DataDig:
          DataDig = other.DataDig.Clone();
          break;
        case ContentOneofCase.DataReq:
          DataReq = other.DataReq.Clone();
          break;
        case ContentOneofCase.DataUpdate:
          DataUpdate = other.DataUpdate.Clone();
          break;
        case ContentOneofCase.Empty:
          Empty = other.Empty.Clone();
          break;
        case ContentOneofCase.Conn:
          Conn = other.Conn.Clone();
          break;
        case ContentOneofCase.StateInfo:
          StateInfo = other.StateInfo.Clone();
          break;
        case ContentOneofCase.StateSnapshot:
          StateSnapshot = other.StateSnapshot.Clone();
          break;
        case ContentOneofCase.StateInfoPullReq:
          StateInfoPullReq = other.StateInfoPullReq.Clone();
          break;
        case ContentOneofCase.StateRequest:
          StateRequest = other.StateRequest.Clone();
          break;
        case ContentOneofCase.StateResponse:
          StateResponse = other.StateResponse.Clone();
          break;
        case ContentOneofCase.LeadershipMsg:
          LeadershipMsg = other.LeadershipMsg.Clone();
          break;
        case ContentOneofCase.PeerIdentity:
          PeerIdentity = other.PeerIdentity.Clone();
          break;
        case ContentOneofCase.Ack:
          Ack = other.Ack.Clone();
          break;
        case ContentOneofCase.PrivateReq:
          PrivateReq = other.PrivateReq.Clone();
          break;
        case ContentOneofCase.PrivateRes:
          PrivateRes = other.PrivateRes.Clone();
          break;
        case ContentOneofCase.PrivateData:
          PrivateData = other.PrivateData.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipMessage Clone() {
      return new GossipMessage(this);
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private ulong nonce_;
    /// <summary>
    /// used mainly for testing, but will might be used in the future
    /// for ensuring message delivery by acking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private pb::ByteString channel_ = pb::ByteString.Empty;
    /// <summary>
    /// The channel of the message.
    /// Some GossipMessages may set this to nil, because
    /// they are cross-channels but some may not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private global::Gossip.GossipMessage.Types.Tag tag_ = 0;
    /// <summary>
    /// determines to which peers it is allowed
    /// to forward the message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.GossipMessage.Types.Tag Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "alive_msg" field.</summary>
    public const int AliveMsgFieldNumber = 5;
    /// <summary>
    /// Membership
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.AliveMessage AliveMsg {
      get { return contentCase_ == ContentOneofCase.AliveMsg ? (global::Gossip.AliveMessage) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.AliveMsg;
      }
    }

    /// <summary>Field number for the "mem_req" field.</summary>
    public const int MemReqFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.MembershipRequest MemReq {
      get { return contentCase_ == ContentOneofCase.MemReq ? (global::Gossip.MembershipRequest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.MemReq;
      }
    }

    /// <summary>Field number for the "mem_res" field.</summary>
    public const int MemResFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.MembershipResponse MemRes {
      get { return contentCase_ == ContentOneofCase.MemRes ? (global::Gossip.MembershipResponse) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.MemRes;
      }
    }

    /// <summary>Field number for the "data_msg" field.</summary>
    public const int DataMsgFieldNumber = 8;
    /// <summary>
    /// Contains a ledger block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.DataMessage DataMsg {
      get { return contentCase_ == ContentOneofCase.DataMsg ? (global::Gossip.DataMessage) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.DataMsg;
      }
    }

    /// <summary>Field number for the "hello" field.</summary>
    public const int HelloFieldNumber = 9;
    /// <summary>
    /// Used for push&amp;pull
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.GossipHello Hello {
      get { return contentCase_ == ContentOneofCase.Hello ? (global::Gossip.GossipHello) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Hello;
      }
    }

    /// <summary>Field number for the "data_dig" field.</summary>
    public const int DataDigFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.DataDigest DataDig {
      get { return contentCase_ == ContentOneofCase.DataDig ? (global::Gossip.DataDigest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.DataDig;
      }
    }

    /// <summary>Field number for the "data_req" field.</summary>
    public const int DataReqFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.DataRequest DataReq {
      get { return contentCase_ == ContentOneofCase.DataReq ? (global::Gossip.DataRequest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.DataReq;
      }
    }

    /// <summary>Field number for the "data_update" field.</summary>
    public const int DataUpdateFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.DataUpdate DataUpdate {
      get { return contentCase_ == ContentOneofCase.DataUpdate ? (global::Gossip.DataUpdate) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.DataUpdate;
      }
    }

    /// <summary>Field number for the "empty" field.</summary>
    public const int EmptyFieldNumber = 13;
    /// <summary>
    /// Empty message, used for pinging
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.Empty Empty {
      get { return contentCase_ == ContentOneofCase.Empty ? (global::Gossip.Empty) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Empty;
      }
    }

    /// <summary>Field number for the "conn" field.</summary>
    public const int ConnFieldNumber = 14;
    /// <summary>
    /// ConnEstablish, used for establishing a connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.ConnEstablish Conn {
      get { return contentCase_ == ContentOneofCase.Conn ? (global::Gossip.ConnEstablish) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Conn;
      }
    }

    /// <summary>Field number for the "state_info" field.</summary>
    public const int StateInfoFieldNumber = 15;
    /// <summary>
    /// Used for relaying information
    /// about state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.StateInfo StateInfo {
      get { return contentCase_ == ContentOneofCase.StateInfo ? (global::Gossip.StateInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.StateInfo;
      }
    }

    /// <summary>Field number for the "state_snapshot" field.</summary>
    public const int StateSnapshotFieldNumber = 16;
    /// <summary>
    /// Used for sending sets of StateInfo messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.StateInfoSnapshot StateSnapshot {
      get { return contentCase_ == ContentOneofCase.StateSnapshot ? (global::Gossip.StateInfoSnapshot) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.StateSnapshot;
      }
    }

    /// <summary>Field number for the "state_info_pull_req" field.</summary>
    public const int StateInfoPullReqFieldNumber = 17;
    /// <summary>
    /// Used for asking for StateInfoSnapshots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.StateInfoPullRequest StateInfoPullReq {
      get { return contentCase_ == ContentOneofCase.StateInfoPullReq ? (global::Gossip.StateInfoPullRequest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.StateInfoPullReq;
      }
    }

    /// <summary>Field number for the "state_request" field.</summary>
    public const int StateRequestFieldNumber = 18;
    /// <summary>
    ///  Used to ask from a remote peer a set of blocks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.RemoteStateRequest StateRequest {
      get { return contentCase_ == ContentOneofCase.StateRequest ? (global::Gossip.RemoteStateRequest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.StateRequest;
      }
    }

    /// <summary>Field number for the "state_response" field.</summary>
    public const int StateResponseFieldNumber = 19;
    /// <summary>
    /// Used to send a set of blocks to a remote peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.RemoteStateResponse StateResponse {
      get { return contentCase_ == ContentOneofCase.StateResponse ? (global::Gossip.RemoteStateResponse) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.StateResponse;
      }
    }

    /// <summary>Field number for the "leadership_msg" field.</summary>
    public const int LeadershipMsgFieldNumber = 20;
    /// <summary>
    /// Used to indicate intent of peer to become leader
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.LeadershipMessage LeadershipMsg {
      get { return contentCase_ == ContentOneofCase.LeadershipMsg ? (global::Gossip.LeadershipMessage) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LeadershipMsg;
      }
    }

    /// <summary>Field number for the "peer_identity" field.</summary>
    public const int PeerIdentityFieldNumber = 21;
    /// <summary>
    /// Used to learn of a peer's certificate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PeerIdentity PeerIdentity {
      get { return contentCase_ == ContentOneofCase.PeerIdentity ? (global::Gossip.PeerIdentity) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.PeerIdentity;
      }
    }

    /// <summary>Field number for the "ack" field.</summary>
    public const int AckFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.Acknowledgement Ack {
      get { return contentCase_ == ContentOneofCase.Ack ? (global::Gossip.Acknowledgement) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Ack;
      }
    }

    /// <summary>Field number for the "privateReq" field.</summary>
    public const int PrivateReqFieldNumber = 23;
    /// <summary>
    /// Used to request private data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.RemotePvtDataRequest PrivateReq {
      get { return contentCase_ == ContentOneofCase.PrivateReq ? (global::Gossip.RemotePvtDataRequest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.PrivateReq;
      }
    }

    /// <summary>Field number for the "privateRes" field.</summary>
    public const int PrivateResFieldNumber = 24;
    /// <summary>
    /// Used to respond to private data requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.RemotePvtDataResponse PrivateRes {
      get { return contentCase_ == ContentOneofCase.PrivateRes ? (global::Gossip.RemotePvtDataResponse) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.PrivateRes;
      }
    }

    /// <summary>Field number for the "private_data" field.</summary>
    public const int PrivateDataFieldNumber = 25;
    /// <summary>
    /// Encapsulates private data used to distribute
    /// private rwset after the endorsement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PrivateDataMessage PrivateData {
      get { return contentCase_ == ContentOneofCase.PrivateData ? (global::Gossip.PrivateDataMessage) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.PrivateData;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      AliveMsg = 5,
      MemReq = 6,
      MemRes = 7,
      DataMsg = 8,
      Hello = 9,
      DataDig = 10,
      DataReq = 11,
      DataUpdate = 12,
      Empty = 13,
      Conn = 14,
      StateInfo = 15,
      StateSnapshot = 16,
      StateInfoPullReq = 17,
      StateRequest = 18,
      StateResponse = 19,
      LeadershipMsg = 20,
      PeerIdentity = 21,
      Ack = 22,
      PrivateReq = 23,
      PrivateRes = 24,
      PrivateData = 25,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GossipMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GossipMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (Channel != other.Channel) return false;
      if (Tag != other.Tag) return false;
      if (!object.Equals(AliveMsg, other.AliveMsg)) return false;
      if (!object.Equals(MemReq, other.MemReq)) return false;
      if (!object.Equals(MemRes, other.MemRes)) return false;
      if (!object.Equals(DataMsg, other.DataMsg)) return false;
      if (!object.Equals(Hello, other.Hello)) return false;
      if (!object.Equals(DataDig, other.DataDig)) return false;
      if (!object.Equals(DataReq, other.DataReq)) return false;
      if (!object.Equals(DataUpdate, other.DataUpdate)) return false;
      if (!object.Equals(Empty, other.Empty)) return false;
      if (!object.Equals(Conn, other.Conn)) return false;
      if (!object.Equals(StateInfo, other.StateInfo)) return false;
      if (!object.Equals(StateSnapshot, other.StateSnapshot)) return false;
      if (!object.Equals(StateInfoPullReq, other.StateInfoPullReq)) return false;
      if (!object.Equals(StateRequest, other.StateRequest)) return false;
      if (!object.Equals(StateResponse, other.StateResponse)) return false;
      if (!object.Equals(LeadershipMsg, other.LeadershipMsg)) return false;
      if (!object.Equals(PeerIdentity, other.PeerIdentity)) return false;
      if (!object.Equals(Ack, other.Ack)) return false;
      if (!object.Equals(PrivateReq, other.PrivateReq)) return false;
      if (!object.Equals(PrivateRes, other.PrivateRes)) return false;
      if (!object.Equals(PrivateData, other.PrivateData)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (contentCase_ == ContentOneofCase.AliveMsg) hash ^= AliveMsg.GetHashCode();
      if (contentCase_ == ContentOneofCase.MemReq) hash ^= MemReq.GetHashCode();
      if (contentCase_ == ContentOneofCase.MemRes) hash ^= MemRes.GetHashCode();
      if (contentCase_ == ContentOneofCase.DataMsg) hash ^= DataMsg.GetHashCode();
      if (contentCase_ == ContentOneofCase.Hello) hash ^= Hello.GetHashCode();
      if (contentCase_ == ContentOneofCase.DataDig) hash ^= DataDig.GetHashCode();
      if (contentCase_ == ContentOneofCase.DataReq) hash ^= DataReq.GetHashCode();
      if (contentCase_ == ContentOneofCase.DataUpdate) hash ^= DataUpdate.GetHashCode();
      if (contentCase_ == ContentOneofCase.Empty) hash ^= Empty.GetHashCode();
      if (contentCase_ == ContentOneofCase.Conn) hash ^= Conn.GetHashCode();
      if (contentCase_ == ContentOneofCase.StateInfo) hash ^= StateInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.StateSnapshot) hash ^= StateSnapshot.GetHashCode();
      if (contentCase_ == ContentOneofCase.StateInfoPullReq) hash ^= StateInfoPullReq.GetHashCode();
      if (contentCase_ == ContentOneofCase.StateRequest) hash ^= StateRequest.GetHashCode();
      if (contentCase_ == ContentOneofCase.StateResponse) hash ^= StateResponse.GetHashCode();
      if (contentCase_ == ContentOneofCase.LeadershipMsg) hash ^= LeadershipMsg.GetHashCode();
      if (contentCase_ == ContentOneofCase.PeerIdentity) hash ^= PeerIdentity.GetHashCode();
      if (contentCase_ == ContentOneofCase.Ack) hash ^= Ack.GetHashCode();
      if (contentCase_ == ContentOneofCase.PrivateReq) hash ^= PrivateReq.GetHashCode();
      if (contentCase_ == ContentOneofCase.PrivateRes) hash ^= PrivateRes.GetHashCode();
      if (contentCase_ == ContentOneofCase.PrivateData) hash ^= PrivateData.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Nonce);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Channel);
      }
      if (Tag != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Tag);
      }
      if (contentCase_ == ContentOneofCase.AliveMsg) {
        output.WriteRawTag(42);
        output.WriteMessage(AliveMsg);
      }
      if (contentCase_ == ContentOneofCase.MemReq) {
        output.WriteRawTag(50);
        output.WriteMessage(MemReq);
      }
      if (contentCase_ == ContentOneofCase.MemRes) {
        output.WriteRawTag(58);
        output.WriteMessage(MemRes);
      }
      if (contentCase_ == ContentOneofCase.DataMsg) {
        output.WriteRawTag(66);
        output.WriteMessage(DataMsg);
      }
      if (contentCase_ == ContentOneofCase.Hello) {
        output.WriteRawTag(74);
        output.WriteMessage(Hello);
      }
      if (contentCase_ == ContentOneofCase.DataDig) {
        output.WriteRawTag(82);
        output.WriteMessage(DataDig);
      }
      if (contentCase_ == ContentOneofCase.DataReq) {
        output.WriteRawTag(90);
        output.WriteMessage(DataReq);
      }
      if (contentCase_ == ContentOneofCase.DataUpdate) {
        output.WriteRawTag(98);
        output.WriteMessage(DataUpdate);
      }
      if (contentCase_ == ContentOneofCase.Empty) {
        output.WriteRawTag(106);
        output.WriteMessage(Empty);
      }
      if (contentCase_ == ContentOneofCase.Conn) {
        output.WriteRawTag(114);
        output.WriteMessage(Conn);
      }
      if (contentCase_ == ContentOneofCase.StateInfo) {
        output.WriteRawTag(122);
        output.WriteMessage(StateInfo);
      }
      if (contentCase_ == ContentOneofCase.StateSnapshot) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(StateSnapshot);
      }
      if (contentCase_ == ContentOneofCase.StateInfoPullReq) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StateInfoPullReq);
      }
      if (contentCase_ == ContentOneofCase.StateRequest) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(StateRequest);
      }
      if (contentCase_ == ContentOneofCase.StateResponse) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(StateResponse);
      }
      if (contentCase_ == ContentOneofCase.LeadershipMsg) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LeadershipMsg);
      }
      if (contentCase_ == ContentOneofCase.PeerIdentity) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(PeerIdentity);
      }
      if (contentCase_ == ContentOneofCase.Ack) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Ack);
      }
      if (contentCase_ == ContentOneofCase.PrivateReq) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PrivateReq);
      }
      if (contentCase_ == ContentOneofCase.PrivateRes) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(PrivateRes);
      }
      if (contentCase_ == ContentOneofCase.PrivateData) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PrivateData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Channel);
      }
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tag);
      }
      if (contentCase_ == ContentOneofCase.AliveMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AliveMsg);
      }
      if (contentCase_ == ContentOneofCase.MemReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemReq);
      }
      if (contentCase_ == ContentOneofCase.MemRes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemRes);
      }
      if (contentCase_ == ContentOneofCase.DataMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataMsg);
      }
      if (contentCase_ == ContentOneofCase.Hello) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hello);
      }
      if (contentCase_ == ContentOneofCase.DataDig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataDig);
      }
      if (contentCase_ == ContentOneofCase.DataReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataReq);
      }
      if (contentCase_ == ContentOneofCase.DataUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataUpdate);
      }
      if (contentCase_ == ContentOneofCase.Empty) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Empty);
      }
      if (contentCase_ == ContentOneofCase.Conn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conn);
      }
      if (contentCase_ == ContentOneofCase.StateInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateInfo);
      }
      if (contentCase_ == ContentOneofCase.StateSnapshot) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateSnapshot);
      }
      if (contentCase_ == ContentOneofCase.StateInfoPullReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateInfoPullReq);
      }
      if (contentCase_ == ContentOneofCase.StateRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateRequest);
      }
      if (contentCase_ == ContentOneofCase.StateResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateResponse);
      }
      if (contentCase_ == ContentOneofCase.LeadershipMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeadershipMsg);
      }
      if (contentCase_ == ContentOneofCase.PeerIdentity) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PeerIdentity);
      }
      if (contentCase_ == ContentOneofCase.Ack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ack);
      }
      if (contentCase_ == ContentOneofCase.PrivateReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrivateReq);
      }
      if (contentCase_ == ContentOneofCase.PrivateRes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrivateRes);
      }
      if (contentCase_ == ContentOneofCase.PrivateData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrivateData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GossipMessage other) {
      if (other == null) {
        return;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.AliveMsg:
          if (AliveMsg == null) {
            AliveMsg = new global::Gossip.AliveMessage();
          }
          AliveMsg.MergeFrom(other.AliveMsg);
          break;
        case ContentOneofCase.MemReq:
          if (MemReq == null) {
            MemReq = new global::Gossip.MembershipRequest();
          }
          MemReq.MergeFrom(other.MemReq);
          break;
        case ContentOneofCase.MemRes:
          if (MemRes == null) {
            MemRes = new global::Gossip.MembershipResponse();
          }
          MemRes.MergeFrom(other.MemRes);
          break;
        case ContentOneofCase.DataMsg:
          if (DataMsg == null) {
            DataMsg = new global::Gossip.DataMessage();
          }
          DataMsg.MergeFrom(other.DataMsg);
          break;
        case ContentOneofCase.Hello:
          if (Hello == null) {
            Hello = new global::Gossip.GossipHello();
          }
          Hello.MergeFrom(other.Hello);
          break;
        case ContentOneofCase.DataDig:
          if (DataDig == null) {
            DataDig = new global::Gossip.DataDigest();
          }
          DataDig.MergeFrom(other.DataDig);
          break;
        case ContentOneofCase.DataReq:
          if (DataReq == null) {
            DataReq = new global::Gossip.DataRequest();
          }
          DataReq.MergeFrom(other.DataReq);
          break;
        case ContentOneofCase.DataUpdate:
          if (DataUpdate == null) {
            DataUpdate = new global::Gossip.DataUpdate();
          }
          DataUpdate.MergeFrom(other.DataUpdate);
          break;
        case ContentOneofCase.Empty:
          if (Empty == null) {
            Empty = new global::Gossip.Empty();
          }
          Empty.MergeFrom(other.Empty);
          break;
        case ContentOneofCase.Conn:
          if (Conn == null) {
            Conn = new global::Gossip.ConnEstablish();
          }
          Conn.MergeFrom(other.Conn);
          break;
        case ContentOneofCase.StateInfo:
          if (StateInfo == null) {
            StateInfo = new global::Gossip.StateInfo();
          }
          StateInfo.MergeFrom(other.StateInfo);
          break;
        case ContentOneofCase.StateSnapshot:
          if (StateSnapshot == null) {
            StateSnapshot = new global::Gossip.StateInfoSnapshot();
          }
          StateSnapshot.MergeFrom(other.StateSnapshot);
          break;
        case ContentOneofCase.StateInfoPullReq:
          if (StateInfoPullReq == null) {
            StateInfoPullReq = new global::Gossip.StateInfoPullRequest();
          }
          StateInfoPullReq.MergeFrom(other.StateInfoPullReq);
          break;
        case ContentOneofCase.StateRequest:
          if (StateRequest == null) {
            StateRequest = new global::Gossip.RemoteStateRequest();
          }
          StateRequest.MergeFrom(other.StateRequest);
          break;
        case ContentOneofCase.StateResponse:
          if (StateResponse == null) {
            StateResponse = new global::Gossip.RemoteStateResponse();
          }
          StateResponse.MergeFrom(other.StateResponse);
          break;
        case ContentOneofCase.LeadershipMsg:
          if (LeadershipMsg == null) {
            LeadershipMsg = new global::Gossip.LeadershipMessage();
          }
          LeadershipMsg.MergeFrom(other.LeadershipMsg);
          break;
        case ContentOneofCase.PeerIdentity:
          if (PeerIdentity == null) {
            PeerIdentity = new global::Gossip.PeerIdentity();
          }
          PeerIdentity.MergeFrom(other.PeerIdentity);
          break;
        case ContentOneofCase.Ack:
          if (Ack == null) {
            Ack = new global::Gossip.Acknowledgement();
          }
          Ack.MergeFrom(other.Ack);
          break;
        case ContentOneofCase.PrivateReq:
          if (PrivateReq == null) {
            PrivateReq = new global::Gossip.RemotePvtDataRequest();
          }
          PrivateReq.MergeFrom(other.PrivateReq);
          break;
        case ContentOneofCase.PrivateRes:
          if (PrivateRes == null) {
            PrivateRes = new global::Gossip.RemotePvtDataResponse();
          }
          PrivateRes.MergeFrom(other.PrivateRes);
          break;
        case ContentOneofCase.PrivateData:
          if (PrivateData == null) {
            PrivateData = new global::Gossip.PrivateDataMessage();
          }
          PrivateData.MergeFrom(other.PrivateData);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 18: {
            Channel = input.ReadBytes();
            break;
          }
          case 24: {
            tag_ = (global::Gossip.GossipMessage.Types.Tag) input.ReadEnum();
            break;
          }
          case 42: {
            global::Gossip.AliveMessage subBuilder = new global::Gossip.AliveMessage();
            if (contentCase_ == ContentOneofCase.AliveMsg) {
              subBuilder.MergeFrom(AliveMsg);
            }
            input.ReadMessage(subBuilder);
            AliveMsg = subBuilder;
            break;
          }
          case 50: {
            global::Gossip.MembershipRequest subBuilder = new global::Gossip.MembershipRequest();
            if (contentCase_ == ContentOneofCase.MemReq) {
              subBuilder.MergeFrom(MemReq);
            }
            input.ReadMessage(subBuilder);
            MemReq = subBuilder;
            break;
          }
          case 58: {
            global::Gossip.MembershipResponse subBuilder = new global::Gossip.MembershipResponse();
            if (contentCase_ == ContentOneofCase.MemRes) {
              subBuilder.MergeFrom(MemRes);
            }
            input.ReadMessage(subBuilder);
            MemRes = subBuilder;
            break;
          }
          case 66: {
            global::Gossip.DataMessage subBuilder = new global::Gossip.DataMessage();
            if (contentCase_ == ContentOneofCase.DataMsg) {
              subBuilder.MergeFrom(DataMsg);
            }
            input.ReadMessage(subBuilder);
            DataMsg = subBuilder;
            break;
          }
          case 74: {
            global::Gossip.GossipHello subBuilder = new global::Gossip.GossipHello();
            if (contentCase_ == ContentOneofCase.Hello) {
              subBuilder.MergeFrom(Hello);
            }
            input.ReadMessage(subBuilder);
            Hello = subBuilder;
            break;
          }
          case 82: {
            global::Gossip.DataDigest subBuilder = new global::Gossip.DataDigest();
            if (contentCase_ == ContentOneofCase.DataDig) {
              subBuilder.MergeFrom(DataDig);
            }
            input.ReadMessage(subBuilder);
            DataDig = subBuilder;
            break;
          }
          case 90: {
            global::Gossip.DataRequest subBuilder = new global::Gossip.DataRequest();
            if (contentCase_ == ContentOneofCase.DataReq) {
              subBuilder.MergeFrom(DataReq);
            }
            input.ReadMessage(subBuilder);
            DataReq = subBuilder;
            break;
          }
          case 98: {
            global::Gossip.DataUpdate subBuilder = new global::Gossip.DataUpdate();
            if (contentCase_ == ContentOneofCase.DataUpdate) {
              subBuilder.MergeFrom(DataUpdate);
            }
            input.ReadMessage(subBuilder);
            DataUpdate = subBuilder;
            break;
          }
          case 106: {
            global::Gossip.Empty subBuilder = new global::Gossip.Empty();
            if (contentCase_ == ContentOneofCase.Empty) {
              subBuilder.MergeFrom(Empty);
            }
            input.ReadMessage(subBuilder);
            Empty = subBuilder;
            break;
          }
          case 114: {
            global::Gossip.ConnEstablish subBuilder = new global::Gossip.ConnEstablish();
            if (contentCase_ == ContentOneofCase.Conn) {
              subBuilder.MergeFrom(Conn);
            }
            input.ReadMessage(subBuilder);
            Conn = subBuilder;
            break;
          }
          case 122: {
            global::Gossip.StateInfo subBuilder = new global::Gossip.StateInfo();
            if (contentCase_ == ContentOneofCase.StateInfo) {
              subBuilder.MergeFrom(StateInfo);
            }
            input.ReadMessage(subBuilder);
            StateInfo = subBuilder;
            break;
          }
          case 130: {
            global::Gossip.StateInfoSnapshot subBuilder = new global::Gossip.StateInfoSnapshot();
            if (contentCase_ == ContentOneofCase.StateSnapshot) {
              subBuilder.MergeFrom(StateSnapshot);
            }
            input.ReadMessage(subBuilder);
            StateSnapshot = subBuilder;
            break;
          }
          case 138: {
            global::Gossip.StateInfoPullRequest subBuilder = new global::Gossip.StateInfoPullRequest();
            if (contentCase_ == ContentOneofCase.StateInfoPullReq) {
              subBuilder.MergeFrom(StateInfoPullReq);
            }
            input.ReadMessage(subBuilder);
            StateInfoPullReq = subBuilder;
            break;
          }
          case 146: {
            global::Gossip.RemoteStateRequest subBuilder = new global::Gossip.RemoteStateRequest();
            if (contentCase_ == ContentOneofCase.StateRequest) {
              subBuilder.MergeFrom(StateRequest);
            }
            input.ReadMessage(subBuilder);
            StateRequest = subBuilder;
            break;
          }
          case 154: {
            global::Gossip.RemoteStateResponse subBuilder = new global::Gossip.RemoteStateResponse();
            if (contentCase_ == ContentOneofCase.StateResponse) {
              subBuilder.MergeFrom(StateResponse);
            }
            input.ReadMessage(subBuilder);
            StateResponse = subBuilder;
            break;
          }
          case 162: {
            global::Gossip.LeadershipMessage subBuilder = new global::Gossip.LeadershipMessage();
            if (contentCase_ == ContentOneofCase.LeadershipMsg) {
              subBuilder.MergeFrom(LeadershipMsg);
            }
            input.ReadMessage(subBuilder);
            LeadershipMsg = subBuilder;
            break;
          }
          case 170: {
            global::Gossip.PeerIdentity subBuilder = new global::Gossip.PeerIdentity();
            if (contentCase_ == ContentOneofCase.PeerIdentity) {
              subBuilder.MergeFrom(PeerIdentity);
            }
            input.ReadMessage(subBuilder);
            PeerIdentity = subBuilder;
            break;
          }
          case 178: {
            global::Gossip.Acknowledgement subBuilder = new global::Gossip.Acknowledgement();
            if (contentCase_ == ContentOneofCase.Ack) {
              subBuilder.MergeFrom(Ack);
            }
            input.ReadMessage(subBuilder);
            Ack = subBuilder;
            break;
          }
          case 186: {
            global::Gossip.RemotePvtDataRequest subBuilder = new global::Gossip.RemotePvtDataRequest();
            if (contentCase_ == ContentOneofCase.PrivateReq) {
              subBuilder.MergeFrom(PrivateReq);
            }
            input.ReadMessage(subBuilder);
            PrivateReq = subBuilder;
            break;
          }
          case 194: {
            global::Gossip.RemotePvtDataResponse subBuilder = new global::Gossip.RemotePvtDataResponse();
            if (contentCase_ == ContentOneofCase.PrivateRes) {
              subBuilder.MergeFrom(PrivateRes);
            }
            input.ReadMessage(subBuilder);
            PrivateRes = subBuilder;
            break;
          }
          case 202: {
            global::Gossip.PrivateDataMessage subBuilder = new global::Gossip.PrivateDataMessage();
            if (contentCase_ == ContentOneofCase.PrivateData) {
              subBuilder.MergeFrom(PrivateData);
            }
            input.ReadMessage(subBuilder);
            PrivateData = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GossipMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Tag {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("EMPTY")] Empty = 1,
        [pbr::OriginalName("ORG_ONLY")] OrgOnly = 2,
        [pbr::OriginalName("CHAN_ONLY")] ChanOnly = 3,
        [pbr::OriginalName("CHAN_AND_ORG")] ChanAndOrg = 4,
        [pbr::OriginalName("CHAN_OR_ORG")] ChanOrOrg = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// StateInfo is used for a peer to relay its state information
  /// to other peers
  /// </summary>
  public sealed partial class StateInfo : pb::IMessage<StateInfo> {
    private static readonly pb::MessageParser<StateInfo> _parser = new pb::MessageParser<StateInfo>(() => new StateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfo(StateInfo other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      pkiId_ = other.pkiId_;
      channelMAC_ = other.channelMAC_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfo Clone() {
      return new StateInfo(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Gossip.PeerTime timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PeerTime Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "pki_id" field.</summary>
    public const int PkiIdFieldNumber = 3;
    private pb::ByteString pkiId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PkiId {
      get { return pkiId_; }
      set {
        pkiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_MAC" field.</summary>
    public const int ChannelMACFieldNumber = 4;
    private pb::ByteString channelMAC_ = pb::ByteString.Empty;
    /// <summary>
    /// channel_MAC is an authentication code that proves
    /// that the peer that sent this message knows
    /// the name of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChannelMAC {
      get { return channelMAC_; }
      set {
        channelMAC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 5;
    private global::Gossip.Properties properties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.Properties Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (PkiId != other.PkiId) return false;
      if (ChannelMAC != other.ChannelMAC) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (PkiId.Length != 0) hash ^= PkiId.GetHashCode();
      if (ChannelMAC.Length != 0) hash ^= ChannelMAC.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (PkiId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PkiId);
      }
      if (ChannelMAC.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ChannelMAC);
      }
      if (properties_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Properties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (PkiId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkiId);
      }
      if (ChannelMAC.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChannelMAC);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateInfo other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Gossip.PeerTime();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.PkiId.Length != 0) {
        PkiId = other.PkiId;
      }
      if (other.ChannelMAC.Length != 0) {
        ChannelMAC = other.ChannelMAC;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          properties_ = new global::Gossip.Properties();
        }
        Properties.MergeFrom(other.Properties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (timestamp_ == null) {
              timestamp_ = new global::Gossip.PeerTime();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 26: {
            PkiId = input.ReadBytes();
            break;
          }
          case 34: {
            ChannelMAC = input.ReadBytes();
            break;
          }
          case 42: {
            if (properties_ == null) {
              properties_ = new global::Gossip.Properties();
            }
            input.ReadMessage(properties_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Properties : pb::IMessage<Properties> {
    private static readonly pb::MessageParser<Properties> _parser = new pb::MessageParser<Properties>(() => new Properties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Properties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Properties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Properties(Properties other) : this() {
      ledgerHeight_ = other.ledgerHeight_;
      leftChannel_ = other.leftChannel_;
      chaincodes_ = other.chaincodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Properties Clone() {
      return new Properties(this);
    }

    /// <summary>Field number for the "ledger_height" field.</summary>
    public const int LedgerHeightFieldNumber = 1;
    private ulong ledgerHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LedgerHeight {
      get { return ledgerHeight_; }
      set {
        ledgerHeight_ = value;
      }
    }

    /// <summary>Field number for the "left_channel" field.</summary>
    public const int LeftChannelFieldNumber = 2;
    private bool leftChannel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftChannel {
      get { return leftChannel_; }
      set {
        leftChannel_ = value;
      }
    }

    /// <summary>Field number for the "chaincodes" field.</summary>
    public const int ChaincodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gossip.Chaincode> _repeated_chaincodes_codec
        = pb::FieldCodec.ForMessage(26, global::Gossip.Chaincode.Parser);
    private readonly pbc::RepeatedField<global::Gossip.Chaincode> chaincodes_ = new pbc::RepeatedField<global::Gossip.Chaincode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.Chaincode> Chaincodes {
      get { return chaincodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Properties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Properties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LedgerHeight != other.LedgerHeight) return false;
      if (LeftChannel != other.LeftChannel) return false;
      if(!chaincodes_.Equals(other.chaincodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LedgerHeight != 0UL) hash ^= LedgerHeight.GetHashCode();
      if (LeftChannel != false) hash ^= LeftChannel.GetHashCode();
      hash ^= chaincodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LedgerHeight != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LedgerHeight);
      }
      if (LeftChannel != false) {
        output.WriteRawTag(16);
        output.WriteBool(LeftChannel);
      }
      chaincodes_.WriteTo(output, _repeated_chaincodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LedgerHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LedgerHeight);
      }
      if (LeftChannel != false) {
        size += 1 + 1;
      }
      size += chaincodes_.CalculateSize(_repeated_chaincodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Properties other) {
      if (other == null) {
        return;
      }
      if (other.LedgerHeight != 0UL) {
        LedgerHeight = other.LedgerHeight;
      }
      if (other.LeftChannel != false) {
        LeftChannel = other.LeftChannel;
      }
      chaincodes_.Add(other.chaincodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LedgerHeight = input.ReadUInt64();
            break;
          }
          case 16: {
            LeftChannel = input.ReadBool();
            break;
          }
          case 26: {
            chaincodes_.AddEntriesFrom(input, _repeated_chaincodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// StateInfoSnapshot is an aggregation of StateInfo messages
  /// </summary>
  public sealed partial class StateInfoSnapshot : pb::IMessage<StateInfoSnapshot> {
    private static readonly pb::MessageParser<StateInfoSnapshot> _parser = new pb::MessageParser<StateInfoSnapshot>(() => new StateInfoSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateInfoSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfoSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfoSnapshot(StateInfoSnapshot other) : this() {
      elements_ = other.elements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfoSnapshot Clone() {
      return new StateInfoSnapshot(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gossip.Envelope> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::Gossip.Envelope.Parser);
    private readonly pbc::RepeatedField<global::Gossip.Envelope> elements_ = new pbc::RepeatedField<global::Gossip.Envelope>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.Envelope> Elements {
      get { return elements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateInfoSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateInfoSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elements_.WriteTo(output, _repeated_elements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateInfoSnapshot other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// StateInfoPullRequest is used to fetch a StateInfoSnapshot
  /// from a remote peer
  /// </summary>
  public sealed partial class StateInfoPullRequest : pb::IMessage<StateInfoPullRequest> {
    private static readonly pb::MessageParser<StateInfoPullRequest> _parser = new pb::MessageParser<StateInfoPullRequest>(() => new StateInfoPullRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateInfoPullRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfoPullRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfoPullRequest(StateInfoPullRequest other) : this() {
      channelMAC_ = other.channelMAC_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfoPullRequest Clone() {
      return new StateInfoPullRequest(this);
    }

    /// <summary>Field number for the "channel_MAC" field.</summary>
    public const int ChannelMACFieldNumber = 1;
    private pb::ByteString channelMAC_ = pb::ByteString.Empty;
    /// <summary>
    /// channel_MAC is an authentication code that proves
    /// that the peer that sent this message knows
    /// the name of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChannelMAC {
      get { return channelMAC_; }
      set {
        channelMAC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateInfoPullRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateInfoPullRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelMAC != other.ChannelMAC) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelMAC.Length != 0) hash ^= ChannelMAC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelMAC.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ChannelMAC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelMAC.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChannelMAC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateInfoPullRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChannelMAC.Length != 0) {
        ChannelMAC = other.ChannelMAC;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelMAC = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConnEstablish is the message used for the gossip handshake
  /// Whenever a peer connects to another peer, it handshakes
  /// with it by sending this message that proves its identity
  /// </summary>
  public sealed partial class ConnEstablish : pb::IMessage<ConnEstablish> {
    private static readonly pb::MessageParser<ConnEstablish> _parser = new pb::MessageParser<ConnEstablish>(() => new ConnEstablish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnEstablish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnEstablish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnEstablish(ConnEstablish other) : this() {
      pkiId_ = other.pkiId_;
      identity_ = other.identity_;
      tlsCertHash_ = other.tlsCertHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnEstablish Clone() {
      return new ConnEstablish(this);
    }

    /// <summary>Field number for the "pki_id" field.</summary>
    public const int PkiIdFieldNumber = 1;
    private pb::ByteString pkiId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PkiId {
      get { return pkiId_; }
      set {
        pkiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private pb::ByteString identity_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tls_cert_hash" field.</summary>
    public const int TlsCertHashFieldNumber = 3;
    private pb::ByteString tlsCertHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TlsCertHash {
      get { return tlsCertHash_; }
      set {
        tlsCertHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnEstablish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnEstablish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkiId != other.PkiId) return false;
      if (Identity != other.Identity) return false;
      if (TlsCertHash != other.TlsCertHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkiId.Length != 0) hash ^= PkiId.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (TlsCertHash.Length != 0) hash ^= TlsCertHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkiId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PkiId);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Identity);
      }
      if (TlsCertHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TlsCertHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkiId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkiId);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Identity);
      }
      if (TlsCertHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TlsCertHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnEstablish other) {
      if (other == null) {
        return;
      }
      if (other.PkiId.Length != 0) {
        PkiId = other.PkiId;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.TlsCertHash.Length != 0) {
        TlsCertHash = other.TlsCertHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PkiId = input.ReadBytes();
            break;
          }
          case 18: {
            Identity = input.ReadBytes();
            break;
          }
          case 26: {
            TlsCertHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PeerIdentity defines the identity of the peer
  /// Used to make other peers learn of the identity
  /// of a certain peer
  /// </summary>
  public sealed partial class PeerIdentity : pb::IMessage<PeerIdentity> {
    private static readonly pb::MessageParser<PeerIdentity> _parser = new pb::MessageParser<PeerIdentity>(() => new PeerIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerIdentity(PeerIdentity other) : this() {
      pkiId_ = other.pkiId_;
      cert_ = other.cert_;
      metadata_ = other.metadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerIdentity Clone() {
      return new PeerIdentity(this);
    }

    /// <summary>Field number for the "pki_id" field.</summary>
    public const int PkiIdFieldNumber = 1;
    private pb::ByteString pkiId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PkiId {
      get { return pkiId_; }
      set {
        pkiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cert" field.</summary>
    public const int CertFieldNumber = 2;
    private pb::ByteString cert_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cert {
      get { return cert_; }
      set {
        cert_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkiId != other.PkiId) return false;
      if (Cert != other.Cert) return false;
      if (Metadata != other.Metadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkiId.Length != 0) hash ^= PkiId.GetHashCode();
      if (Cert.Length != 0) hash ^= Cert.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkiId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PkiId);
      }
      if (Cert.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cert);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkiId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkiId);
      }
      if (Cert.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cert);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerIdentity other) {
      if (other == null) {
        return;
      }
      if (other.PkiId.Length != 0) {
        PkiId = other.PkiId;
      }
      if (other.Cert.Length != 0) {
        Cert = other.Cert;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PkiId = input.ReadBytes();
            break;
          }
          case 18: {
            Cert = input.ReadBytes();
            break;
          }
          case 26: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DataRequest is a message used for a peer to request
  /// certain data blocks from a remote peer
  /// </summary>
  public sealed partial class DataRequest : pb::IMessage<DataRequest> {
    private static readonly pb::MessageParser<DataRequest> _parser = new pb::MessageParser<DataRequest>(() => new DataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRequest(DataRequest other) : this() {
      nonce_ = other.nonce_;
      digests_ = other.digests_.Clone();
      msgType_ = other.msgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRequest Clone() {
      return new DataRequest(this);
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private ulong nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "digests" field.</summary>
    public const int DigestsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_digests_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> digests_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Digests {
      get { return digests_; }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private global::Gossip.PullMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PullMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if(!digests_.Equals(other.digests_)) return false;
      if (MsgType != other.MsgType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      hash ^= digests_.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Nonce);
      }
      digests_.WriteTo(output, _repeated_digests_codec);
      if (MsgType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MsgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      size += digests_.CalculateSize(_repeated_digests_codec);
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataRequest other) {
      if (other == null) {
        return;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      digests_.Add(other.digests_);
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 18: {
            digests_.AddEntriesFrom(input, _repeated_digests_codec);
            break;
          }
          case 24: {
            msgType_ = (global::Gossip.PullMsgType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GossipHello is the message that is used for the peer to initiate
  /// a pull round with another peer
  /// </summary>
  public sealed partial class GossipHello : pb::IMessage<GossipHello> {
    private static readonly pb::MessageParser<GossipHello> _parser = new pb::MessageParser<GossipHello>(() => new GossipHello());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GossipHello> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipHello() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipHello(GossipHello other) : this() {
      nonce_ = other.nonce_;
      metadata_ = other.metadata_;
      msgType_ = other.msgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipHello Clone() {
      return new GossipHello(this);
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private ulong nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private global::Gossip.PullMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PullMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GossipHello);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GossipHello other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (Metadata != other.Metadata) return false;
      if (MsgType != other.MsgType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Nonce);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Metadata);
      }
      if (MsgType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MsgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GossipHello other) {
      if (other == null) {
        return;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 18: {
            Metadata = input.ReadBytes();
            break;
          }
          case 24: {
            msgType_ = (global::Gossip.PullMsgType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DataUpdate is the final message in the pull phase
  /// sent from the receiver to the initiator
  /// </summary>
  public sealed partial class DataUpdate : pb::IMessage<DataUpdate> {
    private static readonly pb::MessageParser<DataUpdate> _parser = new pb::MessageParser<DataUpdate>(() => new DataUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataUpdate(DataUpdate other) : this() {
      nonce_ = other.nonce_;
      data_ = other.data_.Clone();
      msgType_ = other.msgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataUpdate Clone() {
      return new DataUpdate(this);
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private ulong nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Gossip.Envelope> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Gossip.Envelope.Parser);
    private readonly pbc::RepeatedField<global::Gossip.Envelope> data_ = new pbc::RepeatedField<global::Gossip.Envelope>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.Envelope> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private global::Gossip.PullMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PullMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if(!data_.Equals(other.data_)) return false;
      if (MsgType != other.MsgType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      hash ^= data_.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Nonce);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (MsgType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MsgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      data_.Add(other.data_);
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 24: {
            msgType_ = (global::Gossip.PullMsgType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DataDigest is the message sent from the receiver peer
  /// to the initator peer and contains the data items it has
  /// </summary>
  public sealed partial class DataDigest : pb::IMessage<DataDigest> {
    private static readonly pb::MessageParser<DataDigest> _parser = new pb::MessageParser<DataDigest>(() => new DataDigest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataDigest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataDigest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataDigest(DataDigest other) : this() {
      nonce_ = other.nonce_;
      digests_ = other.digests_.Clone();
      msgType_ = other.msgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataDigest Clone() {
      return new DataDigest(this);
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private ulong nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "digests" field.</summary>
    public const int DigestsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_digests_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> digests_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// Maybe change this to bitmap later on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Digests {
      get { return digests_; }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private global::Gossip.PullMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PullMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataDigest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataDigest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if(!digests_.Equals(other.digests_)) return false;
      if (MsgType != other.MsgType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      hash ^= digests_.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Nonce);
      }
      digests_.WriteTo(output, _repeated_digests_codec);
      if (MsgType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MsgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      size += digests_.CalculateSize(_repeated_digests_codec);
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataDigest other) {
      if (other == null) {
        return;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      digests_.Add(other.digests_);
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 18: {
            digests_.AddEntriesFrom(input, _repeated_digests_codec);
            break;
          }
          case 24: {
            msgType_ = (global::Gossip.PullMsgType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DataMessage is the message that contains a block
  /// </summary>
  public sealed partial class DataMessage : pb::IMessage<DataMessage> {
    private static readonly pb::MessageParser<DataMessage> _parser = new pb::MessageParser<DataMessage>(() => new DataMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage(DataMessage other) : this() {
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage Clone() {
      return new DataMessage(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Gossip.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataMessage other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Gossip.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Gossip.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PrivateDataMessage message which includes private
  /// data information to distributed once transaction
  /// has been endorsed
  /// </summary>
  public sealed partial class PrivateDataMessage : pb::IMessage<PrivateDataMessage> {
    private static readonly pb::MessageParser<PrivateDataMessage> _parser = new pb::MessageParser<PrivateDataMessage>(() => new PrivateDataMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivateDataMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateDataMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateDataMessage(PrivateDataMessage other) : this() {
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateDataMessage Clone() {
      return new PrivateDataMessage(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Gossip.PrivatePayload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PrivatePayload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrivateDataMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrivateDataMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrivateDataMessage other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Gossip.PrivatePayload();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Gossip.PrivatePayload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Payload contains a block
  /// </summary>
  public sealed partial class Payload : pb::IMessage<Payload> {
    private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload(Payload other) : this() {
      seqNum_ = other.seqNum_;
      data_ = other.data_;
      privateData_ = other.privateData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload Clone() {
      return new Payload(this);
    }

    /// <summary>Field number for the "seq_num" field.</summary>
    public const int SeqNumFieldNumber = 1;
    private ulong seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_data" field.</summary>
    public const int PrivateDataFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_privateData_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> privateData_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> PrivateData {
      get { return privateData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNum != other.SeqNum) return false;
      if (Data != other.Data) return false;
      if(!privateData_.Equals(other.privateData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNum != 0UL) hash ^= SeqNum.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= privateData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SeqNum);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      privateData_.WriteTo(output, _repeated_privateData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeqNum);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += privateData_.CalculateSize(_repeated_privateData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload other) {
      if (other == null) {
        return;
      }
      if (other.SeqNum != 0UL) {
        SeqNum = other.SeqNum;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      privateData_.Add(other.privateData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SeqNum = input.ReadUInt64();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            privateData_.AddEntriesFrom(input, _repeated_privateData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PrivatePayload payload to encapsulate private
  /// data with collection name to enable routing
  /// based on collection partitioning
  /// </summary>
  public sealed partial class PrivatePayload : pb::IMessage<PrivatePayload> {
    private static readonly pb::MessageParser<PrivatePayload> _parser = new pb::MessageParser<PrivatePayload>(() => new PrivatePayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivatePayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivatePayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivatePayload(PrivatePayload other) : this() {
      collectionName_ = other.collectionName_;
      namespace_ = other.namespace_;
      txId_ = other.txId_;
      privateRwset_ = other.privateRwset_;
      privateSimHeight_ = other.privateSimHeight_;
      collectionConfigs_ = other.collectionConfigs_ != null ? other.collectionConfigs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivatePayload Clone() {
      return new PrivatePayload(this);
    }

    /// <summary>Field number for the "collection_name" field.</summary>
    public const int CollectionNameFieldNumber = 1;
    private string collectionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionName {
      get { return collectionName_; }
      set {
        collectionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 3;
    private string txId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_rwset" field.</summary>
    public const int PrivateRwsetFieldNumber = 4;
    private pb::ByteString privateRwset_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateRwset {
      get { return privateRwset_; }
      set {
        privateRwset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_sim_height" field.</summary>
    public const int PrivateSimHeightFieldNumber = 5;
    private ulong privateSimHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PrivateSimHeight {
      get { return privateSimHeight_; }
      set {
        privateSimHeight_ = value;
      }
    }

    /// <summary>Field number for the "collection_configs" field.</summary>
    public const int CollectionConfigsFieldNumber = 6;
    private global::Common.CollectionConfigPackage collectionConfigs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.CollectionConfigPackage CollectionConfigs {
      get { return collectionConfigs_; }
      set {
        collectionConfigs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrivatePayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrivatePayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollectionName != other.CollectionName) return false;
      if (Namespace != other.Namespace) return false;
      if (TxId != other.TxId) return false;
      if (PrivateRwset != other.PrivateRwset) return false;
      if (PrivateSimHeight != other.PrivateSimHeight) return false;
      if (!object.Equals(CollectionConfigs, other.CollectionConfigs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollectionName.Length != 0) hash ^= CollectionName.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      if (PrivateRwset.Length != 0) hash ^= PrivateRwset.GetHashCode();
      if (PrivateSimHeight != 0UL) hash ^= PrivateSimHeight.GetHashCode();
      if (collectionConfigs_ != null) hash ^= CollectionConfigs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollectionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollectionName);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (TxId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TxId);
      }
      if (PrivateRwset.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PrivateRwset);
      }
      if (PrivateSimHeight != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PrivateSimHeight);
      }
      if (collectionConfigs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CollectionConfigs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollectionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionName);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
      }
      if (PrivateRwset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateRwset);
      }
      if (PrivateSimHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PrivateSimHeight);
      }
      if (collectionConfigs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionConfigs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrivatePayload other) {
      if (other == null) {
        return;
      }
      if (other.CollectionName.Length != 0) {
        CollectionName = other.CollectionName;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
      if (other.PrivateRwset.Length != 0) {
        PrivateRwset = other.PrivateRwset;
      }
      if (other.PrivateSimHeight != 0UL) {
        PrivateSimHeight = other.PrivateSimHeight;
      }
      if (other.collectionConfigs_ != null) {
        if (collectionConfigs_ == null) {
          collectionConfigs_ = new global::Common.CollectionConfigPackage();
        }
        CollectionConfigs.MergeFrom(other.CollectionConfigs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CollectionName = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            TxId = input.ReadString();
            break;
          }
          case 34: {
            PrivateRwset = input.ReadBytes();
            break;
          }
          case 40: {
            PrivateSimHeight = input.ReadUInt64();
            break;
          }
          case 50: {
            if (collectionConfigs_ == null) {
              collectionConfigs_ = new global::Common.CollectionConfigPackage();
            }
            input.ReadMessage(collectionConfigs_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AliveMessage is sent to inform remote peers
  /// of a peer's existence and activity
  /// </summary>
  public sealed partial class AliveMessage : pb::IMessage<AliveMessage> {
    private static readonly pb::MessageParser<AliveMessage> _parser = new pb::MessageParser<AliveMessage>(() => new AliveMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AliveMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveMessage(AliveMessage other) : this() {
      membership_ = other.membership_ != null ? other.membership_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      identity_ = other.identity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliveMessage Clone() {
      return new AliveMessage(this);
    }

    /// <summary>Field number for the "membership" field.</summary>
    public const int MembershipFieldNumber = 1;
    private global::Gossip.Member membership_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.Member Membership {
      get { return membership_; }
      set {
        membership_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Gossip.PeerTime timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PeerTime Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 4;
    private pb::ByteString identity_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AliveMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AliveMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Membership, other.Membership)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Identity != other.Identity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (membership_ != null) hash ^= Membership.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (membership_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Membership);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (membership_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Membership);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AliveMessage other) {
      if (other == null) {
        return;
      }
      if (other.membership_ != null) {
        if (membership_ == null) {
          membership_ = new global::Gossip.Member();
        }
        Membership.MergeFrom(other.Membership);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Gossip.PeerTime();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (membership_ == null) {
              membership_ = new global::Gossip.Member();
            }
            input.ReadMessage(membership_);
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              timestamp_ = new global::Gossip.PeerTime();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 34: {
            Identity = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Leadership Message is sent during leader election to inform
  /// remote peers about intent of peer to proclaim itself as leader
  /// </summary>
  public sealed partial class LeadershipMessage : pb::IMessage<LeadershipMessage> {
    private static readonly pb::MessageParser<LeadershipMessage> _parser = new pb::MessageParser<LeadershipMessage>(() => new LeadershipMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeadershipMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeadershipMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeadershipMessage(LeadershipMessage other) : this() {
      pkiId_ = other.pkiId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      isDeclaration_ = other.isDeclaration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeadershipMessage Clone() {
      return new LeadershipMessage(this);
    }

    /// <summary>Field number for the "pki_id" field.</summary>
    public const int PkiIdFieldNumber = 1;
    private pb::ByteString pkiId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PkiId {
      get { return pkiId_; }
      set {
        pkiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Gossip.PeerTime timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PeerTime Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_declaration" field.</summary>
    public const int IsDeclarationFieldNumber = 3;
    private bool isDeclaration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDeclaration {
      get { return isDeclaration_; }
      set {
        isDeclaration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeadershipMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeadershipMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkiId != other.PkiId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (IsDeclaration != other.IsDeclaration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkiId.Length != 0) hash ^= PkiId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (IsDeclaration != false) hash ^= IsDeclaration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkiId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PkiId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (IsDeclaration != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDeclaration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkiId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkiId);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (IsDeclaration != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeadershipMessage other) {
      if (other == null) {
        return;
      }
      if (other.PkiId.Length != 0) {
        PkiId = other.PkiId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Gossip.PeerTime();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.IsDeclaration != false) {
        IsDeclaration = other.IsDeclaration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PkiId = input.ReadBytes();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              timestamp_ = new global::Gossip.PeerTime();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 24: {
            IsDeclaration = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PeerTime defines the logical time of a peer's life
  /// </summary>
  public sealed partial class PeerTime : pb::IMessage<PeerTime> {
    private static readonly pb::MessageParser<PeerTime> _parser = new pb::MessageParser<PeerTime>(() => new PeerTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerTime(PeerTime other) : this() {
      incNum_ = other.incNum_;
      seqNum_ = other.seqNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerTime Clone() {
      return new PeerTime(this);
    }

    /// <summary>Field number for the "inc_num" field.</summary>
    public const int IncNumFieldNumber = 1;
    private ulong incNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncNum {
      get { return incNum_; }
      set {
        incNum_ = value;
      }
    }

    /// <summary>Field number for the "seq_num" field.</summary>
    public const int SeqNumFieldNumber = 2;
    private ulong seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncNum != other.IncNum) return false;
      if (SeqNum != other.SeqNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncNum != 0UL) hash ^= IncNum.GetHashCode();
      if (SeqNum != 0UL) hash ^= SeqNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(IncNum);
      }
      if (SeqNum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SeqNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncNum);
      }
      if (SeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeqNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerTime other) {
      if (other == null) {
        return;
      }
      if (other.IncNum != 0UL) {
        IncNum = other.IncNum;
      }
      if (other.SeqNum != 0UL) {
        SeqNum = other.SeqNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncNum = input.ReadUInt64();
            break;
          }
          case 16: {
            SeqNum = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MembershipRequest is used to ask membership information
  /// from a remote peer
  /// </summary>
  public sealed partial class MembershipRequest : pb::IMessage<MembershipRequest> {
    private static readonly pb::MessageParser<MembershipRequest> _parser = new pb::MessageParser<MembershipRequest>(() => new MembershipRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MembershipRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipRequest(MembershipRequest other) : this() {
      selfInformation_ = other.selfInformation_ != null ? other.selfInformation_.Clone() : null;
      known_ = other.known_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipRequest Clone() {
      return new MembershipRequest(this);
    }

    /// <summary>Field number for the "self_information" field.</summary>
    public const int SelfInformationFieldNumber = 1;
    private global::Gossip.Envelope selfInformation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.Envelope SelfInformation {
      get { return selfInformation_; }
      set {
        selfInformation_ = value;
      }
    }

    /// <summary>Field number for the "known" field.</summary>
    public const int KnownFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_known_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> known_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Known {
      get { return known_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MembershipRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MembershipRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfInformation, other.SelfInformation)) return false;
      if(!known_.Equals(other.known_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfInformation_ != null) hash ^= SelfInformation.GetHashCode();
      hash ^= known_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfInformation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfInformation);
      }
      known_.WriteTo(output, _repeated_known_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfInformation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInformation);
      }
      size += known_.CalculateSize(_repeated_known_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MembershipRequest other) {
      if (other == null) {
        return;
      }
      if (other.selfInformation_ != null) {
        if (selfInformation_ == null) {
          selfInformation_ = new global::Gossip.Envelope();
        }
        SelfInformation.MergeFrom(other.SelfInformation);
      }
      known_.Add(other.known_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfInformation_ == null) {
              selfInformation_ = new global::Gossip.Envelope();
            }
            input.ReadMessage(selfInformation_);
            break;
          }
          case 18: {
            known_.AddEntriesFrom(input, _repeated_known_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MembershipResponse is used for replying to MembershipRequests
  /// </summary>
  public sealed partial class MembershipResponse : pb::IMessage<MembershipResponse> {
    private static readonly pb::MessageParser<MembershipResponse> _parser = new pb::MessageParser<MembershipResponse>(() => new MembershipResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MembershipResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipResponse(MembershipResponse other) : this() {
      alive_ = other.alive_.Clone();
      dead_ = other.dead_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipResponse Clone() {
      return new MembershipResponse(this);
    }

    /// <summary>Field number for the "alive" field.</summary>
    public const int AliveFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gossip.Envelope> _repeated_alive_codec
        = pb::FieldCodec.ForMessage(10, global::Gossip.Envelope.Parser);
    private readonly pbc::RepeatedField<global::Gossip.Envelope> alive_ = new pbc::RepeatedField<global::Gossip.Envelope>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.Envelope> Alive {
      get { return alive_; }
    }

    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Gossip.Envelope> _repeated_dead_codec
        = pb::FieldCodec.ForMessage(18, global::Gossip.Envelope.Parser);
    private readonly pbc::RepeatedField<global::Gossip.Envelope> dead_ = new pbc::RepeatedField<global::Gossip.Envelope>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.Envelope> Dead {
      get { return dead_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MembershipResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MembershipResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!alive_.Equals(other.alive_)) return false;
      if(!dead_.Equals(other.dead_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= alive_.GetHashCode();
      hash ^= dead_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      alive_.WriteTo(output, _repeated_alive_codec);
      dead_.WriteTo(output, _repeated_dead_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += alive_.CalculateSize(_repeated_alive_codec);
      size += dead_.CalculateSize(_repeated_dead_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MembershipResponse other) {
      if (other == null) {
        return;
      }
      alive_.Add(other.alive_);
      dead_.Add(other.dead_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            alive_.AddEntriesFrom(input, _repeated_alive_codec);
            break;
          }
          case 18: {
            dead_.AddEntriesFrom(input, _repeated_dead_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Member holds membership-related information
  /// about a peer
  /// </summary>
  public sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      endpoint_ = other.endpoint_;
      metadata_ = other.metadata_;
      pkiId_ = other.pkiId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "endpoint" field.</summary>
    public const int EndpointFieldNumber = 1;
    private string endpoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Endpoint {
      get { return endpoint_; }
      set {
        endpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pki_id" field.</summary>
    public const int PkiIdFieldNumber = 3;
    private pb::ByteString pkiId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PkiId {
      get { return pkiId_; }
      set {
        pkiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Endpoint != other.Endpoint) return false;
      if (Metadata != other.Metadata) return false;
      if (PkiId != other.PkiId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Endpoint.Length != 0) hash ^= Endpoint.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (PkiId.Length != 0) hash ^= PkiId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Endpoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Endpoint);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Metadata);
      }
      if (PkiId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PkiId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Endpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Endpoint);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (PkiId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkiId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      if (other.Endpoint.Length != 0) {
        Endpoint = other.Endpoint;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.PkiId.Length != 0) {
        PkiId = other.PkiId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Endpoint = input.ReadString();
            break;
          }
          case 18: {
            Metadata = input.ReadBytes();
            break;
          }
          case 26: {
            PkiId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Empty is used for pinging and in tests
  /// </summary>
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// RemoteStateRequest is used to ask a set of blocks
  /// from a remote peer
  /// </summary>
  public sealed partial class RemoteStateRequest : pb::IMessage<RemoteStateRequest> {
    private static readonly pb::MessageParser<RemoteStateRequest> _parser = new pb::MessageParser<RemoteStateRequest>(() => new RemoteStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStateRequest(RemoteStateRequest other) : this() {
      startSeqNum_ = other.startSeqNum_;
      endSeqNum_ = other.endSeqNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStateRequest Clone() {
      return new RemoteStateRequest(this);
    }

    /// <summary>Field number for the "start_seq_num" field.</summary>
    public const int StartSeqNumFieldNumber = 1;
    private ulong startSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartSeqNum {
      get { return startSeqNum_; }
      set {
        startSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "end_seq_num" field.</summary>
    public const int EndSeqNumFieldNumber = 2;
    private ulong endSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndSeqNum {
      get { return endSeqNum_; }
      set {
        endSeqNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartSeqNum != other.StartSeqNum) return false;
      if (EndSeqNum != other.EndSeqNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartSeqNum != 0UL) hash ^= StartSeqNum.GetHashCode();
      if (EndSeqNum != 0UL) hash ^= EndSeqNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartSeqNum);
      }
      if (EndSeqNum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndSeqNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartSeqNum);
      }
      if (EndSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndSeqNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartSeqNum != 0UL) {
        StartSeqNum = other.StartSeqNum;
      }
      if (other.EndSeqNum != 0UL) {
        EndSeqNum = other.EndSeqNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            EndSeqNum = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RemoteStateResponse is used to send a set of blocks
  /// to a remote peer
  /// </summary>
  public sealed partial class RemoteStateResponse : pb::IMessage<RemoteStateResponse> {
    private static readonly pb::MessageParser<RemoteStateResponse> _parser = new pb::MessageParser<RemoteStateResponse>(() => new RemoteStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStateResponse(RemoteStateResponse other) : this() {
      payloads_ = other.payloads_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStateResponse Clone() {
      return new RemoteStateResponse(this);
    }

    /// <summary>Field number for the "payloads" field.</summary>
    public const int PayloadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gossip.Payload> _repeated_payloads_codec
        = pb::FieldCodec.ForMessage(10, global::Gossip.Payload.Parser);
    private readonly pbc::RepeatedField<global::Gossip.Payload> payloads_ = new pbc::RepeatedField<global::Gossip.Payload>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.Payload> Payloads {
      get { return payloads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!payloads_.Equals(other.payloads_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= payloads_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      payloads_.WriteTo(output, _repeated_payloads_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += payloads_.CalculateSize(_repeated_payloads_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteStateResponse other) {
      if (other == null) {
        return;
      }
      payloads_.Add(other.payloads_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            payloads_.AddEntriesFrom(input, _repeated_payloads_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RemotePrivateDataRequest message used to request
  /// missing private rwset
  /// </summary>
  public sealed partial class RemotePvtDataRequest : pb::IMessage<RemotePvtDataRequest> {
    private static readonly pb::MessageParser<RemotePvtDataRequest> _parser = new pb::MessageParser<RemotePvtDataRequest>(() => new RemotePvtDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemotePvtDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemotePvtDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemotePvtDataRequest(RemotePvtDataRequest other) : this() {
      digests_ = other.digests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemotePvtDataRequest Clone() {
      return new RemotePvtDataRequest(this);
    }

    /// <summary>Field number for the "digests" field.</summary>
    public const int DigestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gossip.PvtDataDigest> _repeated_digests_codec
        = pb::FieldCodec.ForMessage(10, global::Gossip.PvtDataDigest.Parser);
    private readonly pbc::RepeatedField<global::Gossip.PvtDataDigest> digests_ = new pbc::RepeatedField<global::Gossip.PvtDataDigest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.PvtDataDigest> Digests {
      get { return digests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemotePvtDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemotePvtDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!digests_.Equals(other.digests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= digests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      digests_.WriteTo(output, _repeated_digests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += digests_.CalculateSize(_repeated_digests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemotePvtDataRequest other) {
      if (other == null) {
        return;
      }
      digests_.Add(other.digests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            digests_.AddEntriesFrom(input, _repeated_digests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PvtDataDigest defines a digest of private data
  /// </summary>
  public sealed partial class PvtDataDigest : pb::IMessage<PvtDataDigest> {
    private static readonly pb::MessageParser<PvtDataDigest> _parser = new pb::MessageParser<PvtDataDigest>(() => new PvtDataDigest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvtDataDigest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataDigest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataDigest(PvtDataDigest other) : this() {
      txId_ = other.txId_;
      namespace_ = other.namespace_;
      collection_ = other.collection_;
      blockSeq_ = other.blockSeq_;
      seqInBlock_ = other.seqInBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataDigest Clone() {
      return new PvtDataDigest(this);
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 1;
    private string txId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 3;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_seq" field.</summary>
    public const int BlockSeqFieldNumber = 4;
    private ulong blockSeq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockSeq {
      get { return blockSeq_; }
      set {
        blockSeq_ = value;
      }
    }

    /// <summary>Field number for the "seq_in_block" field.</summary>
    public const int SeqInBlockFieldNumber = 5;
    private ulong seqInBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeqInBlock {
      get { return seqInBlock_; }
      set {
        seqInBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvtDataDigest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvtDataDigest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxId != other.TxId) return false;
      if (Namespace != other.Namespace) return false;
      if (Collection != other.Collection) return false;
      if (BlockSeq != other.BlockSeq) return false;
      if (SeqInBlock != other.SeqInBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (BlockSeq != 0UL) hash ^= BlockSeq.GetHashCode();
      if (SeqInBlock != 0UL) hash ^= SeqInBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxId);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (BlockSeq != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BlockSeq);
      }
      if (SeqInBlock != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SeqInBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (BlockSeq != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockSeq);
      }
      if (SeqInBlock != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeqInBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvtDataDigest other) {
      if (other == null) {
        return;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.BlockSeq != 0UL) {
        BlockSeq = other.BlockSeq;
      }
      if (other.SeqInBlock != 0UL) {
        SeqInBlock = other.SeqInBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxId = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 32: {
            BlockSeq = input.ReadUInt64();
            break;
          }
          case 40: {
            SeqInBlock = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RemotePrivateData message to response on private
  /// data replication request
  /// </summary>
  public sealed partial class RemotePvtDataResponse : pb::IMessage<RemotePvtDataResponse> {
    private static readonly pb::MessageParser<RemotePvtDataResponse> _parser = new pb::MessageParser<RemotePvtDataResponse>(() => new RemotePvtDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemotePvtDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemotePvtDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemotePvtDataResponse(RemotePvtDataResponse other) : this() {
      elements_ = other.elements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemotePvtDataResponse Clone() {
      return new RemotePvtDataResponse(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gossip.PvtDataElement> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::Gossip.PvtDataElement.Parser);
    private readonly pbc::RepeatedField<global::Gossip.PvtDataElement> elements_ = new pbc::RepeatedField<global::Gossip.PvtDataElement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gossip.PvtDataElement> Elements {
      get { return elements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemotePvtDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemotePvtDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elements_.WriteTo(output, _repeated_elements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemotePvtDataResponse other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvtDataElement : pb::IMessage<PvtDataElement> {
    private static readonly pb::MessageParser<PvtDataElement> _parser = new pb::MessageParser<PvtDataElement>(() => new PvtDataElement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvtDataElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataElement(PvtDataElement other) : this() {
      digest_ = other.digest_ != null ? other.digest_.Clone() : null;
      payload_ = other.payload_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataElement Clone() {
      return new PvtDataElement(this);
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 1;
    private global::Gossip.PvtDataDigest digest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gossip.PvtDataDigest Digest {
      get { return digest_; }
      set {
        digest_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_payload_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> payload_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// the payload is a marshaled kvrwset.KVRWSet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Payload {
      get { return payload_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvtDataElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvtDataElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Digest, other.Digest)) return false;
      if(!payload_.Equals(other.payload_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (digest_ != null) hash ^= Digest.GetHashCode();
      hash ^= payload_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (digest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Digest);
      }
      payload_.WriteTo(output, _repeated_payload_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (digest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Digest);
      }
      size += payload_.CalculateSize(_repeated_payload_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvtDataElement other) {
      if (other == null) {
        return;
      }
      if (other.digest_ != null) {
        if (digest_ == null) {
          digest_ = new global::Gossip.PvtDataDigest();
        }
        Digest.MergeFrom(other.Digest);
      }
      payload_.Add(other.payload_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (digest_ == null) {
              digest_ = new global::Gossip.PvtDataDigest();
            }
            input.ReadMessage(digest_);
            break;
          }
          case 18: {
            payload_.AddEntriesFrom(input, _repeated_payload_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PvtPayload augments private rwset data and tx index
  /// inside the block
  /// </summary>
  public sealed partial class PvtDataPayload : pb::IMessage<PvtDataPayload> {
    private static readonly pb::MessageParser<PvtDataPayload> _parser = new pb::MessageParser<PvtDataPayload>(() => new PvtDataPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvtDataPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataPayload(PvtDataPayload other) : this() {
      txSeqInBlock_ = other.txSeqInBlock_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvtDataPayload Clone() {
      return new PvtDataPayload(this);
    }

    /// <summary>Field number for the "tx_seq_in_block" field.</summary>
    public const int TxSeqInBlockFieldNumber = 1;
    private ulong txSeqInBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxSeqInBlock {
      get { return txSeqInBlock_; }
      set {
        txSeqInBlock_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// Encodes marhslaed bytes of rwset.TxPvtReadWriteSet
    /// defined in rwset.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvtDataPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvtDataPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxSeqInBlock != other.TxSeqInBlock) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxSeqInBlock != 0UL) hash ^= TxSeqInBlock.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxSeqInBlock != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TxSeqInBlock);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxSeqInBlock != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxSeqInBlock);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvtDataPayload other) {
      if (other == null) {
        return;
      }
      if (other.TxSeqInBlock != 0UL) {
        TxSeqInBlock = other.TxSeqInBlock;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TxSeqInBlock = input.ReadUInt64();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Acknowledgement : pb::IMessage<Acknowledgement> {
    private static readonly pb::MessageParser<Acknowledgement> _parser = new pb::MessageParser<Acknowledgement>(() => new Acknowledgement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Acknowledgement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acknowledgement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acknowledgement(Acknowledgement other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acknowledgement Clone() {
      return new Acknowledgement(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Acknowledgement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Acknowledgement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Acknowledgement other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Chaincode represents a Chaincode that is installed
  /// on a peer
  /// </summary>
  public sealed partial class Chaincode : pb::IMessage<Chaincode> {
    private static readonly pb::MessageParser<Chaincode> _parser = new pb::MessageParser<Chaincode>(() => new Chaincode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chaincode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gossip.MessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chaincode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chaincode(Chaincode other) : this() {
      name_ = other.name_;
      version_ = other.version_;
      metadata_ = other.metadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chaincode Clone() {
      return new Chaincode(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chaincode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chaincode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (Metadata != other.Metadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chaincode other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
