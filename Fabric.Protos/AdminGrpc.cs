// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: peer/admin.proto
// </auto-generated>
// Original file comments:
//
// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Protos {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class Admin
  {
    static readonly string __ServiceName = "protos.Admin";

    static readonly grpc::Marshaller<global::Common.Envelope> __Marshaller_common_Envelope = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Common.Envelope.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protos.ServerStatus> __Marshaller_protos_ServerStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protos.ServerStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protos.LogLevelResponse> __Marshaller_protos_LogLevelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protos.LogLevelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Common.Envelope, global::Protos.ServerStatus> __Method_GetStatus = new grpc::Method<global::Common.Envelope, global::Protos.ServerStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatus",
        __Marshaller_common_Envelope,
        __Marshaller_protos_ServerStatus);

    static readonly grpc::Method<global::Common.Envelope, global::Protos.ServerStatus> __Method_StartServer = new grpc::Method<global::Common.Envelope, global::Protos.ServerStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartServer",
        __Marshaller_common_Envelope,
        __Marshaller_protos_ServerStatus);

    static readonly grpc::Method<global::Common.Envelope, global::Protos.LogLevelResponse> __Method_GetModuleLogLevel = new grpc::Method<global::Common.Envelope, global::Protos.LogLevelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModuleLogLevel",
        __Marshaller_common_Envelope,
        __Marshaller_protos_LogLevelResponse);

    static readonly grpc::Method<global::Common.Envelope, global::Protos.LogLevelResponse> __Method_SetModuleLogLevel = new grpc::Method<global::Common.Envelope, global::Protos.LogLevelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetModuleLogLevel",
        __Marshaller_common_Envelope,
        __Marshaller_protos_LogLevelResponse);

    static readonly grpc::Method<global::Common.Envelope, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RevertLogLevels = new grpc::Method<global::Common.Envelope, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevertLogLevels",
        __Marshaller_common_Envelope,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protos.AdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Admin</summary>
    public abstract partial class AdminBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protos.ServerStatus> GetStatus(global::Common.Envelope request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protos.ServerStatus> StartServer(global::Common.Envelope request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protos.LogLevelResponse> GetModuleLogLevel(global::Common.Envelope request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protos.LogLevelResponse> SetModuleLogLevel(global::Common.Envelope request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RevertLogLevels(global::Common.Envelope request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Admin</summary>
    public partial class AdminClient : grpc::ClientBase<AdminClient>
    {
      /// <summary>Creates a new client for Admin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AdminClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Admin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protos.ServerStatus GetStatus(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protos.ServerStatus GetStatus(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.ServerStatus> GetStatusAsync(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.ServerStatus> GetStatusAsync(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
      }
      public virtual global::Protos.ServerStatus StartServer(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protos.ServerStatus StartServer(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartServer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.ServerStatus> StartServerAsync(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.ServerStatus> StartServerAsync(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartServer, null, options, request);
      }
      public virtual global::Protos.LogLevelResponse GetModuleLogLevel(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleLogLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protos.LogLevelResponse GetModuleLogLevel(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModuleLogLevel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.LogLevelResponse> GetModuleLogLevelAsync(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleLogLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.LogLevelResponse> GetModuleLogLevelAsync(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModuleLogLevel, null, options, request);
      }
      public virtual global::Protos.LogLevelResponse SetModuleLogLevel(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetModuleLogLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protos.LogLevelResponse SetModuleLogLevel(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetModuleLogLevel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.LogLevelResponse> SetModuleLogLevelAsync(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetModuleLogLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protos.LogLevelResponse> SetModuleLogLevelAsync(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetModuleLogLevel, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RevertLogLevels(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevertLogLevels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RevertLogLevels(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RevertLogLevels, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RevertLogLevelsAsync(global::Common.Envelope request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevertLogLevelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RevertLogLevelsAsync(global::Common.Envelope request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RevertLogLevels, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_StartServer, serviceImpl.StartServer)
          .AddMethod(__Method_GetModuleLogLevel, serviceImpl.GetModuleLogLevel)
          .AddMethod(__Method_SetModuleLogLevel, serviceImpl.SetModuleLogLevel)
          .AddMethod(__Method_RevertLogLevels, serviceImpl.RevertLogLevels).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AdminBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetStatus, serviceImpl.GetStatus);
      serviceBinder.AddMethod(__Method_StartServer, serviceImpl.StartServer);
      serviceBinder.AddMethod(__Method_GetModuleLogLevel, serviceImpl.GetModuleLogLevel);
      serviceBinder.AddMethod(__Method_SetModuleLogLevel, serviceImpl.SetModuleLogLevel);
      serviceBinder.AddMethod(__Method_RevertLogLevels, serviceImpl.RevertLogLevels);
    }

  }
}
#endregion
