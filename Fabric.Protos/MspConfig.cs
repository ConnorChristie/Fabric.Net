// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msp/msp_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msp {

  /// <summary>Holder for reflection information generated from msp/msp_config.proto</summary>
  public static partial class MspConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for msp/msp_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MspConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRtc3AvbXNwX2NvbmZpZy5wcm90bxIDbXNwIikKCU1TUENvbmZpZxIMCgR0",
            "eXBlGAEgASgFEg4KBmNvbmZpZxgCIAEoDCKDAwoPRmFicmljTVNQQ29uZmln",
            "EgwKBG5hbWUYASABKAkSEgoKcm9vdF9jZXJ0cxgCIAMoDBIaChJpbnRlcm1l",
            "ZGlhdGVfY2VydHMYAyADKAwSDgoGYWRtaW5zGAQgAygMEhcKD3Jldm9jYXRp",
            "b25fbGlzdBgFIAMoDBIyChBzaWduaW5nX2lkZW50aXR5GAYgASgLMhgubXNw",
            "LlNpZ25pbmdJZGVudGl0eUluZm8SQAofb3JnYW5pemF0aW9uYWxfdW5pdF9p",
            "ZGVudGlmaWVycxgHIAMoCzIXLm1zcC5GYWJyaWNPVUlkZW50aWZpZXISLgoN",
            "Y3J5cHRvX2NvbmZpZxgIIAEoCzIXLm1zcC5GYWJyaWNDcnlwdG9Db25maWcS",
            "FgoOdGxzX3Jvb3RfY2VydHMYCSADKAwSHgoWdGxzX2ludGVybWVkaWF0ZV9j",
            "ZXJ0cxgKIAMoDBIrCg9mYWJyaWNfbm9kZV9vdXMYCyABKAsyEi5tc3AuRmFi",
            "cmljTm9kZU9VcyJeChJGYWJyaWNDcnlwdG9Db25maWcSHQoVc2lnbmF0dXJl",
            "X2hhc2hfZmFtaWx5GAEgASgJEikKIWlkZW50aXR5X2lkZW50aWZpZXJfaGFz",
            "aF9mdW5jdGlvbhgCIAEoCSJ+Cg9JZGVtaXhNU1BDb25maWcSDAoEbmFtZRgB",
            "IAEoCRILCgNpcGsYAiABKAwSKgoGc2lnbmVyGAMgASgLMhoubXNwLklkZW1p",
            "eE1TUFNpZ25lckNvbmZpZxIVCg1yZXZvY2F0aW9uX3BrGAQgASgMEg0KBWVw",
            "b2NoGAUgASgDIqkBChVJZGVtaXhNU1BTaWduZXJDb25maWcSDAoEY3JlZBgB",
            "IAEoDBIKCgJzaxgCIAEoDBImCh5vcmdhbml6YXRpb25hbF91bml0X2lkZW50",
            "aWZpZXIYAyABKAkSDAoEcm9sZRgEIAEoBRIVCg1lbnJvbGxtZW50X2lkGAUg",
            "ASgJEikKIWNyZWRlbnRpYWxfcmV2b2NhdGlvbl9pbmZvcm1hdGlvbhgGIAEo",
            "DCJSChNTaWduaW5nSWRlbnRpdHlJbmZvEhUKDXB1YmxpY19zaWduZXIYASAB",
            "KAwSJAoOcHJpdmF0ZV9zaWduZXIYAiABKAsyDC5tc3AuS2V5SW5mbyI3CgdL",
            "ZXlJbmZvEhYKDmtleV9pZGVudGlmaWVyGAEgASgJEhQKDGtleV9tYXRlcmlh",
            "bBgCIAEoDCJRChJGYWJyaWNPVUlkZW50aWZpZXISEwoLY2VydGlmaWNhdGUY",
            "ASABKAwSJgoeb3JnYW5pemF0aW9uYWxfdW5pdF9pZGVudGlmaWVyGAIgASgJ",
            "IosBCg1GYWJyaWNOb2RlT1VzEg4KBmVuYWJsZRgBIAEoCBI1ChRjbGllbnRf",
            "b3VfaWRlbnRpZmllchgCIAEoCzIXLm1zcC5GYWJyaWNPVUlkZW50aWZpZXIS",
            "MwoScGVlcl9vdV9pZGVudGlmaWVyGAMgASgLMhcubXNwLkZhYnJpY09VSWRl",
            "bnRpZmllckJfCiFvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5tc3BC",
            "EE1zcENvbmZpZ1BhY2thZ2VaKGdpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFi",
            "cmljL3Byb3Rvcy9tc3BiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.MSPConfig), global::Msp.MSPConfig.Parser, new[]{ "Type", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.FabricMSPConfig), global::Msp.FabricMSPConfig.Parser, new[]{ "Name", "RootCerts", "IntermediateCerts", "Admins", "RevocationList", "SigningIdentity", "OrganizationalUnitIdentifiers", "CryptoConfig", "TlsRootCerts", "TlsIntermediateCerts", "FabricNodeOus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.FabricCryptoConfig), global::Msp.FabricCryptoConfig.Parser, new[]{ "SignatureHashFamily", "IdentityIdentifierHashFunction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.IdemixMSPConfig), global::Msp.IdemixMSPConfig.Parser, new[]{ "Name", "Ipk", "Signer", "RevocationPk", "Epoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.IdemixMSPSignerConfig), global::Msp.IdemixMSPSignerConfig.Parser, new[]{ "Cred", "Sk", "OrganizationalUnitIdentifier", "Role", "EnrollmentId", "CredentialRevocationInformation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.SigningIdentityInfo), global::Msp.SigningIdentityInfo.Parser, new[]{ "PublicSigner", "PrivateSigner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.KeyInfo), global::Msp.KeyInfo.Parser, new[]{ "KeyIdentifier", "KeyMaterial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.FabricOUIdentifier), global::Msp.FabricOUIdentifier.Parser, new[]{ "Certificate", "OrganizationalUnitIdentifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msp.FabricNodeOUs), global::Msp.FabricNodeOUs.Parser, new[]{ "Enable", "ClientOuIdentifier", "PeerOuIdentifier" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// MSPConfig collects all the configuration information for
  /// an MSP. The Config field should be unmarshalled in a way
  /// that depends on the Type
  /// </summary>
  public sealed partial class MSPConfig : pb::IMessage<MSPConfig> {
    private static readonly pb::MessageParser<MSPConfig> _parser = new pb::MessageParser<MSPConfig>(() => new MSPConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MSPConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPConfig(MSPConfig other) : this() {
      type_ = other.type_;
      config_ = other.config_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPConfig Clone() {
      return new MSPConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// Type holds the type of the MSP; the default one would
    /// be of type FABRIC implementing an X.509 based provider
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private pb::ByteString config_ = pb::ByteString.Empty;
    /// <summary>
    /// Config is MSP dependent configuration info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Config {
      get { return config_; }
      set {
        config_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MSPConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MSPConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Config != other.Config) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Config.Length != 0) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Config.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MSPConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Config.Length != 0) {
        Config = other.Config;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Config = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// FabricMSPConfig collects all the configuration information for
  /// a Fabric MSP.
  /// Here we assume a default certificate validation policy, where
  /// any certificate signed by any of the listed rootCA certs would
  /// be considered as valid under this MSP.
  /// This MSP may or may not come with a signing identity. If it does,
  /// it can also issue signing identities. If it does not, it can only
  /// be used to validate and verify certificates.
  /// </summary>
  public sealed partial class FabricMSPConfig : pb::IMessage<FabricMSPConfig> {
    private static readonly pb::MessageParser<FabricMSPConfig> _parser = new pb::MessageParser<FabricMSPConfig>(() => new FabricMSPConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FabricMSPConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricMSPConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricMSPConfig(FabricMSPConfig other) : this() {
      name_ = other.name_;
      rootCerts_ = other.rootCerts_.Clone();
      intermediateCerts_ = other.intermediateCerts_.Clone();
      admins_ = other.admins_.Clone();
      revocationList_ = other.revocationList_.Clone();
      signingIdentity_ = other.signingIdentity_ != null ? other.signingIdentity_.Clone() : null;
      organizationalUnitIdentifiers_ = other.organizationalUnitIdentifiers_.Clone();
      cryptoConfig_ = other.cryptoConfig_ != null ? other.cryptoConfig_.Clone() : null;
      tlsRootCerts_ = other.tlsRootCerts_.Clone();
      tlsIntermediateCerts_ = other.tlsIntermediateCerts_.Clone();
      fabricNodeOus_ = other.fabricNodeOus_ != null ? other.fabricNodeOus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricMSPConfig Clone() {
      return new FabricMSPConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name holds the identifier of the MSP; MSP identifier
    /// is chosen by the application that governs this MSP.
    /// For example, and assuming the default implementation of MSP,
    /// that is X.509-based and considers a single Issuer,
    /// this can refer to the Subject OU field or the Issuer OU field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "root_certs" field.</summary>
    public const int RootCertsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_rootCerts_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> rootCerts_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of root certificates trusted by this MSP
    /// they are used upon certificate validation (see
    /// comment for IntermediateCerts below)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RootCerts {
      get { return rootCerts_; }
    }

    /// <summary>Field number for the "intermediate_certs" field.</summary>
    public const int IntermediateCertsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_intermediateCerts_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> intermediateCerts_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of intermediate certificates trusted by this MSP;
    /// they are used upon certificate validation as follows:
    /// validation attempts to build a path from the certificate
    /// to be validated (which is at one end of the path) and
    /// one of the certs in the RootCerts field (which is at
    /// the other end of the path). If the path is longer than
    /// 2, certificates in the middle are searched within the
    /// IntermediateCerts pool
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> IntermediateCerts {
      get { return intermediateCerts_; }
    }

    /// <summary>Field number for the "admins" field.</summary>
    public const int AdminsFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_admins_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> admins_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// Identity denoting the administrator of this MSP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Admins {
      get { return admins_; }
    }

    /// <summary>Field number for the "revocation_list" field.</summary>
    public const int RevocationListFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_revocationList_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> revocationList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// Identity revocation list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RevocationList {
      get { return revocationList_; }
    }

    /// <summary>Field number for the "signing_identity" field.</summary>
    public const int SigningIdentityFieldNumber = 6;
    private global::Msp.SigningIdentityInfo signingIdentity_;
    /// <summary>
    /// SigningIdentity holds information on the signing identity
    /// this peer is to use, and which is to be imported by the
    /// MSP defined before
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.SigningIdentityInfo SigningIdentity {
      get { return signingIdentity_; }
      set {
        signingIdentity_ = value;
      }
    }

    /// <summary>Field number for the "organizational_unit_identifiers" field.</summary>
    public const int OrganizationalUnitIdentifiersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Msp.FabricOUIdentifier> _repeated_organizationalUnitIdentifiers_codec
        = pb::FieldCodec.ForMessage(58, global::Msp.FabricOUIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Msp.FabricOUIdentifier> organizationalUnitIdentifiers_ = new pbc::RepeatedField<global::Msp.FabricOUIdentifier>();
    /// <summary>
    /// OrganizationalUnitIdentifiers holds one or more
    /// fabric organizational unit identifiers that belong to
    /// this MSP configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msp.FabricOUIdentifier> OrganizationalUnitIdentifiers {
      get { return organizationalUnitIdentifiers_; }
    }

    /// <summary>Field number for the "crypto_config" field.</summary>
    public const int CryptoConfigFieldNumber = 8;
    private global::Msp.FabricCryptoConfig cryptoConfig_;
    /// <summary>
    /// FabricCryptoConfig contains the configuration parameters
    /// for the cryptographic algorithms used by this MSP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.FabricCryptoConfig CryptoConfig {
      get { return cryptoConfig_; }
      set {
        cryptoConfig_ = value;
      }
    }

    /// <summary>Field number for the "tls_root_certs" field.</summary>
    public const int TlsRootCertsFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_tlsRootCerts_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> tlsRootCerts_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of TLS root certificates trusted by this MSP.
    /// They are returned by GetTLSRootCerts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TlsRootCerts {
      get { return tlsRootCerts_; }
    }

    /// <summary>Field number for the "tls_intermediate_certs" field.</summary>
    public const int TlsIntermediateCertsFieldNumber = 10;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_tlsIntermediateCerts_codec
        = pb::FieldCodec.ForBytes(82);
    private readonly pbc::RepeatedField<pb::ByteString> tlsIntermediateCerts_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of TLS intermediate certificates trusted by this MSP;
    /// They are returned by GetTLSIntermediateCerts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TlsIntermediateCerts {
      get { return tlsIntermediateCerts_; }
    }

    /// <summary>Field number for the "fabric_node_ous" field.</summary>
    public const int FabricNodeOusFieldNumber = 11;
    private global::Msp.FabricNodeOUs fabricNodeOus_;
    /// <summary>
    /// fabric_node_ous contains the configuration to distinguish clients from peers from orderers
    /// based on the OUs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.FabricNodeOUs FabricNodeOus {
      get { return fabricNodeOus_; }
      set {
        fabricNodeOus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FabricMSPConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FabricMSPConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!rootCerts_.Equals(other.rootCerts_)) return false;
      if(!intermediateCerts_.Equals(other.intermediateCerts_)) return false;
      if(!admins_.Equals(other.admins_)) return false;
      if(!revocationList_.Equals(other.revocationList_)) return false;
      if (!object.Equals(SigningIdentity, other.SigningIdentity)) return false;
      if(!organizationalUnitIdentifiers_.Equals(other.organizationalUnitIdentifiers_)) return false;
      if (!object.Equals(CryptoConfig, other.CryptoConfig)) return false;
      if(!tlsRootCerts_.Equals(other.tlsRootCerts_)) return false;
      if(!tlsIntermediateCerts_.Equals(other.tlsIntermediateCerts_)) return false;
      if (!object.Equals(FabricNodeOus, other.FabricNodeOus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= rootCerts_.GetHashCode();
      hash ^= intermediateCerts_.GetHashCode();
      hash ^= admins_.GetHashCode();
      hash ^= revocationList_.GetHashCode();
      if (signingIdentity_ != null) hash ^= SigningIdentity.GetHashCode();
      hash ^= organizationalUnitIdentifiers_.GetHashCode();
      if (cryptoConfig_ != null) hash ^= CryptoConfig.GetHashCode();
      hash ^= tlsRootCerts_.GetHashCode();
      hash ^= tlsIntermediateCerts_.GetHashCode();
      if (fabricNodeOus_ != null) hash ^= FabricNodeOus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      rootCerts_.WriteTo(output, _repeated_rootCerts_codec);
      intermediateCerts_.WriteTo(output, _repeated_intermediateCerts_codec);
      admins_.WriteTo(output, _repeated_admins_codec);
      revocationList_.WriteTo(output, _repeated_revocationList_codec);
      if (signingIdentity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SigningIdentity);
      }
      organizationalUnitIdentifiers_.WriteTo(output, _repeated_organizationalUnitIdentifiers_codec);
      if (cryptoConfig_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CryptoConfig);
      }
      tlsRootCerts_.WriteTo(output, _repeated_tlsRootCerts_codec);
      tlsIntermediateCerts_.WriteTo(output, _repeated_tlsIntermediateCerts_codec);
      if (fabricNodeOus_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(FabricNodeOus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += rootCerts_.CalculateSize(_repeated_rootCerts_codec);
      size += intermediateCerts_.CalculateSize(_repeated_intermediateCerts_codec);
      size += admins_.CalculateSize(_repeated_admins_codec);
      size += revocationList_.CalculateSize(_repeated_revocationList_codec);
      if (signingIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SigningIdentity);
      }
      size += organizationalUnitIdentifiers_.CalculateSize(_repeated_organizationalUnitIdentifiers_codec);
      if (cryptoConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoConfig);
      }
      size += tlsRootCerts_.CalculateSize(_repeated_tlsRootCerts_codec);
      size += tlsIntermediateCerts_.CalculateSize(_repeated_tlsIntermediateCerts_codec);
      if (fabricNodeOus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FabricNodeOus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FabricMSPConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      rootCerts_.Add(other.rootCerts_);
      intermediateCerts_.Add(other.intermediateCerts_);
      admins_.Add(other.admins_);
      revocationList_.Add(other.revocationList_);
      if (other.signingIdentity_ != null) {
        if (signingIdentity_ == null) {
          signingIdentity_ = new global::Msp.SigningIdentityInfo();
        }
        SigningIdentity.MergeFrom(other.SigningIdentity);
      }
      organizationalUnitIdentifiers_.Add(other.organizationalUnitIdentifiers_);
      if (other.cryptoConfig_ != null) {
        if (cryptoConfig_ == null) {
          cryptoConfig_ = new global::Msp.FabricCryptoConfig();
        }
        CryptoConfig.MergeFrom(other.CryptoConfig);
      }
      tlsRootCerts_.Add(other.tlsRootCerts_);
      tlsIntermediateCerts_.Add(other.tlsIntermediateCerts_);
      if (other.fabricNodeOus_ != null) {
        if (fabricNodeOus_ == null) {
          fabricNodeOus_ = new global::Msp.FabricNodeOUs();
        }
        FabricNodeOus.MergeFrom(other.FabricNodeOus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            rootCerts_.AddEntriesFrom(input, _repeated_rootCerts_codec);
            break;
          }
          case 26: {
            intermediateCerts_.AddEntriesFrom(input, _repeated_intermediateCerts_codec);
            break;
          }
          case 34: {
            admins_.AddEntriesFrom(input, _repeated_admins_codec);
            break;
          }
          case 42: {
            revocationList_.AddEntriesFrom(input, _repeated_revocationList_codec);
            break;
          }
          case 50: {
            if (signingIdentity_ == null) {
              signingIdentity_ = new global::Msp.SigningIdentityInfo();
            }
            input.ReadMessage(signingIdentity_);
            break;
          }
          case 58: {
            organizationalUnitIdentifiers_.AddEntriesFrom(input, _repeated_organizationalUnitIdentifiers_codec);
            break;
          }
          case 66: {
            if (cryptoConfig_ == null) {
              cryptoConfig_ = new global::Msp.FabricCryptoConfig();
            }
            input.ReadMessage(cryptoConfig_);
            break;
          }
          case 74: {
            tlsRootCerts_.AddEntriesFrom(input, _repeated_tlsRootCerts_codec);
            break;
          }
          case 82: {
            tlsIntermediateCerts_.AddEntriesFrom(input, _repeated_tlsIntermediateCerts_codec);
            break;
          }
          case 90: {
            if (fabricNodeOus_ == null) {
              fabricNodeOus_ = new global::Msp.FabricNodeOUs();
            }
            input.ReadMessage(fabricNodeOus_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// FabricCryptoConfig contains configuration parameters
  /// for the cryptographic algorithms used by the MSP
  /// this configuration refers to
  /// </summary>
  public sealed partial class FabricCryptoConfig : pb::IMessage<FabricCryptoConfig> {
    private static readonly pb::MessageParser<FabricCryptoConfig> _parser = new pb::MessageParser<FabricCryptoConfig>(() => new FabricCryptoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FabricCryptoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricCryptoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricCryptoConfig(FabricCryptoConfig other) : this() {
      signatureHashFamily_ = other.signatureHashFamily_;
      identityIdentifierHashFunction_ = other.identityIdentifierHashFunction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricCryptoConfig Clone() {
      return new FabricCryptoConfig(this);
    }

    /// <summary>Field number for the "signature_hash_family" field.</summary>
    public const int SignatureHashFamilyFieldNumber = 1;
    private string signatureHashFamily_ = "";
    /// <summary>
    /// SignatureHashFamily is a string representing the hash family to be used
    /// during sign and verify operations.
    /// Allowed values are "SHA2" and "SHA3".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignatureHashFamily {
      get { return signatureHashFamily_; }
      set {
        signatureHashFamily_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity_identifier_hash_function" field.</summary>
    public const int IdentityIdentifierHashFunctionFieldNumber = 2;
    private string identityIdentifierHashFunction_ = "";
    /// <summary>
    /// IdentityIdentifierHashFunction is a string representing the hash function
    /// to be used during the computation of the identity identifier of an MSP identity.
    /// Allowed values are "SHA256", "SHA384" and "SHA3_256", "SHA3_384".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityIdentifierHashFunction {
      get { return identityIdentifierHashFunction_; }
      set {
        identityIdentifierHashFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FabricCryptoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FabricCryptoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignatureHashFamily != other.SignatureHashFamily) return false;
      if (IdentityIdentifierHashFunction != other.IdentityIdentifierHashFunction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignatureHashFamily.Length != 0) hash ^= SignatureHashFamily.GetHashCode();
      if (IdentityIdentifierHashFunction.Length != 0) hash ^= IdentityIdentifierHashFunction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignatureHashFamily.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SignatureHashFamily);
      }
      if (IdentityIdentifierHashFunction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdentityIdentifierHashFunction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignatureHashFamily.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignatureHashFamily);
      }
      if (IdentityIdentifierHashFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityIdentifierHashFunction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FabricCryptoConfig other) {
      if (other == null) {
        return;
      }
      if (other.SignatureHashFamily.Length != 0) {
        SignatureHashFamily = other.SignatureHashFamily;
      }
      if (other.IdentityIdentifierHashFunction.Length != 0) {
        IdentityIdentifierHashFunction = other.IdentityIdentifierHashFunction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SignatureHashFamily = input.ReadString();
            break;
          }
          case 18: {
            IdentityIdentifierHashFunction = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// IdemixMSPConfig collects all the configuration information for
  /// an Idemix MSP.
  /// </summary>
  public sealed partial class IdemixMSPConfig : pb::IMessage<IdemixMSPConfig> {
    private static readonly pb::MessageParser<IdemixMSPConfig> _parser = new pb::MessageParser<IdemixMSPConfig>(() => new IdemixMSPConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdemixMSPConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdemixMSPConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdemixMSPConfig(IdemixMSPConfig other) : this() {
      name_ = other.name_;
      ipk_ = other.ipk_;
      signer_ = other.signer_ != null ? other.signer_.Clone() : null;
      revocationPk_ = other.revocationPk_;
      epoch_ = other.epoch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdemixMSPConfig Clone() {
      return new IdemixMSPConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name holds the identifier of the MSP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipk" field.</summary>
    public const int IpkFieldNumber = 2;
    private pb::ByteString ipk_ = pb::ByteString.Empty;
    /// <summary>
    /// ipk represents the (serialized) issuer public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipk {
      get { return ipk_; }
      set {
        ipk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signer" field.</summary>
    public const int SignerFieldNumber = 3;
    private global::Msp.IdemixMSPSignerConfig signer_;
    /// <summary>
    /// signer may contain crypto material to configure a default signer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.IdemixMSPSignerConfig Signer {
      get { return signer_; }
      set {
        signer_ = value;
      }
    }

    /// <summary>Field number for the "revocation_pk" field.</summary>
    public const int RevocationPkFieldNumber = 4;
    private pb::ByteString revocationPk_ = pb::ByteString.Empty;
    /// <summary>
    /// revocation_pk is the public key used for revocation of credentials
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RevocationPk {
      get { return revocationPk_; }
      set {
        revocationPk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 5;
    private long epoch_;
    /// <summary>
    /// epoch represents the current epoch (time interval) used for revocation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdemixMSPConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdemixMSPConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Ipk != other.Ipk) return false;
      if (!object.Equals(Signer, other.Signer)) return false;
      if (RevocationPk != other.RevocationPk) return false;
      if (Epoch != other.Epoch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Ipk.Length != 0) hash ^= Ipk.GetHashCode();
      if (signer_ != null) hash ^= Signer.GetHashCode();
      if (RevocationPk.Length != 0) hash ^= RevocationPk.GetHashCode();
      if (Epoch != 0L) hash ^= Epoch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Ipk.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Ipk);
      }
      if (signer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Signer);
      }
      if (RevocationPk.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RevocationPk);
      }
      if (Epoch != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Epoch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Ipk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipk);
      }
      if (signer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signer);
      }
      if (RevocationPk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RevocationPk);
      }
      if (Epoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Epoch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdemixMSPConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Ipk.Length != 0) {
        Ipk = other.Ipk;
      }
      if (other.signer_ != null) {
        if (signer_ == null) {
          signer_ = new global::Msp.IdemixMSPSignerConfig();
        }
        Signer.MergeFrom(other.Signer);
      }
      if (other.RevocationPk.Length != 0) {
        RevocationPk = other.RevocationPk;
      }
      if (other.Epoch != 0L) {
        Epoch = other.Epoch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Ipk = input.ReadBytes();
            break;
          }
          case 26: {
            if (signer_ == null) {
              signer_ = new global::Msp.IdemixMSPSignerConfig();
            }
            input.ReadMessage(signer_);
            break;
          }
          case 34: {
            RevocationPk = input.ReadBytes();
            break;
          }
          case 40: {
            Epoch = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// IdemixMSPSIgnerConfig contains the crypto material to set up an idemix signing identity
  /// </summary>
  public sealed partial class IdemixMSPSignerConfig : pb::IMessage<IdemixMSPSignerConfig> {
    private static readonly pb::MessageParser<IdemixMSPSignerConfig> _parser = new pb::MessageParser<IdemixMSPSignerConfig>(() => new IdemixMSPSignerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdemixMSPSignerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdemixMSPSignerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdemixMSPSignerConfig(IdemixMSPSignerConfig other) : this() {
      cred_ = other.cred_;
      sk_ = other.sk_;
      organizationalUnitIdentifier_ = other.organizationalUnitIdentifier_;
      role_ = other.role_;
      enrollmentId_ = other.enrollmentId_;
      credentialRevocationInformation_ = other.credentialRevocationInformation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdemixMSPSignerConfig Clone() {
      return new IdemixMSPSignerConfig(this);
    }

    /// <summary>Field number for the "cred" field.</summary>
    public const int CredFieldNumber = 1;
    private pb::ByteString cred_ = pb::ByteString.Empty;
    /// <summary>
    /// cred represents the serialized idemix credential of the default signer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cred {
      get { return cred_; }
      set {
        cred_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sk" field.</summary>
    public const int SkFieldNumber = 2;
    private pb::ByteString sk_ = pb::ByteString.Empty;
    /// <summary>
    /// sk is the secret key of the default signer, corresponding to credential Cred
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sk {
      get { return sk_; }
      set {
        sk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "organizational_unit_identifier" field.</summary>
    public const int OrganizationalUnitIdentifierFieldNumber = 3;
    private string organizationalUnitIdentifier_ = "";
    /// <summary>
    /// organizational_unit_identifier defines the organizational unit the default signer is in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrganizationalUnitIdentifier {
      get { return organizationalUnitIdentifier_; }
      set {
        organizationalUnitIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 4;
    private int role_;
    /// <summary>
    /// role defines whether the default signer is admin, peer, member or client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "enrollment_id" field.</summary>
    public const int EnrollmentIdFieldNumber = 5;
    private string enrollmentId_ = "";
    /// <summary>
    /// enrollment_id contains the enrollment id of this signer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnrollmentId {
      get { return enrollmentId_; }
      set {
        enrollmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "credential_revocation_information" field.</summary>
    public const int CredentialRevocationInformationFieldNumber = 6;
    private pb::ByteString credentialRevocationInformation_ = pb::ByteString.Empty;
    /// <summary>
    /// credential_revocation_information contains a serialized CredentialRevocationInformation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CredentialRevocationInformation {
      get { return credentialRevocationInformation_; }
      set {
        credentialRevocationInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdemixMSPSignerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdemixMSPSignerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cred != other.Cred) return false;
      if (Sk != other.Sk) return false;
      if (OrganizationalUnitIdentifier != other.OrganizationalUnitIdentifier) return false;
      if (Role != other.Role) return false;
      if (EnrollmentId != other.EnrollmentId) return false;
      if (CredentialRevocationInformation != other.CredentialRevocationInformation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cred.Length != 0) hash ^= Cred.GetHashCode();
      if (Sk.Length != 0) hash ^= Sk.GetHashCode();
      if (OrganizationalUnitIdentifier.Length != 0) hash ^= OrganizationalUnitIdentifier.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (EnrollmentId.Length != 0) hash ^= EnrollmentId.GetHashCode();
      if (CredentialRevocationInformation.Length != 0) hash ^= CredentialRevocationInformation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cred.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Cred);
      }
      if (Sk.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Sk);
      }
      if (OrganizationalUnitIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrganizationalUnitIdentifier);
      }
      if (Role != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Role);
      }
      if (EnrollmentId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EnrollmentId);
      }
      if (CredentialRevocationInformation.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(CredentialRevocationInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cred.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cred);
      }
      if (Sk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sk);
      }
      if (OrganizationalUnitIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrganizationalUnitIdentifier);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      if (EnrollmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnrollmentId);
      }
      if (CredentialRevocationInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CredentialRevocationInformation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdemixMSPSignerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Cred.Length != 0) {
        Cred = other.Cred;
      }
      if (other.Sk.Length != 0) {
        Sk = other.Sk;
      }
      if (other.OrganizationalUnitIdentifier.Length != 0) {
        OrganizationalUnitIdentifier = other.OrganizationalUnitIdentifier;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.EnrollmentId.Length != 0) {
        EnrollmentId = other.EnrollmentId;
      }
      if (other.CredentialRevocationInformation.Length != 0) {
        CredentialRevocationInformation = other.CredentialRevocationInformation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cred = input.ReadBytes();
            break;
          }
          case 18: {
            Sk = input.ReadBytes();
            break;
          }
          case 26: {
            OrganizationalUnitIdentifier = input.ReadString();
            break;
          }
          case 32: {
            Role = input.ReadInt32();
            break;
          }
          case 42: {
            EnrollmentId = input.ReadString();
            break;
          }
          case 50: {
            CredentialRevocationInformation = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SigningIdentityInfo represents the configuration information
  /// related to the signing identity the peer is to use for generating
  /// endorsements
  /// </summary>
  public sealed partial class SigningIdentityInfo : pb::IMessage<SigningIdentityInfo> {
    private static readonly pb::MessageParser<SigningIdentityInfo> _parser = new pb::MessageParser<SigningIdentityInfo>(() => new SigningIdentityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigningIdentityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigningIdentityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigningIdentityInfo(SigningIdentityInfo other) : this() {
      publicSigner_ = other.publicSigner_;
      privateSigner_ = other.privateSigner_ != null ? other.privateSigner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigningIdentityInfo Clone() {
      return new SigningIdentityInfo(this);
    }

    /// <summary>Field number for the "public_signer" field.</summary>
    public const int PublicSignerFieldNumber = 1;
    private pb::ByteString publicSigner_ = pb::ByteString.Empty;
    /// <summary>
    /// PublicSigner carries the public information of the signing
    /// identity. For an X.509 provider this would be represented by
    /// an X.509 certificate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicSigner {
      get { return publicSigner_; }
      set {
        publicSigner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_signer" field.</summary>
    public const int PrivateSignerFieldNumber = 2;
    private global::Msp.KeyInfo privateSigner_;
    /// <summary>
    /// PrivateSigner denotes a reference to the private key of the
    /// peer's signing identity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.KeyInfo PrivateSigner {
      get { return privateSigner_; }
      set {
        privateSigner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigningIdentityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigningIdentityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicSigner != other.PublicSigner) return false;
      if (!object.Equals(PrivateSigner, other.PrivateSigner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicSigner.Length != 0) hash ^= PublicSigner.GetHashCode();
      if (privateSigner_ != null) hash ^= PrivateSigner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicSigner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicSigner);
      }
      if (privateSigner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrivateSigner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicSigner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicSigner);
      }
      if (privateSigner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateSigner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigningIdentityInfo other) {
      if (other == null) {
        return;
      }
      if (other.PublicSigner.Length != 0) {
        PublicSigner = other.PublicSigner;
      }
      if (other.privateSigner_ != null) {
        if (privateSigner_ == null) {
          privateSigner_ = new global::Msp.KeyInfo();
        }
        PrivateSigner.MergeFrom(other.PrivateSigner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicSigner = input.ReadBytes();
            break;
          }
          case 18: {
            if (privateSigner_ == null) {
              privateSigner_ = new global::Msp.KeyInfo();
            }
            input.ReadMessage(privateSigner_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KeyInfo represents a (secret) key that is either already stored
  /// in the bccsp/keystore or key material to be imported to the
  /// bccsp key-store. In later versions it may contain also a
  /// keystore identifier
  /// </summary>
  public sealed partial class KeyInfo : pb::IMessage<KeyInfo> {
    private static readonly pb::MessageParser<KeyInfo> _parser = new pb::MessageParser<KeyInfo>(() => new KeyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyInfo(KeyInfo other) : this() {
      keyIdentifier_ = other.keyIdentifier_;
      keyMaterial_ = other.keyMaterial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyInfo Clone() {
      return new KeyInfo(this);
    }

    /// <summary>Field number for the "key_identifier" field.</summary>
    public const int KeyIdentifierFieldNumber = 1;
    private string keyIdentifier_ = "";
    /// <summary>
    /// Identifier of the key inside the default keystore; this for
    /// the case of Software BCCSP as well as the HSM BCCSP would be
    /// the SKI of the key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyIdentifier {
      get { return keyIdentifier_; }
      set {
        keyIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_material" field.</summary>
    public const int KeyMaterialFieldNumber = 2;
    private pb::ByteString keyMaterial_ = pb::ByteString.Empty;
    /// <summary>
    /// KeyMaterial (optional) for the key to be imported; this is
    /// properly encoded key bytes, prefixed by the type of the key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeyMaterial {
      get { return keyMaterial_; }
      set {
        keyMaterial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyIdentifier != other.KeyIdentifier) return false;
      if (KeyMaterial != other.KeyMaterial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyIdentifier.Length != 0) hash ^= KeyIdentifier.GetHashCode();
      if (KeyMaterial.Length != 0) hash ^= KeyMaterial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyIdentifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyIdentifier);
      }
      if (KeyMaterial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(KeyMaterial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyIdentifier);
      }
      if (KeyMaterial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyMaterial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyInfo other) {
      if (other == null) {
        return;
      }
      if (other.KeyIdentifier.Length != 0) {
        KeyIdentifier = other.KeyIdentifier;
      }
      if (other.KeyMaterial.Length != 0) {
        KeyMaterial = other.KeyMaterial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyIdentifier = input.ReadString();
            break;
          }
          case 18: {
            KeyMaterial = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// FabricOUIdentifier represents an organizational unit and
  /// its related chain of trust identifier.
  /// </summary>
  public sealed partial class FabricOUIdentifier : pb::IMessage<FabricOUIdentifier> {
    private static readonly pb::MessageParser<FabricOUIdentifier> _parser = new pb::MessageParser<FabricOUIdentifier>(() => new FabricOUIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FabricOUIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricOUIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricOUIdentifier(FabricOUIdentifier other) : this() {
      certificate_ = other.certificate_;
      organizationalUnitIdentifier_ = other.organizationalUnitIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricOUIdentifier Clone() {
      return new FabricOUIdentifier(this);
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 1;
    private pb::ByteString certificate_ = pb::ByteString.Empty;
    /// <summary>
    /// Certificate represents the second certificate in a certification chain.
    /// (Notice that the first certificate in a certification chain is supposed
    /// to be the certificate of an identity).
    /// It must correspond to the certificate of root or intermediate CA
    /// recognized by the MSP this message belongs to.
    /// Starting from this certificate, a certification chain is computed
    /// and bound to the OrganizationUnitIdentifier specified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "organizational_unit_identifier" field.</summary>
    public const int OrganizationalUnitIdentifierFieldNumber = 2;
    private string organizationalUnitIdentifier_ = "";
    /// <summary>
    /// OrganizationUnitIdentifier defines the organizational unit under the
    /// MSP identified with MSPIdentifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrganizationalUnitIdentifier {
      get { return organizationalUnitIdentifier_; }
      set {
        organizationalUnitIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FabricOUIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FabricOUIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate != other.Certificate) return false;
      if (OrganizationalUnitIdentifier != other.OrganizationalUnitIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Certificate.Length != 0) hash ^= Certificate.GetHashCode();
      if (OrganizationalUnitIdentifier.Length != 0) hash ^= OrganizationalUnitIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Certificate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate);
      }
      if (OrganizationalUnitIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrganizationalUnitIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Certificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      if (OrganizationalUnitIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrganizationalUnitIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FabricOUIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Certificate.Length != 0) {
        Certificate = other.Certificate;
      }
      if (other.OrganizationalUnitIdentifier.Length != 0) {
        OrganizationalUnitIdentifier = other.OrganizationalUnitIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Certificate = input.ReadBytes();
            break;
          }
          case 18: {
            OrganizationalUnitIdentifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// FabricNodeOUs contains configuration to tell apart clients from peers from orderers
  /// based on OUs. If NodeOUs recognition is enabled then an msp identity
  /// that does not contain any of the specified OU will be considered invalid.
  /// </summary>
  public sealed partial class FabricNodeOUs : pb::IMessage<FabricNodeOUs> {
    private static readonly pb::MessageParser<FabricNodeOUs> _parser = new pb::MessageParser<FabricNodeOUs>(() => new FabricNodeOUs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FabricNodeOUs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msp.MspConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricNodeOUs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricNodeOUs(FabricNodeOUs other) : this() {
      enable_ = other.enable_;
      clientOuIdentifier_ = other.clientOuIdentifier_ != null ? other.clientOuIdentifier_.Clone() : null;
      peerOuIdentifier_ = other.peerOuIdentifier_ != null ? other.peerOuIdentifier_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FabricNodeOUs Clone() {
      return new FabricNodeOUs(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    /// <summary>
    /// If true then an msp identity that does not contain any of the specified OU will be considered invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "client_ou_identifier" field.</summary>
    public const int ClientOuIdentifierFieldNumber = 2;
    private global::Msp.FabricOUIdentifier clientOuIdentifier_;
    /// <summary>
    /// OU Identifier of the clients
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.FabricOUIdentifier ClientOuIdentifier {
      get { return clientOuIdentifier_; }
      set {
        clientOuIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "peer_ou_identifier" field.</summary>
    public const int PeerOuIdentifierFieldNumber = 3;
    private global::Msp.FabricOUIdentifier peerOuIdentifier_;
    /// <summary>
    /// OU Identifier of the peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msp.FabricOUIdentifier PeerOuIdentifier {
      get { return peerOuIdentifier_; }
      set {
        peerOuIdentifier_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FabricNodeOUs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FabricNodeOUs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (!object.Equals(ClientOuIdentifier, other.ClientOuIdentifier)) return false;
      if (!object.Equals(PeerOuIdentifier, other.PeerOuIdentifier)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (clientOuIdentifier_ != null) hash ^= ClientOuIdentifier.GetHashCode();
      if (peerOuIdentifier_ != null) hash ^= PeerOuIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (clientOuIdentifier_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClientOuIdentifier);
      }
      if (peerOuIdentifier_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PeerOuIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (clientOuIdentifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientOuIdentifier);
      }
      if (peerOuIdentifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PeerOuIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FabricNodeOUs other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.clientOuIdentifier_ != null) {
        if (clientOuIdentifier_ == null) {
          clientOuIdentifier_ = new global::Msp.FabricOUIdentifier();
        }
        ClientOuIdentifier.MergeFrom(other.ClientOuIdentifier);
      }
      if (other.peerOuIdentifier_ != null) {
        if (peerOuIdentifier_ == null) {
          peerOuIdentifier_ = new global::Msp.FabricOUIdentifier();
        }
        PeerOuIdentifier.MergeFrom(other.PeerOuIdentifier);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 18: {
            if (clientOuIdentifier_ == null) {
              clientOuIdentifier_ = new global::Msp.FabricOUIdentifier();
            }
            input.ReadMessage(clientOuIdentifier_);
            break;
          }
          case 26: {
            if (peerOuIdentifier_ == null) {
              peerOuIdentifier_ = new global::Msp.FabricOUIdentifier();
            }
            input.ReadMessage(peerOuIdentifier_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
