// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: discovery/protocol.proto
// </auto-generated>
// Original file comments:
// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Discovery {
  /// <summary>
  /// Discovery defines a service that serves information about the fabric network
  /// like which peers, orderers, chaincodes, etc.
  /// </summary>
  public static partial class Discovery
  {
    static readonly string __ServiceName = "discovery.Discovery";

    static readonly grpc::Marshaller<global::Discovery.SignedRequest> __Marshaller_discovery_SignedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Discovery.SignedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Discovery.Response> __Marshaller_discovery_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Discovery.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::Discovery.SignedRequest, global::Discovery.Response> __Method_Discover = new grpc::Method<global::Discovery.SignedRequest, global::Discovery.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Discover",
        __Marshaller_discovery_SignedRequest,
        __Marshaller_discovery_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Discovery.ProtocolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Discovery</summary>
    public abstract partial class DiscoveryBase
    {
      /// <summary>
      /// Discover receives a signed request, and returns a response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Discovery.Response> Discover(global::Discovery.SignedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Discovery</summary>
    public partial class DiscoveryClient : grpc::ClientBase<DiscoveryClient>
    {
      /// <summary>Creates a new client for Discovery</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DiscoveryClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Discovery that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DiscoveryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DiscoveryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DiscoveryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Discover receives a signed request, and returns a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Discovery.Response Discover(global::Discovery.SignedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Discover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Discover receives a signed request, and returns a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Discovery.Response Discover(global::Discovery.SignedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Discover, null, options, request);
      }
      /// <summary>
      /// Discover receives a signed request, and returns a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Discovery.Response> DiscoverAsync(global::Discovery.SignedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Discover receives a signed request, and returns a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Discovery.Response> DiscoverAsync(global::Discovery.SignedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Discover, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DiscoveryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DiscoveryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DiscoveryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Discover, serviceImpl.Discover).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DiscoveryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Discover, serviceImpl.Discover);
    }

  }
}
#endregion
