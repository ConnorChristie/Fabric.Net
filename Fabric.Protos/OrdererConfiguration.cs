// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: orderer/orderer_configuration.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Orderer {

  /// <summary>Holder for reflection information generated from orderer/orderer_configuration.proto</summary>
  public static partial class OrdererConfigurationReflection {

    #region Descriptor
    /// <summary>File descriptor for orderer/orderer_configuration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrdererConfigurationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNvcmRlcmVyL29yZGVyZXJfY29uZmlndXJhdGlvbi5wcm90bxIHb3JkZXJl",
            "ciIvCg1Db25zZW5zdXNUeXBlEgwKBHR5cGUYASABKAkSEAoIbWV0YWRhdGEY",
            "AiABKAwiXwoJQmF0Y2hTaXplEhkKEW1heF9tZXNzYWdlX2NvdW50GAEgASgN",
            "EhoKEmFic29sdXRlX21heF9ieXRlcxgCIAEoDRIbChNwcmVmZXJyZWRfbWF4",
            "X2J5dGVzGAMgASgNIh8KDEJhdGNoVGltZW91dBIPCgd0aW1lb3V0GAEgASgJ",
            "Ih8KDEthZmthQnJva2VycxIPCgdicm9rZXJzGAEgAygJIigKE0NoYW5uZWxS",
            "ZXN0cmljdGlvbnMSEQoJbWF4X2NvdW50GAEgASgEQlUKJW9yZy5oeXBlcmxl",
            "ZGdlci5mYWJyaWMucHJvdG9zLm9yZGVyZXJaLGdpdGh1Yi5jb20vaHlwZXJs",
            "ZWRnZXIvZmFicmljL3Byb3Rvcy9vcmRlcmVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Orderer.ConsensusType), global::Orderer.ConsensusType.Parser, new[]{ "Type", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orderer.BatchSize), global::Orderer.BatchSize.Parser, new[]{ "MaxMessageCount", "AbsoluteMaxBytes", "PreferredMaxBytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orderer.BatchTimeout), global::Orderer.BatchTimeout.Parser, new[]{ "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orderer.KafkaBrokers), global::Orderer.KafkaBrokers.Parser, new[]{ "Brokers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orderer.ChannelRestrictions), global::Orderer.ChannelRestrictions.Parser, new[]{ "MaxCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConsensusType : pb::IMessage<ConsensusType> {
    private static readonly pb::MessageParser<ConsensusType> _parser = new pb::MessageParser<ConsensusType>(() => new ConsensusType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsensusType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orderer.OrdererConfigurationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusType(ConsensusType other) : this() {
      type_ = other.type_;
      metadata_ = other.metadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusType Clone() {
      return new ConsensusType(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    /// <summary>
    /// Opaque metadata, dependent on the consensus type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsensusType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsensusType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Metadata != other.Metadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsensusType other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchSize : pb::IMessage<BatchSize> {
    private static readonly pb::MessageParser<BatchSize> _parser = new pb::MessageParser<BatchSize>(() => new BatchSize());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchSize> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orderer.OrdererConfigurationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSize() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSize(BatchSize other) : this() {
      maxMessageCount_ = other.maxMessageCount_;
      absoluteMaxBytes_ = other.absoluteMaxBytes_;
      preferredMaxBytes_ = other.preferredMaxBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSize Clone() {
      return new BatchSize(this);
    }

    /// <summary>Field number for the "max_message_count" field.</summary>
    public const int MaxMessageCountFieldNumber = 1;
    private uint maxMessageCount_;
    /// <summary>
    /// Simply specified as number of messages for now, in the future
    /// we may want to allow this to be specified by size in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMessageCount {
      get { return maxMessageCount_; }
      set {
        maxMessageCount_ = value;
      }
    }

    /// <summary>Field number for the "absolute_max_bytes" field.</summary>
    public const int AbsoluteMaxBytesFieldNumber = 2;
    private uint absoluteMaxBytes_;
    /// <summary>
    /// The byte count of the serialized messages in a batch cannot
    /// exceed this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbsoluteMaxBytes {
      get { return absoluteMaxBytes_; }
      set {
        absoluteMaxBytes_ = value;
      }
    }

    /// <summary>Field number for the "preferred_max_bytes" field.</summary>
    public const int PreferredMaxBytesFieldNumber = 3;
    private uint preferredMaxBytes_;
    /// <summary>
    /// The byte count of the serialized messages in a batch should not
    /// exceed this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreferredMaxBytes {
      get { return preferredMaxBytes_; }
      set {
        preferredMaxBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchSize);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchSize other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxMessageCount != other.MaxMessageCount) return false;
      if (AbsoluteMaxBytes != other.AbsoluteMaxBytes) return false;
      if (PreferredMaxBytes != other.PreferredMaxBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxMessageCount != 0) hash ^= MaxMessageCount.GetHashCode();
      if (AbsoluteMaxBytes != 0) hash ^= AbsoluteMaxBytes.GetHashCode();
      if (PreferredMaxBytes != 0) hash ^= PreferredMaxBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxMessageCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxMessageCount);
      }
      if (AbsoluteMaxBytes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AbsoluteMaxBytes);
      }
      if (PreferredMaxBytes != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PreferredMaxBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxMessageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMessageCount);
      }
      if (AbsoluteMaxBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbsoluteMaxBytes);
      }
      if (PreferredMaxBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreferredMaxBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchSize other) {
      if (other == null) {
        return;
      }
      if (other.MaxMessageCount != 0) {
        MaxMessageCount = other.MaxMessageCount;
      }
      if (other.AbsoluteMaxBytes != 0) {
        AbsoluteMaxBytes = other.AbsoluteMaxBytes;
      }
      if (other.PreferredMaxBytes != 0) {
        PreferredMaxBytes = other.PreferredMaxBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxMessageCount = input.ReadUInt32();
            break;
          }
          case 16: {
            AbsoluteMaxBytes = input.ReadUInt32();
            break;
          }
          case 24: {
            PreferredMaxBytes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchTimeout : pb::IMessage<BatchTimeout> {
    private static readonly pb::MessageParser<BatchTimeout> _parser = new pb::MessageParser<BatchTimeout>(() => new BatchTimeout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchTimeout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orderer.OrdererConfigurationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchTimeout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchTimeout(BatchTimeout other) : this() {
      timeout_ = other.timeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchTimeout Clone() {
      return new BatchTimeout(this);
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 1;
    private string timeout_ = "";
    /// <summary>
    /// Any duration string parseable by ParseDuration():
    /// https://golang.org/pkg/time/#ParseDuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timeout {
      get { return timeout_; }
      set {
        timeout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchTimeout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchTimeout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timeout != other.Timeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timeout.Length != 0) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timeout.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timeout.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchTimeout other) {
      if (other == null) {
        return;
      }
      if (other.Timeout.Length != 0) {
        Timeout = other.Timeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Timeout = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Carries a list of bootstrap brokers, i.e. this is not the exclusive set of
  /// brokers an ordering service
  /// </summary>
  public sealed partial class KafkaBrokers : pb::IMessage<KafkaBrokers> {
    private static readonly pb::MessageParser<KafkaBrokers> _parser = new pb::MessageParser<KafkaBrokers>(() => new KafkaBrokers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KafkaBrokers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orderer.OrdererConfigurationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KafkaBrokers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KafkaBrokers(KafkaBrokers other) : this() {
      brokers_ = other.brokers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KafkaBrokers Clone() {
      return new KafkaBrokers(this);
    }

    /// <summary>Field number for the "brokers" field.</summary>
    public const int BrokersFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_brokers_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> brokers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Each broker here should be identified using the (IP|host):port notation,
    /// e.g. 127.0.0.1:7050, or localhost:7050 are valid entries
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Brokers {
      get { return brokers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KafkaBrokers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KafkaBrokers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!brokers_.Equals(other.brokers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= brokers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      brokers_.WriteTo(output, _repeated_brokers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += brokers_.CalculateSize(_repeated_brokers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KafkaBrokers other) {
      if (other == null) {
        return;
      }
      brokers_.Add(other.brokers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            brokers_.AddEntriesFrom(input, _repeated_brokers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ChannelRestrictions is the mssage which conveys restrictions on channel creation for an orderer
  /// </summary>
  public sealed partial class ChannelRestrictions : pb::IMessage<ChannelRestrictions> {
    private static readonly pb::MessageParser<ChannelRestrictions> _parser = new pb::MessageParser<ChannelRestrictions>(() => new ChannelRestrictions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelRestrictions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orderer.OrdererConfigurationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelRestrictions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelRestrictions(ChannelRestrictions other) : this() {
      maxCount_ = other.maxCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelRestrictions Clone() {
      return new ChannelRestrictions(this);
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 1;
    private ulong maxCount_;
    /// <summary>
    /// The max count of channels to allow to be created, a value of 0 indicates no limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelRestrictions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelRestrictions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxCount != other.MaxCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxCount != 0UL) hash ^= MaxCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxCount != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MaxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelRestrictions other) {
      if (other == null) {
        return;
      }
      if (other.MaxCount != 0UL) {
        MaxCount = other.MaxCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxCount = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
