// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: idemix/idemix.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from idemix/idemix.proto</summary>
public static partial class IdemixReflection {

  #region Descriptor
  /// <summary>File descriptor for idemix/idemix.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static IdemixReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNpZGVtaXgvaWRlbWl4LnByb3RvIhsKA0VDUBIJCgF4GAEgASgMEgkKAXkY",
          "AiABKAwiNgoERUNQMhIKCgJ4YRgBIAEoDBIKCgJ4YhgCIAEoDBIKCgJ5YRgD",
          "IAEoDBIKCgJ5YhgEIAEoDCLZAQoPSXNzdWVyUHVibGljS2V5EhcKD2F0dHJp",
          "YnV0ZV9uYW1lcxgBIAMoCRISCgRoX3NrGAIgASgLMgQuRUNQEhQKBmhfcmFu",
          "ZBgDIAEoCzIELkVDUBIVCgdoX2F0dHJzGAQgAygLMgQuRUNQEhAKAXcYBSAB",
          "KAsyBS5FQ1AyEhQKBmJhcl9nMRgGIAEoCzIELkVDUBIUCgZiYXJfZzIYByAB",
          "KAsyBC5FQ1ASDwoHcHJvb2ZfYxgIIAEoDBIPCgdwcm9vZl9zGAkgASgMEgwK",
          "BGhhc2gYCiABKAwiNwoJSXNzdWVyS2V5EgsKA2lzaxgBIAEoDBIdCgNpcGsY",
          "AiABKAsyEC5Jc3N1ZXJQdWJsaWNLZXkiUwoKQ3JlZGVudGlhbBIPCgFhGAEg",
          "ASgLMgQuRUNQEg8KAWIYAiABKAsyBC5FQ1ASCQoBZRgDIAEoDBIJCgFzGAQg",
          "ASgMEg0KBWF0dHJzGAUgAygMIlgKC0NyZWRSZXF1ZXN0EhEKA255bRgBIAEo",
          "CzIELkVDUBIUCgxpc3N1ZXJfbm9uY2UYAiABKAwSDwoHcHJvb2ZfYxgDIAEo",
          "DBIPCgdwcm9vZl9zGAQgASgMIpgDCglTaWduYXR1cmUSFQoHYV9wcmltZRgB",
          "IAEoCzIELkVDUBITCgVhX2JhchgCIAEoCzIELkVDUBIVCgdiX3ByaW1lGAMg",
          "ASgLMgQuRUNQEg8KB3Byb29mX2MYBCABKAwSEgoKcHJvb2Zfc19zaxgFIAEo",
          "DBIRCglwcm9vZl9zX2UYBiABKAwSEgoKcHJvb2Zfc19yMhgHIAEoDBISCgpw",
          "cm9vZl9zX3IzGAggASgMEhcKD3Byb29mX3Nfc19wcmltZRgJIAEoDBIVCg1w",
          "cm9vZl9zX2F0dHJzGAogAygMEg0KBW5vbmNlGAsgASgMEhEKA255bRgMIAEo",
          "CzIELkVDUBIVCg1wcm9vZl9zX3JfbnltGA0gASgMEiIKE3Jldm9jYXRpb25f",
          "ZXBvY2hfcGsYDiABKAsyBS5FQ1AyEhkKEXJldm9jYXRpb25fcGtfc2lnGA8g",
          "ASgMEg0KBWVwb2NoGBAgASgDEjEKFG5vbl9yZXZvY2F0aW9uX3Byb29mGBEg",
          "ASgLMhMuTm9uUmV2b2NhdGlvblByb29mIkoKEk5vblJldm9jYXRpb25Qcm9v",
          "ZhIWCg5yZXZvY2F0aW9uX2FsZxgBIAEoBRIcChRub25fcmV2b2NhdGlvbl9w",
          "cm9vZhgCIAEoDCJZCgxOeW1TaWduYXR1cmUSDwoHcHJvb2ZfYxgBIAEoDBIS",
          "Cgpwcm9vZl9zX3NrGAIgASgMEhUKDXByb29mX3Nfcl9ueW0YAyABKAwSDQoF",
          "bm9uY2UYBCABKAwikAEKH0NyZWRlbnRpYWxSZXZvY2F0aW9uSW5mb3JtYXRp",
          "b24SDQoFZXBvY2gYASABKAMSFwoIZXBvY2hfcGsYAiABKAsyBS5FQ1AyEhQK",
          "DGVwb2NoX3BrX3NpZxgDIAEoDBIWCg5yZXZvY2F0aW9uX2FsZxgEIAEoBRIX",
          "Cg9yZXZvY2F0aW9uX2RhdGEYBSABKAxCJlokZ2l0aHViLmNvbS9oeXBlcmxl",
          "ZGdlci9mYWJyaWMvaWRlbWl4YgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ECP), global::ECP.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ECP2), global::ECP2.Parser, new[]{ "Xa", "Xb", "Ya", "Yb" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IssuerPublicKey), global::IssuerPublicKey.Parser, new[]{ "AttributeNames", "HSk", "HRand", "HAttrs", "W", "BarG1", "BarG2", "ProofC", "ProofS", "Hash" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IssuerKey), global::IssuerKey.Parser, new[]{ "Isk", "Ipk" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Credential), global::Credential.Parser, new[]{ "A", "B", "E", "S", "Attrs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CredRequest), global::CredRequest.Parser, new[]{ "Nym", "IssuerNonce", "ProofC", "ProofS" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Signature), global::Signature.Parser, new[]{ "APrime", "ABar", "BPrime", "ProofC", "ProofSSk", "ProofSE", "ProofSR2", "ProofSR3", "ProofSSPrime", "ProofSAttrs", "Nonce", "Nym", "ProofSRNym", "RevocationEpochPk", "RevocationPkSig", "Epoch", "NonRevocationProof" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NonRevocationProof), global::NonRevocationProof.Parser, new[]{ "RevocationAlg", "NonRevocationProof_" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NymSignature), global::NymSignature.Parser, new[]{ "ProofC", "ProofSSk", "ProofSRNym", "Nonce" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CredentialRevocationInformation), global::CredentialRevocationInformation.Parser, new[]{ "Epoch", "EpochPk", "EpochPkSig", "RevocationAlg", "RevocationData" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// ECP is an elliptic curve point specified by its coordinates
/// ECP corresponds to an element of the first group (G1)
/// </summary>
public sealed partial class ECP : pb::IMessage<ECP> {
  private static readonly pb::MessageParser<ECP> _parser = new pb::MessageParser<ECP>(() => new ECP());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ECP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ECP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ECP(ECP other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ECP Clone() {
    return new ECP(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private pb::ByteString x_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString X {
    get { return x_; }
    set {
      x_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private pb::ByteString y_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Y {
    get { return y_; }
    set {
      y_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ECP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ECP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X.Length != 0) hash ^= X.GetHashCode();
    if (Y.Length != 0) hash ^= Y.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(X);
    }
    if (Y.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(X);
    }
    if (Y.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Y);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ECP other) {
    if (other == null) {
      return;
    }
    if (other.X.Length != 0) {
      X = other.X;
    }
    if (other.Y.Length != 0) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          X = input.ReadBytes();
          break;
        }
        case 18: {
          Y = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ECP2 is an elliptic curve point specified by its coordinates
/// ECP2 corresponds to an element of the second group (G2)
/// </summary>
public sealed partial class ECP2 : pb::IMessage<ECP2> {
  private static readonly pb::MessageParser<ECP2> _parser = new pb::MessageParser<ECP2>(() => new ECP2());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ECP2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ECP2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ECP2(ECP2 other) : this() {
    xa_ = other.xa_;
    xb_ = other.xb_;
    ya_ = other.ya_;
    yb_ = other.yb_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ECP2 Clone() {
    return new ECP2(this);
  }

  /// <summary>Field number for the "xa" field.</summary>
  public const int XaFieldNumber = 1;
  private pb::ByteString xa_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Xa {
    get { return xa_; }
    set {
      xa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "xb" field.</summary>
  public const int XbFieldNumber = 2;
  private pb::ByteString xb_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Xb {
    get { return xb_; }
    set {
      xb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ya" field.</summary>
  public const int YaFieldNumber = 3;
  private pb::ByteString ya_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Ya {
    get { return ya_; }
    set {
      ya_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "yb" field.</summary>
  public const int YbFieldNumber = 4;
  private pb::ByteString yb_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Yb {
    get { return yb_; }
    set {
      yb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ECP2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ECP2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Xa != other.Xa) return false;
    if (Xb != other.Xb) return false;
    if (Ya != other.Ya) return false;
    if (Yb != other.Yb) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Xa.Length != 0) hash ^= Xa.GetHashCode();
    if (Xb.Length != 0) hash ^= Xb.GetHashCode();
    if (Ya.Length != 0) hash ^= Ya.GetHashCode();
    if (Yb.Length != 0) hash ^= Yb.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Xa.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Xa);
    }
    if (Xb.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Xb);
    }
    if (Ya.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Ya);
    }
    if (Yb.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Yb);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Xa.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Xa);
    }
    if (Xb.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Xb);
    }
    if (Ya.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ya);
    }
    if (Yb.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Yb);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ECP2 other) {
    if (other == null) {
      return;
    }
    if (other.Xa.Length != 0) {
      Xa = other.Xa;
    }
    if (other.Xb.Length != 0) {
      Xb = other.Xb;
    }
    if (other.Ya.Length != 0) {
      Ya = other.Ya;
    }
    if (other.Yb.Length != 0) {
      Yb = other.Yb;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Xa = input.ReadBytes();
          break;
        }
        case 18: {
          Xb = input.ReadBytes();
          break;
        }
        case 26: {
          Ya = input.ReadBytes();
          break;
        }
        case 34: {
          Yb = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// IssuerPublicKey specifies an issuer public key that consists of
/// attribute_names - a list of the attribute names of a credential issued by the issuer
/// h_sk, h_rand, h_attrs, w, bar_g1, bar_g2 - group elements corresponding to the signing key, randomness, and attributes
/// proof_c, proof_s compose a zero-knowledge proof of knowledge of the secret key
/// hash is a hash of the public key appended to it
/// </summary>
public sealed partial class IssuerPublicKey : pb::IMessage<IssuerPublicKey> {
  private static readonly pb::MessageParser<IssuerPublicKey> _parser = new pb::MessageParser<IssuerPublicKey>(() => new IssuerPublicKey());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IssuerPublicKey> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuerPublicKey() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuerPublicKey(IssuerPublicKey other) : this() {
    attributeNames_ = other.attributeNames_.Clone();
    hSk_ = other.hSk_ != null ? other.hSk_.Clone() : null;
    hRand_ = other.hRand_ != null ? other.hRand_.Clone() : null;
    hAttrs_ = other.hAttrs_.Clone();
    w_ = other.w_ != null ? other.w_.Clone() : null;
    barG1_ = other.barG1_ != null ? other.barG1_.Clone() : null;
    barG2_ = other.barG2_ != null ? other.barG2_.Clone() : null;
    proofC_ = other.proofC_;
    proofS_ = other.proofS_;
    hash_ = other.hash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuerPublicKey Clone() {
    return new IssuerPublicKey(this);
  }

  /// <summary>Field number for the "attribute_names" field.</summary>
  public const int AttributeNamesFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_attributeNames_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> attributeNames_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> AttributeNames {
    get { return attributeNames_; }
  }

  /// <summary>Field number for the "h_sk" field.</summary>
  public const int HSkFieldNumber = 2;
  private global::ECP hSk_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP HSk {
    get { return hSk_; }
    set {
      hSk_ = value;
    }
  }

  /// <summary>Field number for the "h_rand" field.</summary>
  public const int HRandFieldNumber = 3;
  private global::ECP hRand_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP HRand {
    get { return hRand_; }
    set {
      hRand_ = value;
    }
  }

  /// <summary>Field number for the "h_attrs" field.</summary>
  public const int HAttrsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ECP> _repeated_hAttrs_codec
      = pb::FieldCodec.ForMessage(34, global::ECP.Parser);
  private readonly pbc::RepeatedField<global::ECP> hAttrs_ = new pbc::RepeatedField<global::ECP>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ECP> HAttrs {
    get { return hAttrs_; }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 5;
  private global::ECP2 w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP2 W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  /// <summary>Field number for the "bar_g1" field.</summary>
  public const int BarG1FieldNumber = 6;
  private global::ECP barG1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP BarG1 {
    get { return barG1_; }
    set {
      barG1_ = value;
    }
  }

  /// <summary>Field number for the "bar_g2" field.</summary>
  public const int BarG2FieldNumber = 7;
  private global::ECP barG2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP BarG2 {
    get { return barG2_; }
    set {
      barG2_ = value;
    }
  }

  /// <summary>Field number for the "proof_c" field.</summary>
  public const int ProofCFieldNumber = 8;
  private pb::ByteString proofC_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofC {
    get { return proofC_; }
    set {
      proofC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s" field.</summary>
  public const int ProofSFieldNumber = 9;
  private pb::ByteString proofS_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofS {
    get { return proofS_; }
    set {
      proofS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 10;
  private pb::ByteString hash_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Hash {
    get { return hash_; }
    set {
      hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IssuerPublicKey);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IssuerPublicKey other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!attributeNames_.Equals(other.attributeNames_)) return false;
    if (!object.Equals(HSk, other.HSk)) return false;
    if (!object.Equals(HRand, other.HRand)) return false;
    if(!hAttrs_.Equals(other.hAttrs_)) return false;
    if (!object.Equals(W, other.W)) return false;
    if (!object.Equals(BarG1, other.BarG1)) return false;
    if (!object.Equals(BarG2, other.BarG2)) return false;
    if (ProofC != other.ProofC) return false;
    if (ProofS != other.ProofS) return false;
    if (Hash != other.Hash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= attributeNames_.GetHashCode();
    if (hSk_ != null) hash ^= HSk.GetHashCode();
    if (hRand_ != null) hash ^= HRand.GetHashCode();
    hash ^= hAttrs_.GetHashCode();
    if (w_ != null) hash ^= W.GetHashCode();
    if (barG1_ != null) hash ^= BarG1.GetHashCode();
    if (barG2_ != null) hash ^= BarG2.GetHashCode();
    if (ProofC.Length != 0) hash ^= ProofC.GetHashCode();
    if (ProofS.Length != 0) hash ^= ProofS.GetHashCode();
    if (Hash.Length != 0) hash ^= Hash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    attributeNames_.WriteTo(output, _repeated_attributeNames_codec);
    if (hSk_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(HSk);
    }
    if (hRand_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(HRand);
    }
    hAttrs_.WriteTo(output, _repeated_hAttrs_codec);
    if (w_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(W);
    }
    if (barG1_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(BarG1);
    }
    if (barG2_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(BarG2);
    }
    if (ProofC.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(ProofC);
    }
    if (ProofS.Length != 0) {
      output.WriteRawTag(74);
      output.WriteBytes(ProofS);
    }
    if (Hash.Length != 0) {
      output.WriteRawTag(82);
      output.WriteBytes(Hash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += attributeNames_.CalculateSize(_repeated_attributeNames_codec);
    if (hSk_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HSk);
    }
    if (hRand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HRand);
    }
    size += hAttrs_.CalculateSize(_repeated_hAttrs_codec);
    if (w_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(W);
    }
    if (barG1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarG1);
    }
    if (barG2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarG2);
    }
    if (ProofC.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofC);
    }
    if (ProofS.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofS);
    }
    if (Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IssuerPublicKey other) {
    if (other == null) {
      return;
    }
    attributeNames_.Add(other.attributeNames_);
    if (other.hSk_ != null) {
      if (hSk_ == null) {
        hSk_ = new global::ECP();
      }
      HSk.MergeFrom(other.HSk);
    }
    if (other.hRand_ != null) {
      if (hRand_ == null) {
        hRand_ = new global::ECP();
      }
      HRand.MergeFrom(other.HRand);
    }
    hAttrs_.Add(other.hAttrs_);
    if (other.w_ != null) {
      if (w_ == null) {
        w_ = new global::ECP2();
      }
      W.MergeFrom(other.W);
    }
    if (other.barG1_ != null) {
      if (barG1_ == null) {
        barG1_ = new global::ECP();
      }
      BarG1.MergeFrom(other.BarG1);
    }
    if (other.barG2_ != null) {
      if (barG2_ == null) {
        barG2_ = new global::ECP();
      }
      BarG2.MergeFrom(other.BarG2);
    }
    if (other.ProofC.Length != 0) {
      ProofC = other.ProofC;
    }
    if (other.ProofS.Length != 0) {
      ProofS = other.ProofS;
    }
    if (other.Hash.Length != 0) {
      Hash = other.Hash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          attributeNames_.AddEntriesFrom(input, _repeated_attributeNames_codec);
          break;
        }
        case 18: {
          if (hSk_ == null) {
            hSk_ = new global::ECP();
          }
          input.ReadMessage(hSk_);
          break;
        }
        case 26: {
          if (hRand_ == null) {
            hRand_ = new global::ECP();
          }
          input.ReadMessage(hRand_);
          break;
        }
        case 34: {
          hAttrs_.AddEntriesFrom(input, _repeated_hAttrs_codec);
          break;
        }
        case 42: {
          if (w_ == null) {
            w_ = new global::ECP2();
          }
          input.ReadMessage(w_);
          break;
        }
        case 50: {
          if (barG1_ == null) {
            barG1_ = new global::ECP();
          }
          input.ReadMessage(barG1_);
          break;
        }
        case 58: {
          if (barG2_ == null) {
            barG2_ = new global::ECP();
          }
          input.ReadMessage(barG2_);
          break;
        }
        case 66: {
          ProofC = input.ReadBytes();
          break;
        }
        case 74: {
          ProofS = input.ReadBytes();
          break;
        }
        case 82: {
          Hash = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// IssuerKey specifies an issuer key pair that consists of
/// ISk - the issuer secret key and
/// IssuerPublicKey - the issuer public key
/// </summary>
public sealed partial class IssuerKey : pb::IMessage<IssuerKey> {
  private static readonly pb::MessageParser<IssuerKey> _parser = new pb::MessageParser<IssuerKey>(() => new IssuerKey());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IssuerKey> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuerKey() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuerKey(IssuerKey other) : this() {
    isk_ = other.isk_;
    ipk_ = other.ipk_ != null ? other.ipk_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuerKey Clone() {
    return new IssuerKey(this);
  }

  /// <summary>Field number for the "isk" field.</summary>
  public const int IskFieldNumber = 1;
  private pb::ByteString isk_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Isk {
    get { return isk_; }
    set {
      isk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ipk" field.</summary>
  public const int IpkFieldNumber = 2;
  private global::IssuerPublicKey ipk_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::IssuerPublicKey Ipk {
    get { return ipk_; }
    set {
      ipk_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IssuerKey);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IssuerKey other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Isk != other.Isk) return false;
    if (!object.Equals(Ipk, other.Ipk)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Isk.Length != 0) hash ^= Isk.GetHashCode();
    if (ipk_ != null) hash ^= Ipk.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Isk.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Isk);
    }
    if (ipk_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Ipk);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Isk.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Isk);
    }
    if (ipk_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ipk);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IssuerKey other) {
    if (other == null) {
      return;
    }
    if (other.Isk.Length != 0) {
      Isk = other.Isk;
    }
    if (other.ipk_ != null) {
      if (ipk_ == null) {
        ipk_ = new global::IssuerPublicKey();
      }
      Ipk.MergeFrom(other.Ipk);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Isk = input.ReadBytes();
          break;
        }
        case 18: {
          if (ipk_ == null) {
            ipk_ = new global::IssuerPublicKey();
          }
          input.ReadMessage(ipk_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Credential specifies a credential object that consists of
/// a, b, e, s - signature value
/// attrs - attribute values
/// </summary>
public sealed partial class Credential : pb::IMessage<Credential> {
  private static readonly pb::MessageParser<Credential> _parser = new pb::MessageParser<Credential>(() => new Credential());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Credential> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Credential() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Credential(Credential other) : this() {
    a_ = other.a_ != null ? other.a_.Clone() : null;
    b_ = other.b_ != null ? other.b_.Clone() : null;
    e_ = other.e_;
    s_ = other.s_;
    attrs_ = other.attrs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Credential Clone() {
    return new Credential(this);
  }

  /// <summary>Field number for the "a" field.</summary>
  public const int AFieldNumber = 1;
  private global::ECP a_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP A {
    get { return a_; }
    set {
      a_ = value;
    }
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 2;
  private global::ECP b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP B {
    get { return b_; }
    set {
      b_ = value;
    }
  }

  /// <summary>Field number for the "e" field.</summary>
  public const int EFieldNumber = 3;
  private pb::ByteString e_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString E {
    get { return e_; }
    set {
      e_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "s" field.</summary>
  public const int SFieldNumber = 4;
  private pb::ByteString s_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString S {
    get { return s_; }
    set {
      s_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "attrs" field.</summary>
  public const int AttrsFieldNumber = 5;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_attrs_codec
      = pb::FieldCodec.ForBytes(42);
  private readonly pbc::RepeatedField<pb::ByteString> attrs_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> Attrs {
    get { return attrs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Credential);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Credential other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(A, other.A)) return false;
    if (!object.Equals(B, other.B)) return false;
    if (E != other.E) return false;
    if (S != other.S) return false;
    if(!attrs_.Equals(other.attrs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (a_ != null) hash ^= A.GetHashCode();
    if (b_ != null) hash ^= B.GetHashCode();
    if (E.Length != 0) hash ^= E.GetHashCode();
    if (S.Length != 0) hash ^= S.GetHashCode();
    hash ^= attrs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (a_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(A);
    }
    if (b_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(B);
    }
    if (E.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(E);
    }
    if (S.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(S);
    }
    attrs_.WriteTo(output, _repeated_attrs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (a_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
    }
    if (b_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(B);
    }
    if (E.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(E);
    }
    if (S.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(S);
    }
    size += attrs_.CalculateSize(_repeated_attrs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Credential other) {
    if (other == null) {
      return;
    }
    if (other.a_ != null) {
      if (a_ == null) {
        a_ = new global::ECP();
      }
      A.MergeFrom(other.A);
    }
    if (other.b_ != null) {
      if (b_ == null) {
        b_ = new global::ECP();
      }
      B.MergeFrom(other.B);
    }
    if (other.E.Length != 0) {
      E = other.E;
    }
    if (other.S.Length != 0) {
      S = other.S;
    }
    attrs_.Add(other.attrs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (a_ == null) {
            a_ = new global::ECP();
          }
          input.ReadMessage(a_);
          break;
        }
        case 18: {
          if (b_ == null) {
            b_ = new global::ECP();
          }
          input.ReadMessage(b_);
          break;
        }
        case 26: {
          E = input.ReadBytes();
          break;
        }
        case 34: {
          S = input.ReadBytes();
          break;
        }
        case 42: {
          attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// CredRequest specifies a credential request object that consists of
/// nym - a pseudonym, which is a commitment to the user secret
/// issuer_nonce - a random nonce provided by the issuer
/// proof_c, proof_s - a zero-knowledge proof of knowledge of the
/// user secret inside Nym
/// </summary>
public sealed partial class CredRequest : pb::IMessage<CredRequest> {
  private static readonly pb::MessageParser<CredRequest> _parser = new pb::MessageParser<CredRequest>(() => new CredRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CredRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CredRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CredRequest(CredRequest other) : this() {
    nym_ = other.nym_ != null ? other.nym_.Clone() : null;
    issuerNonce_ = other.issuerNonce_;
    proofC_ = other.proofC_;
    proofS_ = other.proofS_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CredRequest Clone() {
    return new CredRequest(this);
  }

  /// <summary>Field number for the "nym" field.</summary>
  public const int NymFieldNumber = 1;
  private global::ECP nym_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP Nym {
    get { return nym_; }
    set {
      nym_ = value;
    }
  }

  /// <summary>Field number for the "issuer_nonce" field.</summary>
  public const int IssuerNonceFieldNumber = 2;
  private pb::ByteString issuerNonce_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString IssuerNonce {
    get { return issuerNonce_; }
    set {
      issuerNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_c" field.</summary>
  public const int ProofCFieldNumber = 3;
  private pb::ByteString proofC_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofC {
    get { return proofC_; }
    set {
      proofC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s" field.</summary>
  public const int ProofSFieldNumber = 4;
  private pb::ByteString proofS_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofS {
    get { return proofS_; }
    set {
      proofS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CredRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CredRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Nym, other.Nym)) return false;
    if (IssuerNonce != other.IssuerNonce) return false;
    if (ProofC != other.ProofC) return false;
    if (ProofS != other.ProofS) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nym_ != null) hash ^= Nym.GetHashCode();
    if (IssuerNonce.Length != 0) hash ^= IssuerNonce.GetHashCode();
    if (ProofC.Length != 0) hash ^= ProofC.GetHashCode();
    if (ProofS.Length != 0) hash ^= ProofS.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nym_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Nym);
    }
    if (IssuerNonce.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(IssuerNonce);
    }
    if (ProofC.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(ProofC);
    }
    if (ProofS.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(ProofS);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nym_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nym);
    }
    if (IssuerNonce.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerNonce);
    }
    if (ProofC.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofC);
    }
    if (ProofS.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofS);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CredRequest other) {
    if (other == null) {
      return;
    }
    if (other.nym_ != null) {
      if (nym_ == null) {
        nym_ = new global::ECP();
      }
      Nym.MergeFrom(other.Nym);
    }
    if (other.IssuerNonce.Length != 0) {
      IssuerNonce = other.IssuerNonce;
    }
    if (other.ProofC.Length != 0) {
      ProofC = other.ProofC;
    }
    if (other.ProofS.Length != 0) {
      ProofS = other.ProofS;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nym_ == null) {
            nym_ = new global::ECP();
          }
          input.ReadMessage(nym_);
          break;
        }
        case 18: {
          IssuerNonce = input.ReadBytes();
          break;
        }
        case 26: {
          ProofC = input.ReadBytes();
          break;
        }
        case 34: {
          ProofS = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Signature specifies a signature object that consists of
/// a_prime, a_bar, b_prime, proof_* - randomized credential signature values
/// and a zero-knowledge proof of knowledge of a credential
/// and the corresponding user secret together with the attribute values
/// nonce - a fresh nonce used for the signature
/// nym - a fresh pseudonym (a commitment to to the user secret)
/// </summary>
public sealed partial class Signature : pb::IMessage<Signature> {
  private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Signature> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Signature() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Signature(Signature other) : this() {
    aPrime_ = other.aPrime_ != null ? other.aPrime_.Clone() : null;
    aBar_ = other.aBar_ != null ? other.aBar_.Clone() : null;
    bPrime_ = other.bPrime_ != null ? other.bPrime_.Clone() : null;
    proofC_ = other.proofC_;
    proofSSk_ = other.proofSSk_;
    proofSE_ = other.proofSE_;
    proofSR2_ = other.proofSR2_;
    proofSR3_ = other.proofSR3_;
    proofSSPrime_ = other.proofSSPrime_;
    proofSAttrs_ = other.proofSAttrs_.Clone();
    nonce_ = other.nonce_;
    nym_ = other.nym_ != null ? other.nym_.Clone() : null;
    proofSRNym_ = other.proofSRNym_;
    revocationEpochPk_ = other.revocationEpochPk_ != null ? other.revocationEpochPk_.Clone() : null;
    revocationPkSig_ = other.revocationPkSig_;
    epoch_ = other.epoch_;
    nonRevocationProof_ = other.nonRevocationProof_ != null ? other.nonRevocationProof_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Signature Clone() {
    return new Signature(this);
  }

  /// <summary>Field number for the "a_prime" field.</summary>
  public const int APrimeFieldNumber = 1;
  private global::ECP aPrime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP APrime {
    get { return aPrime_; }
    set {
      aPrime_ = value;
    }
  }

  /// <summary>Field number for the "a_bar" field.</summary>
  public const int ABarFieldNumber = 2;
  private global::ECP aBar_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP ABar {
    get { return aBar_; }
    set {
      aBar_ = value;
    }
  }

  /// <summary>Field number for the "b_prime" field.</summary>
  public const int BPrimeFieldNumber = 3;
  private global::ECP bPrime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP BPrime {
    get { return bPrime_; }
    set {
      bPrime_ = value;
    }
  }

  /// <summary>Field number for the "proof_c" field.</summary>
  public const int ProofCFieldNumber = 4;
  private pb::ByteString proofC_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofC {
    get { return proofC_; }
    set {
      proofC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_sk" field.</summary>
  public const int ProofSSkFieldNumber = 5;
  private pb::ByteString proofSSk_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSSk {
    get { return proofSSk_; }
    set {
      proofSSk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_e" field.</summary>
  public const int ProofSEFieldNumber = 6;
  private pb::ByteString proofSE_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSE {
    get { return proofSE_; }
    set {
      proofSE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_r2" field.</summary>
  public const int ProofSR2FieldNumber = 7;
  private pb::ByteString proofSR2_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSR2 {
    get { return proofSR2_; }
    set {
      proofSR2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_r3" field.</summary>
  public const int ProofSR3FieldNumber = 8;
  private pb::ByteString proofSR3_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSR3 {
    get { return proofSR3_; }
    set {
      proofSR3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_s_prime" field.</summary>
  public const int ProofSSPrimeFieldNumber = 9;
  private pb::ByteString proofSSPrime_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSSPrime {
    get { return proofSSPrime_; }
    set {
      proofSSPrime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_attrs" field.</summary>
  public const int ProofSAttrsFieldNumber = 10;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_proofSAttrs_codec
      = pb::FieldCodec.ForBytes(82);
  private readonly pbc::RepeatedField<pb::ByteString> proofSAttrs_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> ProofSAttrs {
    get { return proofSAttrs_; }
  }

  /// <summary>Field number for the "nonce" field.</summary>
  public const int NonceFieldNumber = 11;
  private pb::ByteString nonce_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Nonce {
    get { return nonce_; }
    set {
      nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nym" field.</summary>
  public const int NymFieldNumber = 12;
  private global::ECP nym_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP Nym {
    get { return nym_; }
    set {
      nym_ = value;
    }
  }

  /// <summary>Field number for the "proof_s_r_nym" field.</summary>
  public const int ProofSRNymFieldNumber = 13;
  private pb::ByteString proofSRNym_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSRNym {
    get { return proofSRNym_; }
    set {
      proofSRNym_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "revocation_epoch_pk" field.</summary>
  public const int RevocationEpochPkFieldNumber = 14;
  private global::ECP2 revocationEpochPk_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP2 RevocationEpochPk {
    get { return revocationEpochPk_; }
    set {
      revocationEpochPk_ = value;
    }
  }

  /// <summary>Field number for the "revocation_pk_sig" field.</summary>
  public const int RevocationPkSigFieldNumber = 15;
  private pb::ByteString revocationPkSig_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RevocationPkSig {
    get { return revocationPkSig_; }
    set {
      revocationPkSig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "epoch" field.</summary>
  public const int EpochFieldNumber = 16;
  private long epoch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Epoch {
    get { return epoch_; }
    set {
      epoch_ = value;
    }
  }

  /// <summary>Field number for the "non_revocation_proof" field.</summary>
  public const int NonRevocationProofFieldNumber = 17;
  private global::NonRevocationProof nonRevocationProof_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NonRevocationProof NonRevocationProof {
    get { return nonRevocationProof_; }
    set {
      nonRevocationProof_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Signature);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Signature other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(APrime, other.APrime)) return false;
    if (!object.Equals(ABar, other.ABar)) return false;
    if (!object.Equals(BPrime, other.BPrime)) return false;
    if (ProofC != other.ProofC) return false;
    if (ProofSSk != other.ProofSSk) return false;
    if (ProofSE != other.ProofSE) return false;
    if (ProofSR2 != other.ProofSR2) return false;
    if (ProofSR3 != other.ProofSR3) return false;
    if (ProofSSPrime != other.ProofSSPrime) return false;
    if(!proofSAttrs_.Equals(other.proofSAttrs_)) return false;
    if (Nonce != other.Nonce) return false;
    if (!object.Equals(Nym, other.Nym)) return false;
    if (ProofSRNym != other.ProofSRNym) return false;
    if (!object.Equals(RevocationEpochPk, other.RevocationEpochPk)) return false;
    if (RevocationPkSig != other.RevocationPkSig) return false;
    if (Epoch != other.Epoch) return false;
    if (!object.Equals(NonRevocationProof, other.NonRevocationProof)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (aPrime_ != null) hash ^= APrime.GetHashCode();
    if (aBar_ != null) hash ^= ABar.GetHashCode();
    if (bPrime_ != null) hash ^= BPrime.GetHashCode();
    if (ProofC.Length != 0) hash ^= ProofC.GetHashCode();
    if (ProofSSk.Length != 0) hash ^= ProofSSk.GetHashCode();
    if (ProofSE.Length != 0) hash ^= ProofSE.GetHashCode();
    if (ProofSR2.Length != 0) hash ^= ProofSR2.GetHashCode();
    if (ProofSR3.Length != 0) hash ^= ProofSR3.GetHashCode();
    if (ProofSSPrime.Length != 0) hash ^= ProofSSPrime.GetHashCode();
    hash ^= proofSAttrs_.GetHashCode();
    if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
    if (nym_ != null) hash ^= Nym.GetHashCode();
    if (ProofSRNym.Length != 0) hash ^= ProofSRNym.GetHashCode();
    if (revocationEpochPk_ != null) hash ^= RevocationEpochPk.GetHashCode();
    if (RevocationPkSig.Length != 0) hash ^= RevocationPkSig.GetHashCode();
    if (Epoch != 0L) hash ^= Epoch.GetHashCode();
    if (nonRevocationProof_ != null) hash ^= NonRevocationProof.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (aPrime_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(APrime);
    }
    if (aBar_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ABar);
    }
    if (bPrime_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(BPrime);
    }
    if (ProofC.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(ProofC);
    }
    if (ProofSSk.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(ProofSSk);
    }
    if (ProofSE.Length != 0) {
      output.WriteRawTag(50);
      output.WriteBytes(ProofSE);
    }
    if (ProofSR2.Length != 0) {
      output.WriteRawTag(58);
      output.WriteBytes(ProofSR2);
    }
    if (ProofSR3.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(ProofSR3);
    }
    if (ProofSSPrime.Length != 0) {
      output.WriteRawTag(74);
      output.WriteBytes(ProofSSPrime);
    }
    proofSAttrs_.WriteTo(output, _repeated_proofSAttrs_codec);
    if (Nonce.Length != 0) {
      output.WriteRawTag(90);
      output.WriteBytes(Nonce);
    }
    if (nym_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(Nym);
    }
    if (ProofSRNym.Length != 0) {
      output.WriteRawTag(106);
      output.WriteBytes(ProofSRNym);
    }
    if (revocationEpochPk_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(RevocationEpochPk);
    }
    if (RevocationPkSig.Length != 0) {
      output.WriteRawTag(122);
      output.WriteBytes(RevocationPkSig);
    }
    if (Epoch != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(Epoch);
    }
    if (nonRevocationProof_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(NonRevocationProof);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (aPrime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(APrime);
    }
    if (aBar_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ABar);
    }
    if (bPrime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BPrime);
    }
    if (ProofC.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofC);
    }
    if (ProofSSk.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSSk);
    }
    if (ProofSE.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSE);
    }
    if (ProofSR2.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSR2);
    }
    if (ProofSR3.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSR3);
    }
    if (ProofSSPrime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSSPrime);
    }
    size += proofSAttrs_.CalculateSize(_repeated_proofSAttrs_codec);
    if (Nonce.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nonce);
    }
    if (nym_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nym);
    }
    if (ProofSRNym.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSRNym);
    }
    if (revocationEpochPk_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevocationEpochPk);
    }
    if (RevocationPkSig.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RevocationPkSig);
    }
    if (Epoch != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Epoch);
    }
    if (nonRevocationProof_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(NonRevocationProof);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Signature other) {
    if (other == null) {
      return;
    }
    if (other.aPrime_ != null) {
      if (aPrime_ == null) {
        aPrime_ = new global::ECP();
      }
      APrime.MergeFrom(other.APrime);
    }
    if (other.aBar_ != null) {
      if (aBar_ == null) {
        aBar_ = new global::ECP();
      }
      ABar.MergeFrom(other.ABar);
    }
    if (other.bPrime_ != null) {
      if (bPrime_ == null) {
        bPrime_ = new global::ECP();
      }
      BPrime.MergeFrom(other.BPrime);
    }
    if (other.ProofC.Length != 0) {
      ProofC = other.ProofC;
    }
    if (other.ProofSSk.Length != 0) {
      ProofSSk = other.ProofSSk;
    }
    if (other.ProofSE.Length != 0) {
      ProofSE = other.ProofSE;
    }
    if (other.ProofSR2.Length != 0) {
      ProofSR2 = other.ProofSR2;
    }
    if (other.ProofSR3.Length != 0) {
      ProofSR3 = other.ProofSR3;
    }
    if (other.ProofSSPrime.Length != 0) {
      ProofSSPrime = other.ProofSSPrime;
    }
    proofSAttrs_.Add(other.proofSAttrs_);
    if (other.Nonce.Length != 0) {
      Nonce = other.Nonce;
    }
    if (other.nym_ != null) {
      if (nym_ == null) {
        nym_ = new global::ECP();
      }
      Nym.MergeFrom(other.Nym);
    }
    if (other.ProofSRNym.Length != 0) {
      ProofSRNym = other.ProofSRNym;
    }
    if (other.revocationEpochPk_ != null) {
      if (revocationEpochPk_ == null) {
        revocationEpochPk_ = new global::ECP2();
      }
      RevocationEpochPk.MergeFrom(other.RevocationEpochPk);
    }
    if (other.RevocationPkSig.Length != 0) {
      RevocationPkSig = other.RevocationPkSig;
    }
    if (other.Epoch != 0L) {
      Epoch = other.Epoch;
    }
    if (other.nonRevocationProof_ != null) {
      if (nonRevocationProof_ == null) {
        nonRevocationProof_ = new global::NonRevocationProof();
      }
      NonRevocationProof.MergeFrom(other.NonRevocationProof);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (aPrime_ == null) {
            aPrime_ = new global::ECP();
          }
          input.ReadMessage(aPrime_);
          break;
        }
        case 18: {
          if (aBar_ == null) {
            aBar_ = new global::ECP();
          }
          input.ReadMessage(aBar_);
          break;
        }
        case 26: {
          if (bPrime_ == null) {
            bPrime_ = new global::ECP();
          }
          input.ReadMessage(bPrime_);
          break;
        }
        case 34: {
          ProofC = input.ReadBytes();
          break;
        }
        case 42: {
          ProofSSk = input.ReadBytes();
          break;
        }
        case 50: {
          ProofSE = input.ReadBytes();
          break;
        }
        case 58: {
          ProofSR2 = input.ReadBytes();
          break;
        }
        case 66: {
          ProofSR3 = input.ReadBytes();
          break;
        }
        case 74: {
          ProofSSPrime = input.ReadBytes();
          break;
        }
        case 82: {
          proofSAttrs_.AddEntriesFrom(input, _repeated_proofSAttrs_codec);
          break;
        }
        case 90: {
          Nonce = input.ReadBytes();
          break;
        }
        case 98: {
          if (nym_ == null) {
            nym_ = new global::ECP();
          }
          input.ReadMessage(nym_);
          break;
        }
        case 106: {
          ProofSRNym = input.ReadBytes();
          break;
        }
        case 114: {
          if (revocationEpochPk_ == null) {
            revocationEpochPk_ = new global::ECP2();
          }
          input.ReadMessage(revocationEpochPk_);
          break;
        }
        case 122: {
          RevocationPkSig = input.ReadBytes();
          break;
        }
        case 128: {
          Epoch = input.ReadInt64();
          break;
        }
        case 138: {
          if (nonRevocationProof_ == null) {
            nonRevocationProof_ = new global::NonRevocationProof();
          }
          input.ReadMessage(nonRevocationProof_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// NonRevocationProof contains proof that the credential is not revoked
/// </summary>
public sealed partial class NonRevocationProof : pb::IMessage<NonRevocationProof> {
  private static readonly pb::MessageParser<NonRevocationProof> _parser = new pb::MessageParser<NonRevocationProof>(() => new NonRevocationProof());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NonRevocationProof> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NonRevocationProof() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NonRevocationProof(NonRevocationProof other) : this() {
    revocationAlg_ = other.revocationAlg_;
    nonRevocationProof_ = other.nonRevocationProof_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NonRevocationProof Clone() {
    return new NonRevocationProof(this);
  }

  /// <summary>Field number for the "revocation_alg" field.</summary>
  public const int RevocationAlgFieldNumber = 1;
  private int revocationAlg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RevocationAlg {
    get { return revocationAlg_; }
    set {
      revocationAlg_ = value;
    }
  }

  /// <summary>Field number for the "non_revocation_proof" field.</summary>
  public const int NonRevocationProof_FieldNumber = 2;
  private pb::ByteString nonRevocationProof_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString NonRevocationProof_ {
    get { return nonRevocationProof_; }
    set {
      nonRevocationProof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NonRevocationProof);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NonRevocationProof other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RevocationAlg != other.RevocationAlg) return false;
    if (NonRevocationProof_ != other.NonRevocationProof_) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RevocationAlg != 0) hash ^= RevocationAlg.GetHashCode();
    if (NonRevocationProof_.Length != 0) hash ^= NonRevocationProof_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RevocationAlg != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RevocationAlg);
    }
    if (NonRevocationProof_.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(NonRevocationProof_);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RevocationAlg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevocationAlg);
    }
    if (NonRevocationProof_.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(NonRevocationProof_);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NonRevocationProof other) {
    if (other == null) {
      return;
    }
    if (other.RevocationAlg != 0) {
      RevocationAlg = other.RevocationAlg;
    }
    if (other.NonRevocationProof_.Length != 0) {
      NonRevocationProof_ = other.NonRevocationProof_;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RevocationAlg = input.ReadInt32();
          break;
        }
        case 18: {
          NonRevocationProof_ = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// NymSignature specifies a signature object that signs a message
/// with respect to a pseudonym. It differs from the standard idemix.signature in the fact that
/// the  standard signature object also proves that the pseudonym is based on a secret certified by
/// a CA (issuer), whereas NymSignature only proves that the the owner of the pseudonym
/// signed the message
/// </summary>
public sealed partial class NymSignature : pb::IMessage<NymSignature> {
  private static readonly pb::MessageParser<NymSignature> _parser = new pb::MessageParser<NymSignature>(() => new NymSignature());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NymSignature> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NymSignature() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NymSignature(NymSignature other) : this() {
    proofC_ = other.proofC_;
    proofSSk_ = other.proofSSk_;
    proofSRNym_ = other.proofSRNym_;
    nonce_ = other.nonce_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NymSignature Clone() {
    return new NymSignature(this);
  }

  /// <summary>Field number for the "proof_c" field.</summary>
  public const int ProofCFieldNumber = 1;
  private pb::ByteString proofC_ = pb::ByteString.Empty;
  /// <summary>
  /// proof_c is the Fiat-Shamir challenge of the ZKP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofC {
    get { return proofC_; }
    set {
      proofC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_sk" field.</summary>
  public const int ProofSSkFieldNumber = 2;
  private pb::ByteString proofSSk_ = pb::ByteString.Empty;
  /// <summary>
  /// proof_s_sk is the s-value proving knowledge of the user secret key
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSSk {
    get { return proofSSk_; }
    set {
      proofSSk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "proof_s_r_nym" field.</summary>
  public const int ProofSRNymFieldNumber = 3;
  private pb::ByteString proofSRNym_ = pb::ByteString.Empty;
  /// <summary>
  ///proof_s_r_nym is the s-value proving knowledge of the pseudonym secret
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ProofSRNym {
    get { return proofSRNym_; }
    set {
      proofSRNym_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nonce" field.</summary>
  public const int NonceFieldNumber = 4;
  private pb::ByteString nonce_ = pb::ByteString.Empty;
  /// <summary>
  /// nonce is a fresh nonce used for the signature
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Nonce {
    get { return nonce_; }
    set {
      nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NymSignature);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NymSignature other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProofC != other.ProofC) return false;
    if (ProofSSk != other.ProofSSk) return false;
    if (ProofSRNym != other.ProofSRNym) return false;
    if (Nonce != other.Nonce) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProofC.Length != 0) hash ^= ProofC.GetHashCode();
    if (ProofSSk.Length != 0) hash ^= ProofSSk.GetHashCode();
    if (ProofSRNym.Length != 0) hash ^= ProofSRNym.GetHashCode();
    if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProofC.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ProofC);
    }
    if (ProofSSk.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(ProofSSk);
    }
    if (ProofSRNym.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(ProofSRNym);
    }
    if (Nonce.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Nonce);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProofC.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofC);
    }
    if (ProofSSk.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSSk);
    }
    if (ProofSRNym.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProofSRNym);
    }
    if (Nonce.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nonce);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NymSignature other) {
    if (other == null) {
      return;
    }
    if (other.ProofC.Length != 0) {
      ProofC = other.ProofC;
    }
    if (other.ProofSSk.Length != 0) {
      ProofSSk = other.ProofSSk;
    }
    if (other.ProofSRNym.Length != 0) {
      ProofSRNym = other.ProofSRNym;
    }
    if (other.Nonce.Length != 0) {
      Nonce = other.Nonce;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ProofC = input.ReadBytes();
          break;
        }
        case 18: {
          ProofSSk = input.ReadBytes();
          break;
        }
        case 26: {
          ProofSRNym = input.ReadBytes();
          break;
        }
        case 34: {
          Nonce = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CredentialRevocationInformation : pb::IMessage<CredentialRevocationInformation> {
  private static readonly pb::MessageParser<CredentialRevocationInformation> _parser = new pb::MessageParser<CredentialRevocationInformation>(() => new CredentialRevocationInformation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CredentialRevocationInformation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdemixReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CredentialRevocationInformation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CredentialRevocationInformation(CredentialRevocationInformation other) : this() {
    epoch_ = other.epoch_;
    epochPk_ = other.epochPk_ != null ? other.epochPk_.Clone() : null;
    epochPkSig_ = other.epochPkSig_;
    revocationAlg_ = other.revocationAlg_;
    revocationData_ = other.revocationData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CredentialRevocationInformation Clone() {
    return new CredentialRevocationInformation(this);
  }

  /// <summary>Field number for the "epoch" field.</summary>
  public const int EpochFieldNumber = 1;
  private long epoch_;
  /// <summary>
  /// epoch contains the epoch (time window) in which this CRI is valid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Epoch {
    get { return epoch_; }
    set {
      epoch_ = value;
    }
  }

  /// <summary>Field number for the "epoch_pk" field.</summary>
  public const int EpochPkFieldNumber = 2;
  private global::ECP2 epochPk_;
  /// <summary>
  /// epoch_pk is the public key that is used by the revocation authority in this epoch
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ECP2 EpochPk {
    get { return epochPk_; }
    set {
      epochPk_ = value;
    }
  }

  /// <summary>Field number for the "epoch_pk_sig" field.</summary>
  public const int EpochPkSigFieldNumber = 3;
  private pb::ByteString epochPkSig_ = pb::ByteString.Empty;
  /// <summary>
  /// epoch_pk_sig is a signature on the EpochPK valid under the revocation authority's long term key
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EpochPkSig {
    get { return epochPkSig_; }
    set {
      epochPkSig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "revocation_alg" field.</summary>
  public const int RevocationAlgFieldNumber = 4;
  private int revocationAlg_;
  /// <summary>
  /// revocation_alg denotes which revocation algorithm is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RevocationAlg {
    get { return revocationAlg_; }
    set {
      revocationAlg_ = value;
    }
  }

  /// <summary>Field number for the "revocation_data" field.</summary>
  public const int RevocationDataFieldNumber = 5;
  private pb::ByteString revocationData_ = pb::ByteString.Empty;
  /// <summary>
  /// revocation_data contains data specific to the revocation algorithm used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RevocationData {
    get { return revocationData_; }
    set {
      revocationData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CredentialRevocationInformation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CredentialRevocationInformation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Epoch != other.Epoch) return false;
    if (!object.Equals(EpochPk, other.EpochPk)) return false;
    if (EpochPkSig != other.EpochPkSig) return false;
    if (RevocationAlg != other.RevocationAlg) return false;
    if (RevocationData != other.RevocationData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Epoch != 0L) hash ^= Epoch.GetHashCode();
    if (epochPk_ != null) hash ^= EpochPk.GetHashCode();
    if (EpochPkSig.Length != 0) hash ^= EpochPkSig.GetHashCode();
    if (RevocationAlg != 0) hash ^= RevocationAlg.GetHashCode();
    if (RevocationData.Length != 0) hash ^= RevocationData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Epoch != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Epoch);
    }
    if (epochPk_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(EpochPk);
    }
    if (EpochPkSig.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(EpochPkSig);
    }
    if (RevocationAlg != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RevocationAlg);
    }
    if (RevocationData.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(RevocationData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Epoch != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Epoch);
    }
    if (epochPk_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EpochPk);
    }
    if (EpochPkSig.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EpochPkSig);
    }
    if (RevocationAlg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevocationAlg);
    }
    if (RevocationData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RevocationData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CredentialRevocationInformation other) {
    if (other == null) {
      return;
    }
    if (other.Epoch != 0L) {
      Epoch = other.Epoch;
    }
    if (other.epochPk_ != null) {
      if (epochPk_ == null) {
        epochPk_ = new global::ECP2();
      }
      EpochPk.MergeFrom(other.EpochPk);
    }
    if (other.EpochPkSig.Length != 0) {
      EpochPkSig = other.EpochPkSig;
    }
    if (other.RevocationAlg != 0) {
      RevocationAlg = other.RevocationAlg;
    }
    if (other.RevocationData.Length != 0) {
      RevocationData = other.RevocationData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Epoch = input.ReadInt64();
          break;
        }
        case 18: {
          if (epochPk_ == null) {
            epochPk_ = new global::ECP2();
          }
          input.ReadMessage(epochPk_);
          break;
        }
        case 26: {
          EpochPkSig = input.ReadBytes();
          break;
        }
        case 32: {
          RevocationAlg = input.ReadInt32();
          break;
        }
        case 42: {
          RevocationData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
